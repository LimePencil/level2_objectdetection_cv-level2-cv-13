{"config": "dataset_type = 'CocoDataset'\ndata_root = 'dataset/'\nclasses = ('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n           'Styrofoam', 'Plastic bag', 'Battery', 'Clothing')\nmulti_scale = [(512, 512), (544, 544), (576, 576), (608, 608), (640, 640),\n               (672, 672), (704, 704), (736, 736), (768, 768), (800, 800),\n               (832, 832), (864, 864), (896, 896), (928, 928), (960, 960),\n               (992, 992), (1024, 1024)]\nalbu_train_transforms = [\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Flip', p=1.0),\n            dict(type='RandomRotate90', p=1.0)\n        ],\n        p=0.1),\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[0.1, 0.3],\n        contrast_limit=[0.1, 0.3],\n        p=0.2),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='ChannelShuffle', p=1.0),\n            dict(type='RandomGamma', p=1.0),\n            dict(type='RGBShift', p=1.0)\n        ],\n        p=0.1),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', blur_limit=3, p=1.0),\n            dict(type='MedianBlur', blur_limit=3, p=1.0)\n        ],\n        p=0.1)\n]\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(512, 512), (544, 544), (576, 576), (608, 608), (640, 640),\n                   (672, 672), (704, 704), (736, 736), (768, 768), (800, 800),\n                   (832, 832), (864, 864), (896, 896), (928, 928), (960, 960),\n                   (992, 992), (1024, 1024)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Flip', p=1.0),\n                    dict(type='RandomRotate90', p=1.0)\n                ],\n                p=0.1),\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=[0.1, 0.3],\n                contrast_limit=[0.1, 0.3],\n                p=0.2),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='ChannelShuffle', p=1.0),\n                    dict(type='RandomGamma', p=1.0),\n                    dict(type='RGBShift', p=1.0)\n                ],\n                p=0.1),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Blur', blur_limit=3, p=1.0),\n                    dict(type='MedianBlur', blur_limit=3, p=1.0)\n                ],\n                p=0.1)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=[(512, 512), (640, 640), (768, 768), (896, 896),\n                   (1024, 1024)],\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/opt/ml/level2_objectdetection_cv-level2-cv-13/pseudo_labeling/swinb_f4_0.975.json',\n        img_prefix='/opt/ml/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(512, 512), (544, 544), (576, 576), (608, 608),\n                           (640, 640), (672, 672), (704, 704), (736, 736),\n                           (768, 768), (800, 800), (832, 832), (864, 864),\n                           (896, 896), (928, 928), (960, 960), (992, 992),\n                           (1024, 1024)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Flip', p=1.0),\n                            dict(type='RandomRotate90', p=1.0)\n                        ],\n                        p=0.1),\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=[0.1, 0.3],\n                        contrast_limit=[0.1, 0.3],\n                        p=0.2),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='ChannelShuffle', p=1.0),\n                            dict(type='RandomGamma', p=1.0),\n                            dict(type='RGBShift', p=1.0)\n                        ],\n                        p=0.1),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Blur', blur_limit=3, p=1.0),\n                            dict(type='MedianBlur', blur_limit=3, p=1.0)\n                        ],\n                        p=0.1)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/opt/ml/level2_objectdetection_cv-level2-cv-13/fold_dataset/validation_fold_4_of_5.json',\n        img_prefix='/opt/ml/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/dataset/test.json',\n        img_prefix='/opt/ml/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=[(512, 512), (640, 640), (768, 768), (896, 896),\n                           (1024, 1024)],\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window12_384_22kto1k.pth'\nmodel = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=128,\n        depths=[2, 2, 18, 2],\n        num_heads=[4, 8, 16, 32],\n        window_size=12,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.2,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window12_384_22kto1k.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[128, 256, 512, 1024],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.001,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=150)))\ncheckpoint_config = dict(interval=-1)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='MMDetWandbHook',\n            init_kwargs=dict(\n                project='Object Detection',\n                entity='boostcamp-cv-13',\n                name=\n                'cascade_rcnn_swinB384_2X_Pseudo_0.975_e3_f4_with_train_lr0_000025',\n                config=dict(\n                    optimizer_type='AdamW',\n                    optimizer_lr=2.5e-05,\n                    lr_scheduler_type=None,\n                    batch_size=4,\n                    epoch_size=3)),\n            log_checkpoint=True,\n            log_checkpoint_metadata=True,\n            num_eval_images=100,\n            log_artifact=True)\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\noptimizer_config = dict(grad_clip=None)\noptimizer = dict(\n    type='AdamW',\n    lr=2.5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\nlr_config = None\nrunner = dict(type='EpochBasedRunner', max_epochs=3)\nseed = 42\ngpu_ids = [0]\nmodel_name = 'Cascade RCNN'\nneck_name = 'FPN'\nopt_name = 'AdamW'\nlr = 2.5e-05\nepoch = 3\nversion = 1\nwork_dir = './work_dirs/cascade_rcnn_swinB384_2X_Pseudo_0.975_e3_f4_with_train_lr0_000025'\ndevice = 'cuda'\nworkers_per_gpu = 4\nfp16 = dict(loss_scale=dict(init_scale=512.0))\n", "hook_msgs": {}}
{"config": "dataset_type = 'CocoDataset'\ndata_root = 'dataset/'\nclasses = ('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n           'Styrofoam', 'Plastic bag', 'Battery', 'Clothing')\nmulti_scale = [(512, 512), (544, 544), (576, 576), (608, 608), (640, 640),\n               (672, 672), (704, 704), (736, 736), (768, 768), (800, 800),\n               (832, 832), (864, 864), (896, 896), (928, 928), (960, 960),\n               (992, 992), (1024, 1024)]\nalbu_train_transforms = [\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Flip', p=1.0),\n            dict(type='RandomRotate90', p=1.0)\n        ],\n        p=0.1),\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[0.1, 0.3],\n        contrast_limit=[0.1, 0.3],\n        p=0.2),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='ChannelShuffle', p=1.0),\n            dict(type='RandomGamma', p=1.0),\n            dict(type='RGBShift', p=1.0)\n        ],\n        p=0.1),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', blur_limit=3, p=1.0),\n            dict(type='MedianBlur', blur_limit=3, p=1.0)\n        ],\n        p=0.1)\n]\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(512, 512), (544, 544), (576, 576), (608, 608), (640, 640),\n                   (672, 672), (704, 704), (736, 736), (768, 768), (800, 800),\n                   (832, 832), (864, 864), (896, 896), (928, 928), (960, 960),\n                   (992, 992), (1024, 1024)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Flip', p=1.0),\n                    dict(type='RandomRotate90', p=1.0)\n                ],\n                p=0.1),\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=[0.1, 0.3],\n                contrast_limit=[0.1, 0.3],\n                p=0.2),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='ChannelShuffle', p=1.0),\n                    dict(type='RandomGamma', p=1.0),\n                    dict(type='RGBShift', p=1.0)\n                ],\n                p=0.1),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Blur', blur_limit=3, p=1.0),\n                    dict(type='MedianBlur', blur_limit=3, p=1.0)\n                ],\n                p=0.1)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=[(512, 512), (640, 640), (768, 768), (896, 896),\n                   (1024, 1024)],\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/opt/ml/level2_objectdetection_cv-level2-cv-13/pseudo_labeling/swinb_f4_0.975.json',\n        img_prefix='/opt/ml/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(512, 512), (544, 544), (576, 576), (608, 608),\n                           (640, 640), (672, 672), (704, 704), (736, 736),\n                           (768, 768), (800, 800), (832, 832), (864, 864),\n                           (896, 896), (928, 928), (960, 960), (992, 992),\n                           (1024, 1024)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Flip', p=1.0),\n                            dict(type='RandomRotate90', p=1.0)\n                        ],\n                        p=0.1),\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=[0.1, 0.3],\n                        contrast_limit=[0.1, 0.3],\n                        p=0.2),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='ChannelShuffle', p=1.0),\n                            dict(type='RandomGamma', p=1.0),\n                            dict(type='RGBShift', p=1.0)\n                        ],\n                        p=0.1),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Blur', blur_limit=3, p=1.0),\n                            dict(type='MedianBlur', blur_limit=3, p=1.0)\n                        ],\n                        p=0.1)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/opt/ml/level2_objectdetection_cv-level2-cv-13/fold_dataset/validation_fold_4_of_5.json',\n        img_prefix='/opt/ml/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/dataset/test.json',\n        img_prefix='/opt/ml/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=[(512, 512), (640, 640), (768, 768), (896, 896),\n                           (1024, 1024)],\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window12_384_22kto1k.pth'\nmodel = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=128,\n        depths=[2, 2, 18, 2],\n        num_heads=[4, 8, 16, 32],\n        window_size=12,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.2,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window12_384_22kto1k.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[128, 256, 512, 1024],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.001,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=150)))\ncheckpoint_config = dict(interval=-1)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='MMDetWandbHook',\n            init_kwargs=dict(\n                project='Object Detection',\n                entity='boostcamp-cv-13',\n                name=\n                'cascade_rcnn_swinB384_2X_Pseudo_0.975_e3_f4_with_train_lr0_000025',\n                config=dict(\n                    optimizer_type='AdamW',\n                    optimizer_lr=2.5e-05,\n                    lr_scheduler_type=None,\n                    batch_size=4,\n                    epoch_size=3)),\n            log_checkpoint=True,\n            log_checkpoint_metadata=True,\n            num_eval_images=100,\n            log_artifact=True)\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\noptimizer_config = dict(grad_clip=None)\noptimizer = dict(\n    type='AdamW',\n    lr=2.5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\nlr_config = None\nrunner = dict(type='EpochBasedRunner', max_epochs=3)\nseed = 42\ngpu_ids = [0]\nmodel_name = 'Cascade RCNN'\nneck_name = 'FPN'\nopt_name = 'AdamW'\nlr = 2.5e-05\nepoch = 3\nversion = 1\nwork_dir = './work_dirs/cascade_rcnn_swinB384_2X_Pseudo_0.975_e3_f4_with_train_lr0_000025'\ndevice = 'cuda'\nworkers_per_gpu = 4\nfp16 = dict(loss_scale=dict(init_scale=512.0))\n", "hook_msgs": {}}
{"config": "dataset_type = 'CocoDataset'\ndata_root = 'dataset/'\nclasses = ('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n           'Styrofoam', 'Plastic bag', 'Battery', 'Clothing')\nmulti_scale = [(512, 512), (544, 544), (576, 576), (608, 608), (640, 640),\n               (672, 672), (704, 704), (736, 736), (768, 768), (800, 800),\n               (832, 832), (864, 864), (896, 896), (928, 928), (960, 960),\n               (992, 992), (1024, 1024)]\nalbu_train_transforms = [\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Flip', p=1.0),\n            dict(type='RandomRotate90', p=1.0)\n        ],\n        p=0.1),\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[0.1, 0.3],\n        contrast_limit=[0.1, 0.3],\n        p=0.2),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='ChannelShuffle', p=1.0),\n            dict(type='RandomGamma', p=1.0),\n            dict(type='RGBShift', p=1.0)\n        ],\n        p=0.1),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', blur_limit=3, p=1.0),\n            dict(type='MedianBlur', blur_limit=3, p=1.0)\n        ],\n        p=0.1)\n]\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(512, 512), (544, 544), (576, 576), (608, 608), (640, 640),\n                   (672, 672), (704, 704), (736, 736), (768, 768), (800, 800),\n                   (832, 832), (864, 864), (896, 896), (928, 928), (960, 960),\n                   (992, 992), (1024, 1024)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Flip', p=1.0),\n                    dict(type='RandomRotate90', p=1.0)\n                ],\n                p=0.1),\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=[0.1, 0.3],\n                contrast_limit=[0.1, 0.3],\n                p=0.2),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='ChannelShuffle', p=1.0),\n                    dict(type='RandomGamma', p=1.0),\n                    dict(type='RGBShift', p=1.0)\n                ],\n                p=0.1),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Blur', blur_limit=3, p=1.0),\n                    dict(type='MedianBlur', blur_limit=3, p=1.0)\n                ],\n                p=0.1)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=[(512, 512), (640, 640), (768, 768), (896, 896),\n                   (1024, 1024)],\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/opt/ml/level2_objectdetection_cv-level2-cv-13/pseudo_labeling/swinb_f4_0.975.json',\n        img_prefix='/opt/ml/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(512, 512), (544, 544), (576, 576), (608, 608),\n                           (640, 640), (672, 672), (704, 704), (736, 736),\n                           (768, 768), (800, 800), (832, 832), (864, 864),\n                           (896, 896), (928, 928), (960, 960), (992, 992),\n                           (1024, 1024)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Flip', p=1.0),\n                            dict(type='RandomRotate90', p=1.0)\n                        ],\n                        p=0.1),\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=[0.1, 0.3],\n                        contrast_limit=[0.1, 0.3],\n                        p=0.2),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='ChannelShuffle', p=1.0),\n                            dict(type='RandomGamma', p=1.0),\n                            dict(type='RGBShift', p=1.0)\n                        ],\n                        p=0.1),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Blur', blur_limit=3, p=1.0),\n                            dict(type='MedianBlur', blur_limit=3, p=1.0)\n                        ],\n                        p=0.1)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/opt/ml/level2_objectdetection_cv-level2-cv-13/fold_dataset/validation_fold_4_of_5.json',\n        img_prefix='/opt/ml/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/dataset/test.json',\n        img_prefix='/opt/ml/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=[(512, 512), (640, 640), (768, 768), (896, 896),\n                           (1024, 1024)],\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window12_384_22kto1k.pth'\nmodel = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=128,\n        depths=[2, 2, 18, 2],\n        num_heads=[4, 8, 16, 32],\n        window_size=12,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.2,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window12_384_22kto1k.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[128, 256, 512, 1024],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.001,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=150)))\ncheckpoint_config = dict(interval=-1)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='MMDetWandbHook',\n            init_kwargs=dict(\n                project='Object Detection',\n                entity='boostcamp-cv-13',\n                name=\n                'cascade_rcnn_swinB384_2X_Pseudo_0.975_e3_f4_with_train_lr0_000025',\n                config=dict(\n                    optimizer_type='AdamW',\n                    optimizer_lr=2.5e-05,\n                    lr_scheduler_type=None,\n                    batch_size=4,\n                    epoch_size=3)),\n            log_checkpoint=True,\n            log_checkpoint_metadata=True,\n            num_eval_images=100,\n            log_artifact=True)\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\noptimizer_config = dict(grad_clip=None)\noptimizer = dict(\n    type='AdamW',\n    lr=2.5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\nlr_config = None\nrunner = dict(type='EpochBasedRunner', max_epochs=3)\nseed = 42\ngpu_ids = [0]\nmodel_name = 'Cascade RCNN'\nneck_name = 'FPN'\nopt_name = 'AdamW'\nlr = 2.5e-05\nepoch = 3\nversion = 1\nwork_dir = './work_dirs/cascade_rcnn_swinB384_2X_Pseudo_0.975_e3_f4_with_train_lr0_000025'\ndevice = 'cuda'\nworkers_per_gpu = 4\nfp16 = dict(loss_scale=dict(init_scale=512.0))\n", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 3e-05, "memory": 17311, "data_time": 0.05124, "loss_rpn_cls": 0.01577, "loss_rpn_bbox": 0.01127, "s0.loss_cls": 0.11511, "s0.acc": 96.28516, "s0.loss_bbox": 0.05758, "s1.loss_cls": 0.05944, "s1.acc": 96.3159, "s1.loss_bbox": 0.05719, "s2.loss_cls": 0.03062, "s2.acc": 96.14822, "s2.loss_bbox": 0.03346, "loss": 0.38045, "time": 0.63251}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 3e-05, "memory": 17313, "data_time": 0.00571, "loss_rpn_cls": 0.01973, "loss_rpn_bbox": 0.01084, "s0.loss_cls": 0.10662, "s0.acc": 96.39453, "s0.loss_bbox": 0.04486, "s1.loss_cls": 0.05615, "s1.acc": 96.25553, "s1.loss_bbox": 0.04471, "s2.loss_cls": 0.02879, "s2.acc": 96.20958, "s2.loss_bbox": 0.02862, "loss": 0.34032, "time": 0.56201}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 3e-05, "memory": 17316, "data_time": 0.00613, "loss_rpn_cls": 0.0163, "loss_rpn_bbox": 0.01123, "s0.loss_cls": 0.10388, "s0.acc": 96.48633, "s0.loss_bbox": 0.04958, "s1.loss_cls": 0.05045, "s1.acc": 96.65259, "s1.loss_bbox": 0.04652, "s2.loss_cls": 0.02527, "s2.acc": 96.41994, "s2.loss_bbox": 0.03032, "loss": 0.33354, "time": 0.58908}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 3e-05, "memory": 17316, "data_time": 0.00589, "loss_rpn_cls": 0.01515, "loss_rpn_bbox": 0.01284, "s0.loss_cls": 0.10321, "s0.acc": 96.50977, "s0.loss_bbox": 0.04776, "s1.loss_cls": 0.05051, "s1.acc": 96.48589, "s1.loss_bbox": 0.04589, "s2.loss_cls": 0.0244, "s2.acc": 96.57119, "s2.loss_bbox": 0.02907, "loss": 0.32884, "time": 0.57637}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 3e-05, "memory": 17316, "data_time": 0.00607, "loss_rpn_cls": 0.01464, "loss_rpn_bbox": 0.01241, "s0.loss_cls": 0.09154, "s0.acc": 96.8125, "s0.loss_bbox": 0.04591, "s1.loss_cls": 0.04262, "s1.acc": 96.91774, "s1.loss_bbox": 0.04534, "s2.loss_cls": 0.02176, "s2.acc": 96.74911, "s2.loss_bbox": 0.03071, "loss": 0.30493, "time": 0.57793}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 3e-05, "memory": 17316, "data_time": 0.00612, "loss_rpn_cls": 0.01683, "loss_rpn_bbox": 0.01084, "s0.loss_cls": 0.09629, "s0.acc": 96.80078, "s0.loss_bbox": 0.04038, "s1.loss_cls": 0.04715, "s1.acc": 97.01862, "s1.loss_bbox": 0.04244, "s2.loss_cls": 0.0234, "s2.acc": 96.92693, "s2.loss_bbox": 0.02898, "loss": 0.30631, "time": 0.55859}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 3e-05, "memory": 17316, "data_time": 0.00635, "loss_rpn_cls": 0.01528, "loss_rpn_bbox": 0.0062, "s0.loss_cls": 0.08788, "s0.acc": 96.94727, "s0.loss_bbox": 0.0376, "s1.loss_cls": 0.04282, "s1.acc": 97.10773, "s1.loss_bbox": 0.03925, "s2.loss_cls": 0.02234, "s2.acc": 96.75473, "s2.loss_bbox": 0.02734, "loss": 0.27872, "time": 0.57561}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 3e-05, "memory": 17316, "data_time": 0.00634, "loss_rpn_cls": 0.01779, "loss_rpn_bbox": 0.01042, "s0.loss_cls": 0.10429, "s0.acc": 96.56641, "s0.loss_bbox": 0.04737, "s1.loss_cls": 0.05071, "s1.acc": 96.59498, "s1.loss_bbox": 0.04717, "s2.loss_cls": 0.02591, "s2.acc": 96.45726, "s2.loss_bbox": 0.03186, "loss": 0.33553, "time": 0.5666}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 3e-05, "memory": 17316, "data_time": 0.00644, "loss_rpn_cls": 0.0143, "loss_rpn_bbox": 0.01274, "s0.loss_cls": 0.08816, "s0.acc": 97.07812, "s0.loss_bbox": 0.04436, "s1.loss_cls": 0.04488, "s1.acc": 96.93997, "s1.loss_bbox": 0.04265, "s2.loss_cls": 0.02136, "s2.acc": 97.00502, "s2.loss_bbox": 0.02665, "loss": 0.29509, "time": 0.57251}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 3e-05, "memory": 17316, "data_time": 0.00633, "loss_rpn_cls": 0.02109, "loss_rpn_bbox": 0.01155, "s0.loss_cls": 0.11172, "s0.acc": 96.06055, "s0.loss_bbox": 0.06548, "s1.loss_cls": 0.05381, "s1.acc": 96.35107, "s1.loss_bbox": 0.05984, "s2.loss_cls": 0.02815, "s2.acc": 96.29481, "s2.loss_bbox": 0.03591, "loss": 0.38756, "time": 0.56712}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 3e-05, "memory": 17316, "data_time": 0.00631, "loss_rpn_cls": 0.01978, "loss_rpn_bbox": 0.01177, "s0.loss_cls": 0.11968, "s0.acc": 96.12305, "s0.loss_bbox": 0.05505, "s1.loss_cls": 0.05824, "s1.acc": 96.3033, "s1.loss_bbox": 0.05321, "s2.loss_cls": 0.02856, "s2.acc": 96.27547, "s2.loss_bbox": 0.03521, "loss": 0.38149, "time": 0.57682}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 3e-05, "memory": 17316, "data_time": 0.00653, "loss_rpn_cls": 0.02099, "loss_rpn_bbox": 0.01311, "s0.loss_cls": 0.10766, "s0.acc": 96.40039, "s0.loss_bbox": 0.04783, "s1.loss_cls": 0.0508, "s1.acc": 96.68346, "s1.loss_bbox": 0.04473, "s2.loss_cls": 0.02379, "s2.acc": 96.98621, "s2.loss_bbox": 0.02814, "loss": 0.33704, "time": 0.58715}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 3e-05, "memory": 17316, "data_time": 0.00664, "loss_rpn_cls": 0.01282, "loss_rpn_bbox": 0.00996, "s0.loss_cls": 0.09799, "s0.acc": 96.81641, "s0.loss_bbox": 0.04424, "s1.loss_cls": 0.04799, "s1.acc": 96.85501, "s1.loss_bbox": 0.04617, "s2.loss_cls": 0.02465, "s2.acc": 96.7361, "s2.loss_bbox": 0.03191, "loss": 0.31573, "time": 0.5952}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 3e-05, "memory": 17316, "data_time": 0.00632, "loss_rpn_cls": 0.01899, "loss_rpn_bbox": 0.01518, "s0.loss_cls": 0.12282, "s0.acc": 96.01953, "s0.loss_bbox": 0.05394, "s1.loss_cls": 0.06149, "s1.acc": 96.11139, "s1.loss_bbox": 0.05654, "s2.loss_cls": 0.03048, "s2.acc": 96.01263, "s2.loss_bbox": 0.03675, "loss": 0.39619, "time": 0.58014}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 3e-05, "memory": 17316, "data_time": 0.00669, "loss_rpn_cls": 0.01385, "loss_rpn_bbox": 0.01155, "s0.loss_cls": 0.08347, "s0.acc": 97.0332, "s0.loss_bbox": 0.04728, "s1.loss_cls": 0.03831, "s1.acc": 97.26443, "s1.loss_bbox": 0.04743, "s2.loss_cls": 0.01952, "s2.acc": 97.27333, "s2.loss_bbox": 0.03153, "loss": 0.29293, "time": 0.58438}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 3e-05, "memory": 17316, "data_time": 0.00695, "loss_rpn_cls": 0.01345, "loss_rpn_bbox": 0.00777, "s0.loss_cls": 0.10375, "s0.acc": 96.8125, "s0.loss_bbox": 0.04087, "s1.loss_cls": 0.05166, "s1.acc": 96.88908, "s1.loss_bbox": 0.04638, "s2.loss_cls": 0.02454, "s2.acc": 96.78662, "s2.loss_bbox": 0.03082, "loss": 0.31924, "time": 0.57966}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 3e-05, "memory": 17316, "data_time": 0.00672, "loss_rpn_cls": 0.02286, "loss_rpn_bbox": 0.01239, "s0.loss_cls": 0.11356, "s0.acc": 96.11133, "s0.loss_bbox": 0.0564, "s1.loss_cls": 0.05462, "s1.acc": 96.19357, "s1.loss_bbox": 0.05965, "s2.loss_cls": 0.02667, "s2.acc": 96.18803, "s2.loss_bbox": 0.03957, "loss": 0.38572, "time": 0.58988}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 3e-05, "memory": 17316, "data_time": 0.00629, "loss_rpn_cls": 0.01946, "loss_rpn_bbox": 0.01475, "s0.loss_cls": 0.11236, "s0.acc": 96.16992, "s0.loss_bbox": 0.04549, "s1.loss_cls": 0.05548, "s1.acc": 96.17185, "s1.loss_bbox": 0.04515, "s2.loss_cls": 0.02759, "s2.acc": 96.25901, "s2.loss_bbox": 0.0298, "loss": 0.35009, "time": 0.54175}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 3e-05, "memory": 17316, "data_time": 0.00652, "loss_rpn_cls": 0.01561, "loss_rpn_bbox": 0.00744, "s0.loss_cls": 0.09304, "s0.acc": 97.07812, "s0.loss_bbox": 0.03623, "s1.loss_cls": 0.04824, "s1.acc": 97.00457, "s1.loss_bbox": 0.0353, "s2.loss_cls": 0.02269, "s2.acc": 97.087, "s2.loss_bbox": 0.0236, "loss": 0.28215, "time": 0.55141}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 3e-05, "memory": 17316, "data_time": 0.00633, "loss_rpn_cls": 0.01825, "loss_rpn_bbox": 0.01228, "s0.loss_cls": 0.09841, "s0.acc": 96.61328, "s0.loss_bbox": 0.04542, "s1.loss_cls": 0.04765, "s1.acc": 96.65109, "s1.loss_bbox": 0.04849, "s2.loss_cls": 0.02377, "s2.acc": 96.81948, "s2.loss_bbox": 0.03194, "loss": 0.32621, "time": 0.5608}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 3e-05, "memory": 17316, "data_time": 0.00652, "loss_rpn_cls": 0.01705, "loss_rpn_bbox": 0.01331, "s0.loss_cls": 0.11331, "s0.acc": 96.18945, "s0.loss_bbox": 0.05587, "s1.loss_cls": 0.05442, "s1.acc": 96.51854, "s1.loss_bbox": 0.05692, "s2.loss_cls": 0.02677, "s2.acc": 96.6214, "s2.loss_bbox": 0.0367, "loss": 0.37435, "time": 0.58183}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 3e-05, "memory": 17316, "data_time": 0.00672, "loss_rpn_cls": 0.01408, "loss_rpn_bbox": 0.01003, "s0.loss_cls": 0.1003, "s0.acc": 96.53516, "s0.loss_bbox": 0.04202, "s1.loss_cls": 0.04901, "s1.acc": 96.72823, "s1.loss_bbox": 0.04565, "s2.loss_cls": 0.02506, "s2.acc": 96.68184, "s2.loss_bbox": 0.02913, "loss": 0.31527, "time": 0.58266}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 3e-05, "memory": 17316, "data_time": 0.00704, "loss_rpn_cls": 0.01704, "loss_rpn_bbox": 0.01274, "s0.loss_cls": 0.10851, "s0.acc": 96.31836, "s0.loss_bbox": 0.04915, "s1.loss_cls": 0.05419, "s1.acc": 96.26858, "s1.loss_bbox": 0.04804, "s2.loss_cls": 0.02729, "s2.acc": 96.23582, "s2.loss_bbox": 0.0319, "loss": 0.34886, "time": 0.58265}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 3e-05, "memory": 17316, "data_time": 0.0069, "loss_rpn_cls": 0.02126, "loss_rpn_bbox": 0.00906, "s0.loss_cls": 0.09289, "s0.acc": 96.75977, "s0.loss_bbox": 0.0455, "s1.loss_cls": 0.04663, "s1.acc": 96.81645, "s1.loss_bbox": 0.04931, "s2.loss_cls": 0.02334, "s2.acc": 96.77518, "s2.loss_bbox": 0.03181, "loss": 0.31979, "time": 0.58471}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 3e-05, "memory": 17316, "data_time": 0.00685, "loss_rpn_cls": 0.0154, "loss_rpn_bbox": 0.01008, "s0.loss_cls": 0.10069, "s0.acc": 96.42969, "s0.loss_bbox": 0.0437, "s1.loss_cls": 0.05146, "s1.acc": 96.34456, "s1.loss_bbox": 0.0449, "s2.loss_cls": 0.02626, "s2.acc": 96.34805, "s2.loss_bbox": 0.03132, "loss": 0.3238, "time": 0.56424}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 3e-05, "memory": 17316, "data_time": 0.00645, "loss_rpn_cls": 0.01542, "loss_rpn_bbox": 0.01223, "s0.loss_cls": 0.11429, "s0.acc": 96.15625, "s0.loss_bbox": 0.05586, "s1.loss_cls": 0.05874, "s1.acc": 95.99731, "s1.loss_bbox": 0.05447, "s2.loss_cls": 0.03028, "s2.acc": 95.76982, "s2.loss_bbox": 0.03653, "loss": 0.37782, "time": 0.57175}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 3e-05, "memory": 17317, "data_time": 0.00689, "loss_rpn_cls": 0.01864, "loss_rpn_bbox": 0.01172, "s0.loss_cls": 0.11172, "s0.acc": 96.4043, "s0.loss_bbox": 0.05027, "s1.loss_cls": 0.05797, "s1.acc": 96.27412, "s1.loss_bbox": 0.05049, "s2.loss_cls": 0.02833, "s2.acc": 96.33726, "s2.loss_bbox": 0.03362, "loss": 0.36275, "time": 0.56871}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 3e-05, "memory": 17317, "data_time": 0.00698, "loss_rpn_cls": 0.02624, "loss_rpn_bbox": 0.01078, "s0.loss_cls": 0.12071, "s0.acc": 95.91211, "s0.loss_bbox": 0.05275, "s1.loss_cls": 0.06069, "s1.acc": 95.94308, "s1.loss_bbox": 0.05242, "s2.loss_cls": 0.0288, "s2.acc": 96.04896, "s2.loss_bbox": 0.03426, "loss": 0.38666, "time": 0.6005}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 3e-05, "memory": 17317, "data_time": 0.0071, "loss_rpn_cls": 0.0179, "loss_rpn_bbox": 0.01223, "s0.loss_cls": 0.1035, "s0.acc": 96.49609, "s0.loss_bbox": 0.0469, "s1.loss_cls": 0.05117, "s1.acc": 96.5104, "s1.loss_bbox": 0.04843, "s2.loss_cls": 0.02636, "s2.acc": 96.24967, "s2.loss_bbox": 0.03188, "loss": 0.33838, "time": 0.58719}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 3e-05, "memory": 17317, "data_time": 0.00662, "loss_rpn_cls": 0.02314, "loss_rpn_bbox": 0.01447, "s0.loss_cls": 0.11764, "s0.acc": 95.91992, "s0.loss_bbox": 0.05697, "s1.loss_cls": 0.05883, "s1.acc": 95.91326, "s1.loss_bbox": 0.05966, "s2.loss_cls": 0.03046, "s2.acc": 95.67276, "s2.loss_bbox": 0.0377, "loss": 0.39885, "time": 0.54171}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 3e-05, "memory": 17317, "data_time": 0.00676, "loss_rpn_cls": 0.01624, "loss_rpn_bbox": 0.01438, "s0.loss_cls": 0.0969, "s0.acc": 96.51758, "s0.loss_bbox": 0.05274, "s1.loss_cls": 0.04592, "s1.acc": 96.68099, "s1.loss_bbox": 0.0537, "s2.loss_cls": 0.02296, "s2.acc": 96.76192, "s2.loss_bbox": 0.03532, "loss": 0.33818, "time": 0.58316}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 3e-05, "memory": 17317, "data_time": 0.00703, "loss_rpn_cls": 0.01156, "loss_rpn_bbox": 0.00867, "s0.loss_cls": 0.09276, "s0.acc": 96.88477, "s0.loss_bbox": 0.04047, "s1.loss_cls": 0.04419, "s1.acc": 97.00005, "s1.loss_bbox": 0.04091, "s2.loss_cls": 0.02229, "s2.acc": 97.09713, "s2.loss_bbox": 0.0272, "loss": 0.28806, "time": 0.58657}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 3e-05, "memory": 17376, "data_time": 0.00675, "loss_rpn_cls": 0.02582, "loss_rpn_bbox": 0.01097, "s0.loss_cls": 0.11393, "s0.acc": 96.32422, "s0.loss_bbox": 0.04882, "s1.loss_cls": 0.05662, "s1.acc": 96.25517, "s1.loss_bbox": 0.05205, "s2.loss_cls": 0.02904, "s2.acc": 96.04587, "s2.loss_bbox": 0.03227, "loss": 0.36953, "time": 0.56822}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 3e-05, "memory": 17376, "data_time": 0.00693, "loss_rpn_cls": 0.01792, "loss_rpn_bbox": 0.0122, "s0.loss_cls": 0.12072, "s0.acc": 95.82617, "s0.loss_bbox": 0.06408, "s1.loss_cls": 0.06213, "s1.acc": 95.67398, "s1.loss_bbox": 0.06279, "s2.loss_cls": 0.03005, "s2.acc": 95.67302, "s2.loss_bbox": 0.03907, "loss": 0.40896, "time": 0.56728}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 3e-05, "memory": 17376, "data_time": 0.00697, "loss_rpn_cls": 0.01981, "loss_rpn_bbox": 0.01513, "s0.loss_cls": 0.12458, "s0.acc": 95.93555, "s0.loss_bbox": 0.05436, "s1.loss_cls": 0.06198, "s1.acc": 96.0865, "s1.loss_bbox": 0.05222, "s2.loss_cls": 0.03107, "s2.acc": 96.02168, "s2.loss_bbox": 0.03432, "loss": 0.39348, "time": 0.57926}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 3e-05, "memory": 17376, "data_time": 0.00653, "loss_rpn_cls": 0.01165, "loss_rpn_bbox": 0.00698, "s0.loss_cls": 0.0796, "s0.acc": 97.1543, "s0.loss_bbox": 0.03416, "s1.loss_cls": 0.04315, "s1.acc": 97.00134, "s1.loss_bbox": 0.04058, "s2.loss_cls": 0.02285, "s2.acc": 96.68155, "s2.loss_bbox": 0.02978, "loss": 0.26876, "time": 0.5661}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 3e-05, "memory": 17376, "data_time": 0.00676, "loss_rpn_cls": 0.02224, "loss_rpn_bbox": 0.01142, "s0.loss_cls": 0.09911, "s0.acc": 96.69727, "s0.loss_bbox": 0.04623, "s1.loss_cls": 0.04771, "s1.acc": 97.00153, "s1.loss_bbox": 0.046, "s2.loss_cls": 0.02393, "s2.acc": 96.90671, "s2.loss_bbox": 0.03169, "loss": 0.32835, "time": 0.57782}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 3e-05, "memory": 17376, "data_time": 0.00731, "loss_rpn_cls": 0.01816, "loss_rpn_bbox": 0.01133, "s0.loss_cls": 0.11024, "s0.acc": 96.39258, "s0.loss_bbox": 0.05255, "s1.loss_cls": 0.05186, "s1.acc": 96.66509, "s1.loss_bbox": 0.05094, "s2.loss_cls": 0.02612, "s2.acc": 96.48787, "s2.loss_bbox": 0.03454, "loss": 0.35576, "time": 0.56761}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 3e-05, "memory": 17376, "data_time": 0.0076, "loss_rpn_cls": 0.01474, "loss_rpn_bbox": 0.0088, "s0.loss_cls": 0.11568, "s0.acc": 96.43945, "s0.loss_bbox": 0.04779, "s1.loss_cls": 0.05383, "s1.acc": 96.81117, "s1.loss_bbox": 0.0471, "s2.loss_cls": 0.02707, "s2.acc": 96.83094, "s2.loss_bbox": 0.03096, "loss": 0.34598, "time": 0.57434}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 3e-05, "memory": 17376, "data_time": 0.00762, "loss_rpn_cls": 0.00878, "loss_rpn_bbox": 0.00553, "s0.loss_cls": 0.07494, "s0.acc": 97.33398, "s0.loss_bbox": 0.03243, "s1.loss_cls": 0.0383, "s1.acc": 97.21365, "s1.loss_bbox": 0.03616, "s2.loss_cls": 0.01939, "s2.acc": 97.15807, "s2.loss_bbox": 0.0274, "loss": 0.24293, "time": 0.5772}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 3e-05, "memory": 17376, "data_time": 0.0073, "loss_rpn_cls": 0.01889, "loss_rpn_bbox": 0.01399, "s0.loss_cls": 0.09924, "s0.acc": 96.57031, "s0.loss_bbox": 0.04413, "s1.loss_cls": 0.04851, "s1.acc": 96.6583, "s1.loss_bbox": 0.04773, "s2.loss_cls": 0.02397, "s2.acc": 96.70529, "s2.loss_bbox": 0.03092, "loss": 0.32737, "time": 0.56941}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 3e-05, "memory": 17376, "data_time": 0.00659, "loss_rpn_cls": 0.01888, "loss_rpn_bbox": 0.01134, "s0.loss_cls": 0.11215, "s0.acc": 96.21484, "s0.loss_bbox": 0.04912, "s1.loss_cls": 0.05452, "s1.acc": 96.25005, "s1.loss_bbox": 0.04871, "s2.loss_cls": 0.02696, "s2.acc": 96.18311, "s2.loss_bbox": 0.03232, "loss": 0.35401, "time": 0.57687}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 3e-05, "memory": 17376, "data_time": 0.00639, "loss_rpn_cls": 0.0221, "loss_rpn_bbox": 0.0142, "s0.loss_cls": 0.11064, "s0.acc": 96.32617, "s0.loss_bbox": 0.05291, "s1.loss_cls": 0.05412, "s1.acc": 96.50185, "s1.loss_bbox": 0.04821, "s2.loss_cls": 0.02722, "s2.acc": 96.47034, "s2.loss_bbox": 0.03029, "loss": 0.35968, "time": 0.54991}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 3e-05, "memory": 17376, "data_time": 0.00667, "loss_rpn_cls": 0.00959, "loss_rpn_bbox": 0.00826, "s0.loss_cls": 0.09509, "s0.acc": 96.74023, "s0.loss_bbox": 0.04055, "s1.loss_cls": 0.04978, "s1.acc": 96.73853, "s1.loss_bbox": 0.04004, "s2.loss_cls": 0.02492, "s2.acc": 96.66565, "s2.loss_bbox": 0.02599, "loss": 0.29421, "time": 0.574}
{"mode": "train", "epoch": 1, "iter": 2250, "lr": 3e-05, "memory": 17376, "data_time": 0.00709, "loss_rpn_cls": 0.01763, "loss_rpn_bbox": 0.01079, "s0.loss_cls": 0.10967, "s0.acc": 96.63281, "s0.loss_bbox": 0.04251, "s1.loss_cls": 0.05465, "s1.acc": 96.71694, "s1.loss_bbox": 0.04537, "s2.loss_cls": 0.027, "s2.acc": 96.5809, "s2.loss_bbox": 0.03037, "loss": 0.33799, "time": 0.58283}
{"mode": "train", "epoch": 1, "iter": 2300, "lr": 3e-05, "memory": 17376, "data_time": 0.00666, "loss_rpn_cls": 0.01905, "loss_rpn_bbox": 0.01471, "s0.loss_cls": 0.11326, "s0.acc": 96.0332, "s0.loss_bbox": 0.06053, "s1.loss_cls": 0.05604, "s1.acc": 96.18029, "s1.loss_bbox": 0.06109, "s2.loss_cls": 0.02878, "s2.acc": 95.8973, "s2.loss_bbox": 0.03394, "loss": 0.38739, "time": 0.59348}
{"mode": "train", "epoch": 1, "iter": 2350, "lr": 3e-05, "memory": 17376, "data_time": 0.00668, "loss_rpn_cls": 0.01078, "loss_rpn_bbox": 0.00752, "s0.loss_cls": 0.09143, "s0.acc": 96.88477, "s0.loss_bbox": 0.0476, "s1.loss_cls": 0.04538, "s1.acc": 96.8955, "s1.loss_bbox": 0.04647, "s2.loss_cls": 0.02336, "s2.acc": 96.53457, "s2.loss_bbox": 0.03225, "loss": 0.30478, "time": 0.57451}
{"mode": "train", "epoch": 1, "iter": 2400, "lr": 3e-05, "memory": 17376, "data_time": 0.00753, "loss_rpn_cls": 0.01817, "loss_rpn_bbox": 0.01246, "s0.loss_cls": 0.11373, "s0.acc": 96.08984, "s0.loss_bbox": 0.05743, "s1.loss_cls": 0.0563, "s1.acc": 96.06767, "s1.loss_bbox": 0.05791, "s2.loss_cls": 0.02909, "s2.acc": 95.89135, "s2.loss_bbox": 0.03695, "loss": 0.38203, "time": 0.58469}
{"mode": "train", "epoch": 1, "iter": 2450, "lr": 3e-05, "memory": 17376, "data_time": 0.00791, "loss_rpn_cls": 0.0157, "loss_rpn_bbox": 0.00695, "s0.loss_cls": 0.10379, "s0.acc": 96.56836, "s0.loss_bbox": 0.0437, "s1.loss_cls": 0.05164, "s1.acc": 96.63701, "s1.loss_bbox": 0.04683, "s2.loss_cls": 0.0267, "s2.acc": 96.35218, "s2.loss_bbox": 0.03364, "loss": 0.32894, "time": 0.58784}
{"mode": "train", "epoch": 1, "iter": 2500, "lr": 3e-05, "memory": 17376, "data_time": 0.00767, "loss_rpn_cls": 0.02187, "loss_rpn_bbox": 0.01143, "s0.loss_cls": 0.09658, "s0.acc": 96.7793, "s0.loss_bbox": 0.0486, "s1.loss_cls": 0.04939, "s1.acc": 96.58301, "s1.loss_bbox": 0.04997, "s2.loss_cls": 0.02459, "s2.acc": 96.52001, "s2.loss_bbox": 0.03193, "loss": 0.33436, "time": 0.58684}
{"mode": "train", "epoch": 1, "iter": 2550, "lr": 3e-05, "memory": 17376, "data_time": 0.00797, "loss_rpn_cls": 0.02179, "loss_rpn_bbox": 0.00946, "s0.loss_cls": 0.10486, "s0.acc": 96.44336, "s0.loss_bbox": 0.05396, "s1.loss_cls": 0.05069, "s1.acc": 96.58649, "s1.loss_bbox": 0.05206, "s2.loss_cls": 0.02565, "s2.acc": 96.58532, "s2.loss_bbox": 0.03158, "loss": 0.35005, "time": 0.6071}
{"mode": "train", "epoch": 1, "iter": 2600, "lr": 3e-05, "memory": 17376, "data_time": 0.00814, "loss_rpn_cls": 0.01957, "loss_rpn_bbox": 0.00925, "s0.loss_cls": 0.10337, "s0.acc": 96.55664, "s0.loss_bbox": 0.0431, "s1.loss_cls": 0.04984, "s1.acc": 96.69943, "s1.loss_bbox": 0.04561, "s2.loss_cls": 0.02579, "s2.acc": 96.68896, "s2.loss_bbox": 0.03092, "loss": 0.32746, "time": 0.63194}
{"mode": "train", "epoch": 1, "iter": 2650, "lr": 3e-05, "memory": 17376, "data_time": 0.00712, "loss_rpn_cls": 0.01508, "loss_rpn_bbox": 0.0105, "s0.loss_cls": 0.11902, "s0.acc": 95.96875, "s0.loss_bbox": 0.05331, "s1.loss_cls": 0.05739, "s1.acc": 96.23517, "s1.loss_bbox": 0.04847, "s2.loss_cls": 0.0285, "s2.acc": 96.05858, "s2.loss_bbox": 0.03247, "loss": 0.36475, "time": 0.84104}
{"mode": "train", "epoch": 1, "iter": 2700, "lr": 3e-05, "memory": 17376, "data_time": 0.00751, "loss_rpn_cls": 0.02908, "loss_rpn_bbox": 0.01285, "s0.loss_cls": 0.14096, "s0.acc": 95.6875, "s0.loss_bbox": 0.05349, "s1.loss_cls": 0.06854, "s1.acc": 95.96169, "s1.loss_bbox": 0.04948, "s2.loss_cls": 0.03277, "s2.acc": 96.18847, "s2.loss_bbox": 0.03216, "loss": 0.41934, "time": 0.82271}
{"mode": "train", "epoch": 1, "iter": 2750, "lr": 3e-05, "memory": 17376, "data_time": 0.00797, "loss_rpn_cls": 0.01726, "loss_rpn_bbox": 0.01046, "s0.loss_cls": 0.10565, "s0.acc": 96.41406, "s0.loss_bbox": 0.05339, "s1.loss_cls": 0.05314, "s1.acc": 96.28346, "s1.loss_bbox": 0.04893, "s2.loss_cls": 0.02704, "s2.acc": 96.42327, "s2.loss_bbox": 0.03031, "loss": 0.34619, "time": 0.58567}
{"mode": "train", "epoch": 1, "iter": 2800, "lr": 3e-05, "memory": 17376, "data_time": 0.00808, "loss_rpn_cls": 0.02238, "loss_rpn_bbox": 0.01611, "s0.loss_cls": 0.11938, "s0.acc": 95.94141, "s0.loss_bbox": 0.05534, "s1.loss_cls": 0.06104, "s1.acc": 95.93417, "s1.loss_bbox": 0.05485, "s2.loss_cls": 0.03029, "s2.acc": 95.99217, "s2.loss_bbox": 0.03486, "loss": 0.39425, "time": 0.5834}
{"mode": "train", "epoch": 1, "iter": 2850, "lr": 3e-05, "memory": 17376, "data_time": 0.00744, "loss_rpn_cls": 0.01165, "loss_rpn_bbox": 0.00929, "s0.loss_cls": 0.09561, "s0.acc": 96.62891, "s0.loss_bbox": 0.04258, "s1.loss_cls": 0.04661, "s1.acc": 96.86331, "s1.loss_bbox": 0.04366, "s2.loss_cls": 0.02465, "s2.acc": 96.58023, "s2.loss_bbox": 0.03204, "loss": 0.30609, "time": 0.54864}
{"mode": "train", "epoch": 1, "iter": 2900, "lr": 3e-05, "memory": 17376, "data_time": 0.00751, "loss_rpn_cls": 0.01675, "loss_rpn_bbox": 0.01103, "s0.loss_cls": 0.10734, "s0.acc": 96.44531, "s0.loss_bbox": 0.04778, "s1.loss_cls": 0.05047, "s1.acc": 96.81519, "s1.loss_bbox": 0.04483, "s2.loss_cls": 0.02465, "s2.acc": 96.71171, "s2.loss_bbox": 0.02832, "loss": 0.33117, "time": 0.54516}
{"mode": "train", "epoch": 1, "iter": 2950, "lr": 3e-05, "memory": 17376, "data_time": 0.00758, "loss_rpn_cls": 0.02224, "loss_rpn_bbox": 0.01107, "s0.loss_cls": 0.13103, "s0.acc": 95.91406, "s0.loss_bbox": 0.05554, "s1.loss_cls": 0.0668, "s1.acc": 95.90077, "s1.loss_bbox": 0.0558, "s2.loss_cls": 0.03324, "s2.acc": 95.86181, "s2.loss_bbox": 0.03597, "loss": 0.4117, "time": 0.55454}
{"mode": "train", "epoch": 1, "iter": 3000, "lr": 3e-05, "memory": 17376, "data_time": 0.00737, "loss_rpn_cls": 0.01571, "loss_rpn_bbox": 0.01065, "s0.loss_cls": 0.11017, "s0.acc": 96.22656, "s0.loss_bbox": 0.04765, "s1.loss_cls": 0.05254, "s1.acc": 96.45952, "s1.loss_bbox": 0.04612, "s2.loss_cls": 0.02602, "s2.acc": 96.47559, "s2.loss_bbox": 0.03219, "loss": 0.34106, "time": 0.55356}
{"mode": "train", "epoch": 1, "iter": 3050, "lr": 3e-05, "memory": 17376, "data_time": 0.00744, "loss_rpn_cls": 0.01725, "loss_rpn_bbox": 0.0107, "s0.loss_cls": 0.1028, "s0.acc": 96.44336, "s0.loss_bbox": 0.05098, "s1.loss_cls": 0.04871, "s1.acc": 96.71349, "s1.loss_bbox": 0.05222, "s2.loss_cls": 0.02328, "s2.acc": 96.72378, "s2.loss_bbox": 0.03526, "loss": 0.3412, "time": 0.5454}
{"mode": "train", "epoch": 1, "iter": 3100, "lr": 3e-05, "memory": 17385, "data_time": 0.00728, "loss_rpn_cls": 0.01745, "loss_rpn_bbox": 0.00967, "s0.loss_cls": 0.10812, "s0.acc": 96.39062, "s0.loss_bbox": 0.05004, "s1.loss_cls": 0.05632, "s1.acc": 96.33941, "s1.loss_bbox": 0.05153, "s2.loss_cls": 0.0289, "s2.acc": 96.08981, "s2.loss_bbox": 0.03051, "loss": 0.35256, "time": 0.55024}
{"mode": "train", "epoch": 1, "iter": 3150, "lr": 3e-05, "memory": 17385, "data_time": 0.00826, "loss_rpn_cls": 0.01432, "loss_rpn_bbox": 0.0134, "s0.loss_cls": 0.11628, "s0.acc": 96.16992, "s0.loss_bbox": 0.05511, "s1.loss_cls": 0.05414, "s1.acc": 96.58445, "s1.loss_bbox": 0.05073, "s2.loss_cls": 0.02578, "s2.acc": 96.57574, "s2.loss_bbox": 0.03291, "loss": 0.36267, "time": 0.5961}
{"mode": "train", "epoch": 1, "iter": 3200, "lr": 3e-05, "memory": 17385, "data_time": 0.00783, "loss_rpn_cls": 0.01569, "loss_rpn_bbox": 0.01008, "s0.loss_cls": 0.09792, "s0.acc": 96.61914, "s0.loss_bbox": 0.04658, "s1.loss_cls": 0.04552, "s1.acc": 96.80083, "s1.loss_bbox": 0.04538, "s2.loss_cls": 0.02231, "s2.acc": 96.75692, "s2.loss_bbox": 0.0306, "loss": 0.31408, "time": 0.58061}
{"mode": "train", "epoch": 1, "iter": 3250, "lr": 3e-05, "memory": 17385, "data_time": 0.00812, "loss_rpn_cls": 0.01503, "loss_rpn_bbox": 0.00791, "s0.loss_cls": 0.09299, "s0.acc": 96.84766, "s0.loss_bbox": 0.04276, "s1.loss_cls": 0.04757, "s1.acc": 96.74277, "s1.loss_bbox": 0.04015, "s2.loss_cls": 0.02457, "s2.acc": 96.73287, "s2.loss_bbox": 0.02882, "loss": 0.29981, "time": 0.5762}
{"mode": "train", "epoch": 1, "iter": 3300, "lr": 3e-05, "memory": 17385, "data_time": 0.00799, "loss_rpn_cls": 0.01363, "loss_rpn_bbox": 0.00672, "s0.loss_cls": 0.07821, "s0.acc": 97.24805, "s0.loss_bbox": 0.03688, "s1.loss_cls": 0.03836, "s1.acc": 97.14244, "s1.loss_bbox": 0.04047, "s2.loss_cls": 0.01966, "s2.acc": 97.00609, "s2.loss_bbox": 0.02769, "loss": 0.26162, "time": 0.57887}
{"mode": "train", "epoch": 1, "iter": 3350, "lr": 3e-05, "memory": 17385, "data_time": 0.00756, "loss_rpn_cls": 0.01276, "loss_rpn_bbox": 0.00907, "s0.loss_cls": 0.10286, "s0.acc": 96.64648, "s0.loss_bbox": 0.04174, "s1.loss_cls": 0.05034, "s1.acc": 96.76797, "s1.loss_bbox": 0.04459, "s2.loss_cls": 0.02584, "s2.acc": 96.79991, "s2.loss_bbox": 0.03099, "loss": 0.31818, "time": 0.56365}
{"mode": "train", "epoch": 1, "iter": 3400, "lr": 3e-05, "memory": 17385, "data_time": 0.00741, "loss_rpn_cls": 0.01355, "loss_rpn_bbox": 0.01065, "s0.loss_cls": 0.11099, "s0.acc": 96.38281, "s0.loss_bbox": 0.04689, "s1.loss_cls": 0.05481, "s1.acc": 96.52771, "s1.loss_bbox": 0.04484, "s2.loss_cls": 0.02794, "s2.acc": 96.38059, "s2.loss_bbox": 0.02936, "loss": 0.33902, "time": 0.55715}
{"mode": "train", "epoch": 1, "iter": 3450, "lr": 3e-05, "memory": 17385, "data_time": 0.00738, "loss_rpn_cls": 0.01633, "loss_rpn_bbox": 0.00763, "s0.loss_cls": 0.09455, "s0.acc": 96.97461, "s0.loss_bbox": 0.03644, "s1.loss_cls": 0.04957, "s1.acc": 96.71978, "s1.loss_bbox": 0.03478, "s2.loss_cls": 0.02603, "s2.acc": 96.50817, "s2.loss_bbox": 0.02439, "loss": 0.28972, "time": 0.55371}
{"mode": "train", "epoch": 1, "iter": 3500, "lr": 3e-05, "memory": 17385, "data_time": 0.00722, "loss_rpn_cls": 0.01649, "loss_rpn_bbox": 0.0089, "s0.loss_cls": 0.10989, "s0.acc": 96.2793, "s0.loss_bbox": 0.05067, "s1.loss_cls": 0.05382, "s1.acc": 96.2257, "s1.loss_bbox": 0.05093, "s2.loss_cls": 0.02714, "s2.acc": 96.19533, "s2.loss_bbox": 0.03384, "loss": 0.35168, "time": 0.55934}
{"mode": "train", "epoch": 1, "iter": 3550, "lr": 3e-05, "memory": 17385, "data_time": 0.00736, "loss_rpn_cls": 0.01226, "loss_rpn_bbox": 0.00694, "s0.loss_cls": 0.08061, "s0.acc": 97.09961, "s0.loss_bbox": 0.0301, "s1.loss_cls": 0.03928, "s1.acc": 97.20424, "s1.loss_bbox": 0.03049, "s2.loss_cls": 0.0203, "s2.acc": 97.18342, "s2.loss_bbox": 0.02166, "loss": 0.24164, "time": 0.55652}
{"mode": "train", "epoch": 1, "iter": 3600, "lr": 3e-05, "memory": 17385, "data_time": 0.00733, "loss_rpn_cls": 0.01123, "loss_rpn_bbox": 0.00705, "s0.loss_cls": 0.09817, "s0.acc": 96.64453, "s0.loss_bbox": 0.04125, "s1.loss_cls": 0.0505, "s1.acc": 96.46509, "s1.loss_bbox": 0.04469, "s2.loss_cls": 0.02503, "s2.acc": 96.46392, "s2.loss_bbox": 0.02864, "loss": 0.30656, "time": 0.56909}
{"mode": "train", "epoch": 1, "iter": 3650, "lr": 3e-05, "memory": 17385, "data_time": 0.0073, "loss_rpn_cls": 0.01623, "loss_rpn_bbox": 0.01181, "s0.loss_cls": 0.11881, "s0.acc": 96.09375, "s0.loss_bbox": 0.05209, "s1.loss_cls": 0.06119, "s1.acc": 96.00995, "s1.loss_bbox": 0.05299, "s2.loss_cls": 0.02942, "s2.acc": 96.0497, "s2.loss_bbox": 0.03322, "loss": 0.37576, "time": 0.5681}
{"mode": "train", "epoch": 1, "iter": 3700, "lr": 3e-05, "memory": 17385, "data_time": 0.00712, "loss_rpn_cls": 0.01513, "loss_rpn_bbox": 0.00926, "s0.loss_cls": 0.10516, "s0.acc": 96.47656, "s0.loss_bbox": 0.04263, "s1.loss_cls": 0.05387, "s1.acc": 96.45056, "s1.loss_bbox": 0.04775, "s2.loss_cls": 0.027, "s2.acc": 96.39768, "s2.loss_bbox": 0.03362, "loss": 0.33443, "time": 0.54522}
{"mode": "train", "epoch": 1, "iter": 3750, "lr": 3e-05, "memory": 17385, "data_time": 0.00744, "loss_rpn_cls": 0.01373, "loss_rpn_bbox": 0.01011, "s0.loss_cls": 0.10406, "s0.acc": 96.23828, "s0.loss_bbox": 0.05095, "s1.loss_cls": 0.05022, "s1.acc": 96.30367, "s1.loss_bbox": 0.05033, "s2.loss_cls": 0.0263, "s2.acc": 96.2295, "s2.loss_bbox": 0.03075, "loss": 0.33646, "time": 0.5629}
{"mode": "train", "epoch": 1, "iter": 3800, "lr": 3e-05, "memory": 17385, "data_time": 0.00754, "loss_rpn_cls": 0.0176, "loss_rpn_bbox": 0.00997, "s0.loss_cls": 0.11393, "s0.acc": 96.01758, "s0.loss_bbox": 0.05863, "s1.loss_cls": 0.05361, "s1.acc": 96.35281, "s1.loss_bbox": 0.05928, "s2.loss_cls": 0.02704, "s2.acc": 96.28096, "s2.loss_bbox": 0.03761, "loss": 0.37767, "time": 0.56021}
{"mode": "val", "epoch": 1, "iter": 976, "lr": 3e-05, "bbox_mAP": 0.613, "bbox_mAP_50": 0.792, "bbox_mAP_75": 0.654, "bbox_mAP_s": 0.027, "bbox_mAP_m": 0.246, "bbox_mAP_l": 0.695, "bbox_mAP_copypaste": "0.613 0.792 0.654 0.027 0.246 0.695"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 3e-05, "memory": 17385, "data_time": 0.05327, "loss_rpn_cls": 0.01529, "loss_rpn_bbox": 0.01366, "s0.loss_cls": 0.09694, "s0.acc": 96.81055, "s0.loss_bbox": 0.04392, "s1.loss_cls": 0.04506, "s1.acc": 97.06328, "s1.loss_bbox": 0.04482, "s2.loss_cls": 0.02237, "s2.acc": 96.90019, "s2.loss_bbox": 0.03025, "loss": 0.31231, "time": 0.62405}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 17385, "data_time": 0.0072, "loss_rpn_cls": 0.01705, "loss_rpn_bbox": 0.01111, "s0.loss_cls": 0.11329, "s0.acc": 96.2207, "s0.loss_bbox": 0.05277, "s1.loss_cls": 0.05741, "s1.acc": 96.30274, "s1.loss_bbox": 0.05233, "s2.loss_cls": 0.02812, "s2.acc": 96.24081, "s2.loss_bbox": 0.03513, "loss": 0.3672, "time": 0.56803}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 17385, "data_time": 0.00747, "loss_rpn_cls": 0.01446, "loss_rpn_bbox": 0.01103, "s0.loss_cls": 0.09397, "s0.acc": 96.79102, "s0.loss_bbox": 0.04876, "s1.loss_cls": 0.04395, "s1.acc": 97.00327, "s1.loss_bbox": 0.04826, "s2.loss_cls": 0.02178, "s2.acc": 97.00708, "s2.loss_bbox": 0.0327, "loss": 0.31492, "time": 0.5622}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 3e-05, "memory": 17385, "data_time": 0.00754, "loss_rpn_cls": 0.0095, "loss_rpn_bbox": 0.00864, "s0.loss_cls": 0.08323, "s0.acc": 97.09766, "s0.loss_bbox": 0.03831, "s1.loss_cls": 0.04043, "s1.acc": 97.09163, "s1.loss_bbox": 0.03959, "s2.loss_cls": 0.02064, "s2.acc": 96.88074, "s2.loss_bbox": 0.02717, "loss": 0.2675, "time": 0.57534}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 3e-05, "memory": 17385, "data_time": 0.00769, "loss_rpn_cls": 0.01827, "loss_rpn_bbox": 0.01328, "s0.loss_cls": 0.12335, "s0.acc": 95.86523, "s0.loss_bbox": 0.0582, "s1.loss_cls": 0.05771, "s1.acc": 96.14022, "s1.loss_bbox": 0.05756, "s2.loss_cls": 0.0284, "s2.acc": 96.24191, "s2.loss_bbox": 0.03716, "loss": 0.39394, "time": 0.57024}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 3e-05, "memory": 17385, "data_time": 0.00724, "loss_rpn_cls": 0.01668, "loss_rpn_bbox": 0.01143, "s0.loss_cls": 0.11554, "s0.acc": 96.1875, "s0.loss_bbox": 0.04927, "s1.loss_cls": 0.05515, "s1.acc": 96.23413, "s1.loss_bbox": 0.04846, "s2.loss_cls": 0.02686, "s2.acc": 96.39186, "s2.loss_bbox": 0.03092, "loss": 0.35431, "time": 0.5534}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 3e-05, "memory": 17385, "data_time": 0.00743, "loss_rpn_cls": 0.01338, "loss_rpn_bbox": 0.01064, "s0.loss_cls": 0.09352, "s0.acc": 96.94922, "s0.loss_bbox": 0.0482, "s1.loss_cls": 0.04242, "s1.acc": 97.13105, "s1.loss_bbox": 0.04511, "s2.loss_cls": 0.02134, "s2.acc": 97.0411, "s2.loss_bbox": 0.03128, "loss": 0.3059, "time": 0.55385}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 3e-05, "memory": 17385, "data_time": 0.00781, "loss_rpn_cls": 0.01362, "loss_rpn_bbox": 0.01079, "s0.loss_cls": 0.09942, "s0.acc": 96.37305, "s0.loss_bbox": 0.04759, "s1.loss_cls": 0.04856, "s1.acc": 96.55456, "s1.loss_bbox": 0.049, "s2.loss_cls": 0.02359, "s2.acc": 96.5182, "s2.loss_bbox": 0.0301, "loss": 0.32266, "time": 0.55736}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 3e-05, "memory": 17385, "data_time": 0.00791, "loss_rpn_cls": 0.01811, "loss_rpn_bbox": 0.00906, "s0.loss_cls": 0.09449, "s0.acc": 96.66992, "s0.loss_bbox": 0.0461, "s1.loss_cls": 0.04616, "s1.acc": 96.83186, "s1.loss_bbox": 0.04733, "s2.loss_cls": 0.02317, "s2.acc": 96.61319, "s2.loss_bbox": 0.02764, "loss": 0.31205, "time": 0.59297}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 3e-05, "memory": 17385, "data_time": 0.00788, "loss_rpn_cls": 0.01352, "loss_rpn_bbox": 0.01064, "s0.loss_cls": 0.09808, "s0.acc": 96.45703, "s0.loss_bbox": 0.05261, "s1.loss_cls": 0.04357, "s1.acc": 96.84533, "s1.loss_bbox": 0.05284, "s2.loss_cls": 0.02087, "s2.acc": 96.85913, "s2.loss_bbox": 0.03616, "loss": 0.3283, "time": 0.5599}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 3e-05, "memory": 17385, "data_time": 0.00774, "loss_rpn_cls": 0.01735, "loss_rpn_bbox": 0.01323, "s0.loss_cls": 0.11859, "s0.acc": 95.67188, "s0.loss_bbox": 0.05607, "s1.loss_cls": 0.05499, "s1.acc": 96.05215, "s1.loss_bbox": 0.05475, "s2.loss_cls": 0.02772, "s2.acc": 95.85382, "s2.loss_bbox": 0.03774, "loss": 0.38045, "time": 0.58496}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 3e-05, "memory": 17385, "data_time": 0.00776, "loss_rpn_cls": 0.0141, "loss_rpn_bbox": 0.00858, "s0.loss_cls": 0.08515, "s0.acc": 97.01953, "s0.loss_bbox": 0.03858, "s1.loss_cls": 0.04153, "s1.acc": 97.08057, "s1.loss_bbox": 0.0397, "s2.loss_cls": 0.02055, "s2.acc": 96.97003, "s2.loss_bbox": 0.0284, "loss": 0.27659, "time": 0.57394}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 3e-05, "memory": 17385, "data_time": 0.00786, "loss_rpn_cls": 0.01425, "loss_rpn_bbox": 0.01171, "s0.loss_cls": 0.10705, "s0.acc": 96.47266, "s0.loss_bbox": 0.05465, "s1.loss_cls": 0.04997, "s1.acc": 96.73961, "s1.loss_bbox": 0.05748, "s2.loss_cls": 0.02441, "s2.acc": 96.75509, "s2.loss_bbox": 0.03843, "loss": 0.35796, "time": 0.5774}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 3e-05, "memory": 17385, "data_time": 0.00784, "loss_rpn_cls": 0.02041, "loss_rpn_bbox": 0.01204, "s0.loss_cls": 0.11734, "s0.acc": 96.06641, "s0.loss_bbox": 0.05776, "s1.loss_cls": 0.05875, "s1.acc": 95.93908, "s1.loss_bbox": 0.06096, "s2.loss_cls": 0.02949, "s2.acc": 95.9249, "s2.loss_bbox": 0.03701, "loss": 0.39377, "time": 0.58467}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 3e-05, "memory": 17385, "data_time": 0.00813, "loss_rpn_cls": 0.01433, "loss_rpn_bbox": 0.0112, "s0.loss_cls": 0.11235, "s0.acc": 96.16602, "s0.loss_bbox": 0.05677, "s1.loss_cls": 0.05387, "s1.acc": 96.12115, "s1.loss_bbox": 0.05364, "s2.loss_cls": 0.02654, "s2.acc": 96.18927, "s2.loss_bbox": 0.03432, "loss": 0.36302, "time": 0.59218}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 3e-05, "memory": 17385, "data_time": 0.00766, "loss_rpn_cls": 0.01529, "loss_rpn_bbox": 0.01022, "s0.loss_cls": 0.08671, "s0.acc": 96.87695, "s0.loss_bbox": 0.03739, "s1.loss_cls": 0.04424, "s1.acc": 96.85621, "s1.loss_bbox": 0.03675, "s2.loss_cls": 0.02218, "s2.acc": 96.86809, "s2.loss_bbox": 0.02569, "loss": 0.27845, "time": 0.57264}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 3e-05, "memory": 17385, "data_time": 0.00785, "loss_rpn_cls": 0.01805, "loss_rpn_bbox": 0.01173, "s0.loss_cls": 0.1046, "s0.acc": 96.49414, "s0.loss_bbox": 0.04928, "s1.loss_cls": 0.05102, "s1.acc": 96.62793, "s1.loss_bbox": 0.047, "s2.loss_cls": 0.02548, "s2.acc": 96.71162, "s2.loss_bbox": 0.03003, "loss": 0.33719, "time": 0.55692}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 3e-05, "memory": 17385, "data_time": 0.00761, "loss_rpn_cls": 0.02156, "loss_rpn_bbox": 0.01347, "s0.loss_cls": 0.12229, "s0.acc": 95.94336, "s0.loss_bbox": 0.06209, "s1.loss_cls": 0.05884, "s1.acc": 96.08926, "s1.loss_bbox": 0.05977, "s2.loss_cls": 0.02934, "s2.acc": 96.26959, "s2.loss_bbox": 0.03686, "loss": 0.40421, "time": 0.53902}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 3e-05, "memory": 17385, "data_time": 0.00741, "loss_rpn_cls": 0.01606, "loss_rpn_bbox": 0.00939, "s0.loss_cls": 0.10292, "s0.acc": 96.43164, "s0.loss_bbox": 0.0478, "s1.loss_cls": 0.05492, "s1.acc": 96.04107, "s1.loss_bbox": 0.04786, "s2.loss_cls": 0.02772, "s2.acc": 96.13972, "s2.loss_bbox": 0.02965, "loss": 0.33632, "time": 0.54209}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 3e-05, "memory": 17385, "data_time": 0.00881, "loss_rpn_cls": 0.01654, "loss_rpn_bbox": 0.00859, "s0.loss_cls": 0.07153, "s0.acc": 97.67188, "s0.loss_bbox": 0.03226, "s1.loss_cls": 0.03141, "s1.acc": 98.00554, "s1.loss_bbox": 0.03258, "s2.loss_cls": 0.01517, "s2.acc": 98.15026, "s2.loss_bbox": 0.02359, "loss": 0.23169, "time": 0.58552}
{"mode": "train", "epoch": 2, "iter": 1050, "lr": 3e-05, "memory": 17385, "data_time": 0.00793, "loss_rpn_cls": 0.01457, "loss_rpn_bbox": 0.00818, "s0.loss_cls": 0.08469, "s0.acc": 97.13281, "s0.loss_bbox": 0.0383, "s1.loss_cls": 0.04252, "s1.acc": 97.06908, "s1.loss_bbox": 0.03884, "s2.loss_cls": 0.02181, "s2.acc": 97.1025, "s2.loss_bbox": 0.02436, "loss": 0.27328, "time": 0.58894}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 3e-05, "memory": 17385, "data_time": 0.00778, "loss_rpn_cls": 0.02494, "loss_rpn_bbox": 0.01742, "s0.loss_cls": 0.12761, "s0.acc": 95.68945, "s0.loss_bbox": 0.06402, "s1.loss_cls": 0.05846, "s1.acc": 96.13213, "s1.loss_bbox": 0.05773, "s2.loss_cls": 0.02834, "s2.acc": 96.37516, "s2.loss_bbox": 0.03739, "loss": 0.41589, "time": 0.57249}
{"mode": "train", "epoch": 2, "iter": 1150, "lr": 3e-05, "memory": 17385, "data_time": 0.00771, "loss_rpn_cls": 0.02053, "loss_rpn_bbox": 0.01564, "s0.loss_cls": 0.10632, "s0.acc": 96.50195, "s0.loss_bbox": 0.04008, "s1.loss_cls": 0.05271, "s1.acc": 96.5198, "s1.loss_bbox": 0.04162, "s2.loss_cls": 0.02551, "s2.acc": 96.63257, "s2.loss_bbox": 0.02654, "loss": 0.32894, "time": 0.5737}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 3e-05, "memory": 17385, "data_time": 0.00809, "loss_rpn_cls": 0.01965, "loss_rpn_bbox": 0.01319, "s0.loss_cls": 0.11861, "s0.acc": 95.96875, "s0.loss_bbox": 0.05907, "s1.loss_cls": 0.05729, "s1.acc": 95.94809, "s1.loss_bbox": 0.06006, "s2.loss_cls": 0.02854, "s2.acc": 95.98356, "s2.loss_bbox": 0.03854, "loss": 0.39495, "time": 0.58088}
{"mode": "train", "epoch": 2, "iter": 1250, "lr": 3e-05, "memory": 17385, "data_time": 0.00796, "loss_rpn_cls": 0.01319, "loss_rpn_bbox": 0.00843, "s0.loss_cls": 0.08521, "s0.acc": 96.94336, "s0.loss_bbox": 0.04429, "s1.loss_cls": 0.0396, "s1.acc": 97.11803, "s1.loss_bbox": 0.04377, "s2.loss_cls": 0.0202, "s2.acc": 97.02302, "s2.loss_bbox": 0.0289, "loss": 0.2836, "time": 0.55923}
{"mode": "train", "epoch": 2, "iter": 1300, "lr": 3e-05, "memory": 17385, "data_time": 0.00774, "loss_rpn_cls": 0.01403, "loss_rpn_bbox": 0.01013, "s0.loss_cls": 0.09135, "s0.acc": 96.82812, "s0.loss_bbox": 0.0411, "s1.loss_cls": 0.04507, "s1.acc": 96.82046, "s1.loss_bbox": 0.04253, "s2.loss_cls": 0.02282, "s2.acc": 96.68818, "s2.loss_bbox": 0.02935, "loss": 0.29638, "time": 0.56555}
{"mode": "train", "epoch": 2, "iter": 1350, "lr": 3e-05, "memory": 17385, "data_time": 0.00757, "loss_rpn_cls": 0.02193, "loss_rpn_bbox": 0.01135, "s0.loss_cls": 0.10993, "s0.acc": 96.19922, "s0.loss_bbox": 0.04977, "s1.loss_cls": 0.05483, "s1.acc": 95.98314, "s1.loss_bbox": 0.05029, "s2.loss_cls": 0.02695, "s2.acc": 95.97667, "s2.loss_bbox": 0.0343, "loss": 0.35934, "time": 0.55477}
{"mode": "train", "epoch": 2, "iter": 1400, "lr": 3e-05, "memory": 17385, "data_time": 0.00771, "loss_rpn_cls": 0.01187, "loss_rpn_bbox": 0.01142, "s0.loss_cls": 0.09021, "s0.acc": 96.8125, "s0.loss_bbox": 0.04172, "s1.loss_cls": 0.04455, "s1.acc": 96.99442, "s1.loss_bbox": 0.04235, "s2.loss_cls": 0.02254, "s2.acc": 96.72421, "s2.loss_bbox": 0.02855, "loss": 0.29322, "time": 0.56709}
{"mode": "train", "epoch": 2, "iter": 1450, "lr": 3e-05, "memory": 17385, "data_time": 0.00752, "loss_rpn_cls": 0.01892, "loss_rpn_bbox": 0.01043, "s0.loss_cls": 0.09148, "s0.acc": 96.89258, "s0.loss_bbox": 0.03637, "s1.loss_cls": 0.04803, "s1.acc": 96.86341, "s1.loss_bbox": 0.03854, "s2.loss_cls": 0.02438, "s2.acc": 96.73915, "s2.loss_bbox": 0.02674, "loss": 0.2949, "time": 0.5625}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 3e-05, "memory": 17385, "data_time": 0.00778, "loss_rpn_cls": 0.01777, "loss_rpn_bbox": 0.01372, "s0.loss_cls": 0.10547, "s0.acc": 96.40039, "s0.loss_bbox": 0.04995, "s1.loss_cls": 0.05028, "s1.acc": 96.48968, "s1.loss_bbox": 0.04994, "s2.loss_cls": 0.02662, "s2.acc": 96.51319, "s2.loss_bbox": 0.03395, "loss": 0.3477, "time": 0.58469}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 3e-05, "memory": 17385, "data_time": 0.00758, "loss_rpn_cls": 0.01616, "loss_rpn_bbox": 0.00992, "s0.loss_cls": 0.09116, "s0.acc": 97.13281, "s0.loss_bbox": 0.04223, "s1.loss_cls": 0.04662, "s1.acc": 96.97327, "s1.loss_bbox": 0.0401, "s2.loss_cls": 0.02357, "s2.acc": 96.84319, "s2.loss_bbox": 0.02404, "loss": 0.2938, "time": 0.60028}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 3e-05, "memory": 17385, "data_time": 0.0075, "loss_rpn_cls": 0.02136, "loss_rpn_bbox": 0.01707, "s0.loss_cls": 0.11644, "s0.acc": 96.01367, "s0.loss_bbox": 0.06239, "s1.loss_cls": 0.05651, "s1.acc": 96.06477, "s1.loss_bbox": 0.0598, "s2.loss_cls": 0.02827, "s2.acc": 96.09145, "s2.loss_bbox": 0.03773, "loss": 0.39957, "time": 0.56162}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 3e-05, "memory": 17385, "data_time": 0.00715, "loss_rpn_cls": 0.01076, "loss_rpn_bbox": 0.01067, "s0.loss_cls": 0.09539, "s0.acc": 96.80859, "s0.loss_bbox": 0.04728, "s1.loss_cls": 0.04842, "s1.acc": 96.77303, "s1.loss_bbox": 0.0462, "s2.loss_cls": 0.02409, "s2.acc": 96.70329, "s2.loss_bbox": 0.02941, "loss": 0.31222, "time": 0.5564}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 3e-05, "memory": 17385, "data_time": 0.00768, "loss_rpn_cls": 0.01962, "loss_rpn_bbox": 0.01421, "s0.loss_cls": 0.12207, "s0.acc": 95.92969, "s0.loss_bbox": 0.06102, "s1.loss_cls": 0.06066, "s1.acc": 95.92687, "s1.loss_bbox": 0.05671, "s2.loss_cls": 0.03062, "s2.acc": 96.02227, "s2.loss_bbox": 0.03516, "loss": 0.40008, "time": 0.57627}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 3e-05, "memory": 17385, "data_time": 0.00752, "loss_rpn_cls": 0.01963, "loss_rpn_bbox": 0.00922, "s0.loss_cls": 0.11074, "s0.acc": 96.25977, "s0.loss_bbox": 0.05253, "s1.loss_cls": 0.05137, "s1.acc": 96.56989, "s1.loss_bbox": 0.04819, "s2.loss_cls": 0.02464, "s2.acc": 96.62208, "s2.loss_bbox": 0.03079, "loss": 0.34712, "time": 0.57226}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 3e-05, "memory": 17385, "data_time": 0.00755, "loss_rpn_cls": 0.01595, "loss_rpn_bbox": 0.01019, "s0.loss_cls": 0.09595, "s0.acc": 96.64453, "s0.loss_bbox": 0.04616, "s1.loss_cls": 0.04516, "s1.acc": 96.85974, "s1.loss_bbox": 0.04654, "s2.loss_cls": 0.02343, "s2.acc": 96.68012, "s2.loss_bbox": 0.03108, "loss": 0.31446, "time": 0.55424}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 3e-05, "memory": 17385, "data_time": 0.00736, "loss_rpn_cls": 0.0172, "loss_rpn_bbox": 0.01548, "s0.loss_cls": 0.11169, "s0.acc": 96.17578, "s0.loss_bbox": 0.04944, "s1.loss_cls": 0.05455, "s1.acc": 96.20613, "s1.loss_bbox": 0.0537, "s2.loss_cls": 0.02684, "s2.acc": 96.25357, "s2.loss_bbox": 0.0374, "loss": 0.3663, "time": 0.56109}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 3e-05, "memory": 17385, "data_time": 0.00757, "loss_rpn_cls": 0.02015, "loss_rpn_bbox": 0.01203, "s0.loss_cls": 0.08827, "s0.acc": 96.87891, "s0.loss_bbox": 0.0413, "s1.loss_cls": 0.04142, "s1.acc": 97.1063, "s1.loss_bbox": 0.04258, "s2.loss_cls": 0.0212, "s2.acc": 96.99442, "s2.loss_bbox": 0.03034, "loss": 0.29729, "time": 0.5666}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 3e-05, "memory": 17385, "data_time": 0.00717, "loss_rpn_cls": 0.00986, "loss_rpn_bbox": 0.00859, "s0.loss_cls": 0.08196, "s0.acc": 97.22656, "s0.loss_bbox": 0.03538, "s1.loss_cls": 0.04034, "s1.acc": 97.12901, "s1.loss_bbox": 0.03881, "s2.loss_cls": 0.0201, "s2.acc": 97.13876, "s2.loss_bbox": 0.02889, "loss": 0.26392, "time": 0.54281}
{"mode": "train", "epoch": 2, "iter": 2000, "lr": 3e-05, "memory": 17385, "data_time": 0.00753, "loss_rpn_cls": 0.01165, "loss_rpn_bbox": 0.01004, "s0.loss_cls": 0.09349, "s0.acc": 96.7832, "s0.loss_bbox": 0.04313, "s1.loss_cls": 0.04493, "s1.acc": 96.8322, "s1.loss_bbox": 0.04635, "s2.loss_cls": 0.02189, "s2.acc": 96.82792, "s2.loss_bbox": 0.03178, "loss": 0.30326, "time": 0.56333}
{"mode": "train", "epoch": 2, "iter": 2050, "lr": 3e-05, "memory": 17385, "data_time": 0.00752, "loss_rpn_cls": 0.01118, "loss_rpn_bbox": 0.00966, "s0.loss_cls": 0.09534, "s0.acc": 96.71875, "s0.loss_bbox": 0.04806, "s1.loss_cls": 0.04366, "s1.acc": 96.92253, "s1.loss_bbox": 0.04818, "s2.loss_cls": 0.02169, "s2.acc": 96.76687, "s2.loss_bbox": 0.03205, "loss": 0.30982, "time": 0.54977}
{"mode": "train", "epoch": 2, "iter": 2100, "lr": 3e-05, "memory": 17385, "data_time": 0.00761, "loss_rpn_cls": 0.01346, "loss_rpn_bbox": 0.00824, "s0.loss_cls": 0.09127, "s0.acc": 96.76172, "s0.loss_bbox": 0.04309, "s1.loss_cls": 0.04681, "s1.acc": 96.83435, "s1.loss_bbox": 0.04412, "s2.loss_cls": 0.02344, "s2.acc": 96.67749, "s2.loss_bbox": 0.02972, "loss": 0.30015, "time": 0.56166}
{"mode": "train", "epoch": 2, "iter": 2150, "lr": 3e-05, "memory": 17385, "data_time": 0.00762, "loss_rpn_cls": 0.02062, "loss_rpn_bbox": 0.01027, "s0.loss_cls": 0.11584, "s0.acc": 96.24414, "s0.loss_bbox": 0.04966, "s1.loss_cls": 0.05606, "s1.acc": 96.33437, "s1.loss_bbox": 0.04732, "s2.loss_cls": 0.02754, "s2.acc": 96.47991, "s2.loss_bbox": 0.03321, "loss": 0.36052, "time": 0.55059}
{"mode": "train", "epoch": 2, "iter": 2200, "lr": 3e-05, "memory": 17385, "data_time": 0.00811, "loss_rpn_cls": 0.00843, "loss_rpn_bbox": 0.00781, "s0.loss_cls": 0.08956, "s0.acc": 96.8125, "s0.loss_bbox": 0.04432, "s1.loss_cls": 0.04341, "s1.acc": 97.05464, "s1.loss_bbox": 0.04924, "s2.loss_cls": 0.0211, "s2.acc": 97.11603, "s2.loss_bbox": 0.03705, "loss": 0.30092, "time": 0.59798}
{"mode": "train", "epoch": 2, "iter": 2250, "lr": 3e-05, "memory": 17385, "data_time": 0.00794, "loss_rpn_cls": 0.01913, "loss_rpn_bbox": 0.01341, "s0.loss_cls": 0.11144, "s0.acc": 96.25, "s0.loss_bbox": 0.05759, "s1.loss_cls": 0.05116, "s1.acc": 96.47442, "s1.loss_bbox": 0.05459, "s2.loss_cls": 0.02555, "s2.acc": 96.46717, "s2.loss_bbox": 0.03791, "loss": 0.37078, "time": 0.57085}
{"mode": "train", "epoch": 2, "iter": 2300, "lr": 3e-05, "memory": 17385, "data_time": 0.00827, "loss_rpn_cls": 0.00549, "loss_rpn_bbox": 0.00694, "s0.loss_cls": 0.07096, "s0.acc": 97.3125, "s0.loss_bbox": 0.03445, "s1.loss_cls": 0.03482, "s1.acc": 97.30306, "s1.loss_bbox": 0.03563, "s2.loss_cls": 0.01792, "s2.acc": 97.1902, "s2.loss_bbox": 0.02727, "loss": 0.23348, "time": 0.59314}
{"mode": "train", "epoch": 2, "iter": 2350, "lr": 3e-05, "memory": 17385, "data_time": 0.00735, "loss_rpn_cls": 0.01251, "loss_rpn_bbox": 0.00843, "s0.loss_cls": 0.10133, "s0.acc": 96.69922, "s0.loss_bbox": 0.04289, "s1.loss_cls": 0.05084, "s1.acc": 96.67779, "s1.loss_bbox": 0.04346, "s2.loss_cls": 0.02559, "s2.acc": 96.4638, "s2.loss_bbox": 0.03047, "loss": 0.31551, "time": 0.55417}
{"mode": "train", "epoch": 2, "iter": 2400, "lr": 3e-05, "memory": 17385, "data_time": 0.00776, "loss_rpn_cls": 0.01358, "loss_rpn_bbox": 0.01264, "s0.loss_cls": 0.10038, "s0.acc": 96.38281, "s0.loss_bbox": 0.04866, "s1.loss_cls": 0.04895, "s1.acc": 96.54804, "s1.loss_bbox": 0.05106, "s2.loss_cls": 0.02535, "s2.acc": 96.26503, "s2.loss_bbox": 0.0338, "loss": 0.33443, "time": 0.57598}
{"mode": "train", "epoch": 2, "iter": 2450, "lr": 3e-05, "memory": 17385, "data_time": 0.00751, "loss_rpn_cls": 0.01456, "loss_rpn_bbox": 0.00892, "s0.loss_cls": 0.08636, "s0.acc": 97.04492, "s0.loss_bbox": 0.04238, "s1.loss_cls": 0.04283, "s1.acc": 97.11316, "s1.loss_bbox": 0.04027, "s2.loss_cls": 0.02139, "s2.acc": 97.03161, "s2.loss_bbox": 0.02641, "loss": 0.28312, "time": 0.55751}
{"mode": "train", "epoch": 2, "iter": 2500, "lr": 3e-05, "memory": 17385, "data_time": 0.00771, "loss_rpn_cls": 0.02151, "loss_rpn_bbox": 0.01244, "s0.loss_cls": 0.10537, "s0.acc": 96.32422, "s0.loss_bbox": 0.04742, "s1.loss_cls": 0.05027, "s1.acc": 96.47059, "s1.loss_bbox": 0.04645, "s2.loss_cls": 0.02518, "s2.acc": 96.45971, "s2.loss_bbox": 0.03304, "loss": 0.34167, "time": 0.56823}
{"mode": "train", "epoch": 2, "iter": 2550, "lr": 3e-05, "memory": 17385, "data_time": 0.00744, "loss_rpn_cls": 0.01307, "loss_rpn_bbox": 0.01031, "s0.loss_cls": 0.09958, "s0.acc": 96.58789, "s0.loss_bbox": 0.04723, "s1.loss_cls": 0.04985, "s1.acc": 96.50158, "s1.loss_bbox": 0.04674, "s2.loss_cls": 0.02626, "s2.acc": 96.36458, "s2.loss_bbox": 0.02991, "loss": 0.32294, "time": 0.55969}
{"mode": "train", "epoch": 2, "iter": 2600, "lr": 3e-05, "memory": 17385, "data_time": 0.0075, "loss_rpn_cls": 0.02218, "loss_rpn_bbox": 0.01046, "s0.loss_cls": 0.10366, "s0.acc": 96.5625, "s0.loss_bbox": 0.04518, "s1.loss_cls": 0.04771, "s1.acc": 96.84732, "s1.loss_bbox": 0.04019, "s2.loss_cls": 0.02268, "s2.acc": 96.85887, "s2.loss_bbox": 0.02626, "loss": 0.31831, "time": 0.57231}
{"mode": "train", "epoch": 2, "iter": 2650, "lr": 3e-05, "memory": 17385, "data_time": 0.00772, "loss_rpn_cls": 0.01642, "loss_rpn_bbox": 0.01356, "s0.loss_cls": 0.09666, "s0.acc": 96.66992, "s0.loss_bbox": 0.05164, "s1.loss_cls": 0.04836, "s1.acc": 96.76022, "s1.loss_bbox": 0.04924, "s2.loss_cls": 0.02296, "s2.acc": 96.87905, "s2.loss_bbox": 0.03151, "loss": 0.33035, "time": 0.55975}
{"mode": "train", "epoch": 2, "iter": 2700, "lr": 3e-05, "memory": 17385, "data_time": 0.00814, "loss_rpn_cls": 0.02131, "loss_rpn_bbox": 0.0101, "s0.loss_cls": 0.09132, "s0.acc": 97.04492, "s0.loss_bbox": 0.0463, "s1.loss_cls": 0.04286, "s1.acc": 97.19108, "s1.loss_bbox": 0.04479, "s2.loss_cls": 0.02155, "s2.acc": 97.12267, "s2.loss_bbox": 0.03005, "loss": 0.30827, "time": 0.59641}
{"mode": "train", "epoch": 2, "iter": 2750, "lr": 3e-05, "memory": 17385, "data_time": 0.00824, "loss_rpn_cls": 0.00893, "loss_rpn_bbox": 0.00587, "s0.loss_cls": 0.0741, "s0.acc": 97.37891, "s0.loss_bbox": 0.03284, "s1.loss_cls": 0.03601, "s1.acc": 97.32138, "s1.loss_bbox": 0.03488, "s2.loss_cls": 0.01854, "s2.acc": 97.13348, "s2.loss_bbox": 0.02346, "loss": 0.23463, "time": 0.5773}
{"mode": "train", "epoch": 2, "iter": 2800, "lr": 3e-05, "memory": 17385, "data_time": 0.00784, "loss_rpn_cls": 0.01844, "loss_rpn_bbox": 0.01057, "s0.loss_cls": 0.09195, "s0.acc": 97.00195, "s0.loss_bbox": 0.04547, "s1.loss_cls": 0.0423, "s1.acc": 97.22047, "s1.loss_bbox": 0.04451, "s2.loss_cls": 0.02085, "s2.acc": 97.11071, "s2.loss_bbox": 0.02936, "loss": 0.30344, "time": 0.56628}
{"mode": "train", "epoch": 2, "iter": 2850, "lr": 3e-05, "memory": 17385, "data_time": 0.00743, "loss_rpn_cls": 0.01442, "loss_rpn_bbox": 0.00749, "s0.loss_cls": 0.10182, "s0.acc": 96.50977, "s0.loss_bbox": 0.04557, "s1.loss_cls": 0.05098, "s1.acc": 96.4632, "s1.loss_bbox": 0.04398, "s2.loss_cls": 0.02633, "s2.acc": 96.24743, "s2.loss_bbox": 0.031, "loss": 0.32159, "time": 0.55688}
{"mode": "train", "epoch": 2, "iter": 2900, "lr": 3e-05, "memory": 17385, "data_time": 0.00717, "loss_rpn_cls": 0.01406, "loss_rpn_bbox": 0.00814, "s0.loss_cls": 0.08095, "s0.acc": 97.25, "s0.loss_bbox": 0.03577, "s1.loss_cls": 0.03795, "s1.acc": 97.50067, "s1.loss_bbox": 0.03627, "s2.loss_cls": 0.01836, "s2.acc": 97.65236, "s2.loss_bbox": 0.02745, "loss": 0.25895, "time": 0.54346}
{"mode": "train", "epoch": 2, "iter": 2950, "lr": 3e-05, "memory": 17385, "data_time": 0.00744, "loss_rpn_cls": 0.01634, "loss_rpn_bbox": 0.01311, "s0.loss_cls": 0.08233, "s0.acc": 97.04492, "s0.loss_bbox": 0.04445, "s1.loss_cls": 0.03841, "s1.acc": 97.27035, "s1.loss_bbox": 0.04636, "s2.loss_cls": 0.01869, "s2.acc": 97.32872, "s2.loss_bbox": 0.03288, "loss": 0.29257, "time": 0.55278}
{"mode": "train", "epoch": 2, "iter": 3000, "lr": 3e-05, "memory": 17385, "data_time": 0.00742, "loss_rpn_cls": 0.02062, "loss_rpn_bbox": 0.01305, "s0.loss_cls": 0.12677, "s0.acc": 95.69141, "s0.loss_bbox": 0.05695, "s1.loss_cls": 0.06009, "s1.acc": 95.92182, "s1.loss_bbox": 0.05889, "s2.loss_cls": 0.03061, "s2.acc": 95.69371, "s2.loss_bbox": 0.04031, "loss": 0.40729, "time": 0.5455}
{"mode": "train", "epoch": 2, "iter": 3050, "lr": 3e-05, "memory": 17385, "data_time": 0.00751, "loss_rpn_cls": 0.02083, "loss_rpn_bbox": 0.01037, "s0.loss_cls": 0.09533, "s0.acc": 96.59766, "s0.loss_bbox": 0.04483, "s1.loss_cls": 0.04388, "s1.acc": 96.92379, "s1.loss_bbox": 0.04635, "s2.loss_cls": 0.02146, "s2.acc": 96.9899, "s2.loss_bbox": 0.03256, "loss": 0.31561, "time": 0.55557}
{"mode": "train", "epoch": 2, "iter": 3100, "lr": 3e-05, "memory": 17385, "data_time": 0.00753, "loss_rpn_cls": 0.01721, "loss_rpn_bbox": 0.01189, "s0.loss_cls": 0.09839, "s0.acc": 96.6875, "s0.loss_bbox": 0.05037, "s1.loss_cls": 0.04457, "s1.acc": 97.06109, "s1.loss_bbox": 0.0454, "s2.loss_cls": 0.0216, "s2.acc": 97.0922, "s2.loss_bbox": 0.02903, "loss": 0.31847, "time": 0.56117}
{"mode": "train", "epoch": 2, "iter": 3150, "lr": 3e-05, "memory": 17385, "data_time": 0.00843, "loss_rpn_cls": 0.01646, "loss_rpn_bbox": 0.00881, "s0.loss_cls": 0.08978, "s0.acc": 96.92969, "s0.loss_bbox": 0.03496, "s1.loss_cls": 0.0453, "s1.acc": 96.97882, "s1.loss_bbox": 0.03312, "s2.loss_cls": 0.02278, "s2.acc": 97.03923, "s2.loss_bbox": 0.02372, "loss": 0.27493, "time": 0.59066}
{"mode": "train", "epoch": 2, "iter": 3200, "lr": 3e-05, "memory": 17385, "data_time": 0.00776, "loss_rpn_cls": 0.01225, "loss_rpn_bbox": 0.00702, "s0.loss_cls": 0.10086, "s0.acc": 96.79492, "s0.loss_bbox": 0.04531, "s1.loss_cls": 0.04742, "s1.acc": 97.01995, "s1.loss_bbox": 0.03985, "s2.loss_cls": 0.02262, "s2.acc": 96.81557, "s2.loss_bbox": 0.02545, "loss": 0.30078, "time": 0.55526}
{"mode": "train", "epoch": 2, "iter": 3250, "lr": 3e-05, "memory": 17385, "data_time": 0.00789, "loss_rpn_cls": 0.01419, "loss_rpn_bbox": 0.00845, "s0.loss_cls": 0.09451, "s0.acc": 96.87891, "s0.loss_bbox": 0.03978, "s1.loss_cls": 0.04729, "s1.acc": 96.89158, "s1.loss_bbox": 0.03966, "s2.loss_cls": 0.02371, "s2.acc": 97.00143, "s2.loss_bbox": 0.02646, "loss": 0.29403, "time": 0.57018}
{"mode": "train", "epoch": 2, "iter": 3300, "lr": 3e-05, "memory": 17385, "data_time": 0.00789, "loss_rpn_cls": 0.01296, "loss_rpn_bbox": 0.00708, "s0.loss_cls": 0.08824, "s0.acc": 96.95508, "s0.loss_bbox": 0.04189, "s1.loss_cls": 0.04284, "s1.acc": 97.04326, "s1.loss_bbox": 0.04116, "s2.loss_cls": 0.02193, "s2.acc": 96.89867, "s2.loss_bbox": 0.02738, "loss": 0.28349, "time": 0.57324}
{"mode": "train", "epoch": 2, "iter": 3350, "lr": 3e-05, "memory": 17385, "data_time": 0.00788, "loss_rpn_cls": 0.01464, "loss_rpn_bbox": 0.01196, "s0.loss_cls": 0.10544, "s0.acc": 96.54297, "s0.loss_bbox": 0.04862, "s1.loss_cls": 0.05121, "s1.acc": 96.60961, "s1.loss_bbox": 0.04756, "s2.loss_cls": 0.02545, "s2.acc": 96.79089, "s2.loss_bbox": 0.0301, "loss": 0.33498, "time": 0.5757}
{"mode": "train", "epoch": 2, "iter": 3400, "lr": 3e-05, "memory": 17385, "data_time": 0.00778, "loss_rpn_cls": 0.01485, "loss_rpn_bbox": 0.01237, "s0.loss_cls": 0.09318, "s0.acc": 96.79297, "s0.loss_bbox": 0.0442, "s1.loss_cls": 0.04452, "s1.acc": 96.85346, "s1.loss_bbox": 0.04734, "s2.loss_cls": 0.02199, "s2.acc": 96.74836, "s2.loss_bbox": 0.03402, "loss": 0.31248, "time": 0.58195}
{"mode": "train", "epoch": 2, "iter": 3450, "lr": 3e-05, "memory": 17385, "data_time": 0.00766, "loss_rpn_cls": 0.00952, "loss_rpn_bbox": 0.0081, "s0.loss_cls": 0.08637, "s0.acc": 96.93945, "s0.loss_bbox": 0.04291, "s1.loss_cls": 0.04097, "s1.acc": 96.97048, "s1.loss_bbox": 0.04378, "s2.loss_cls": 0.02059, "s2.acc": 97.02942, "s2.loss_bbox": 0.02933, "loss": 0.28158, "time": 0.57494}
{"mode": "train", "epoch": 2, "iter": 3500, "lr": 3e-05, "memory": 17385, "data_time": 0.00753, "loss_rpn_cls": 0.01895, "loss_rpn_bbox": 0.00858, "s0.loss_cls": 0.10882, "s0.acc": 96.30469, "s0.loss_bbox": 0.04789, "s1.loss_cls": 0.05352, "s1.acc": 96.39879, "s1.loss_bbox": 0.04705, "s2.loss_cls": 0.0261, "s2.acc": 96.50496, "s2.loss_bbox": 0.034, "loss": 0.34491, "time": 0.55927}
{"mode": "train", "epoch": 2, "iter": 3550, "lr": 3e-05, "memory": 17385, "data_time": 0.00751, "loss_rpn_cls": 0.01573, "loss_rpn_bbox": 0.01202, "s0.loss_cls": 0.11699, "s0.acc": 95.99219, "s0.loss_bbox": 0.06156, "s1.loss_cls": 0.05662, "s1.acc": 96.13674, "s1.loss_bbox": 0.05839, "s2.loss_cls": 0.02842, "s2.acc": 96.04487, "s2.loss_bbox": 0.03445, "loss": 0.38419, "time": 0.56094}
{"mode": "train", "epoch": 2, "iter": 3600, "lr": 3e-05, "memory": 17385, "data_time": 0.00763, "loss_rpn_cls": 0.01532, "loss_rpn_bbox": 0.01344, "s0.loss_cls": 0.10503, "s0.acc": 96.32617, "s0.loss_bbox": 0.05133, "s1.loss_cls": 0.04844, "s1.acc": 96.68267, "s1.loss_bbox": 0.05354, "s2.loss_cls": 0.02292, "s2.acc": 96.7938, "s2.loss_bbox": 0.03578, "loss": 0.34581, "time": 0.56233}
{"mode": "train", "epoch": 2, "iter": 3650, "lr": 3e-05, "memory": 17385, "data_time": 0.00777, "loss_rpn_cls": 0.01728, "loss_rpn_bbox": 0.00954, "s0.loss_cls": 0.08771, "s0.acc": 97.03906, "s0.loss_bbox": 0.04125, "s1.loss_cls": 0.04157, "s1.acc": 97.13413, "s1.loss_bbox": 0.04061, "s2.loss_cls": 0.02053, "s2.acc": 97.16268, "s2.loss_bbox": 0.02704, "loss": 0.28554, "time": 0.56796}
{"mode": "train", "epoch": 2, "iter": 3700, "lr": 3e-05, "memory": 17385, "data_time": 0.00864, "loss_rpn_cls": 0.0151, "loss_rpn_bbox": 0.01052, "s0.loss_cls": 0.09379, "s0.acc": 96.70312, "s0.loss_bbox": 0.03834, "s1.loss_cls": 0.04808, "s1.acc": 96.61983, "s1.loss_bbox": 0.04078, "s2.loss_cls": 0.02535, "s2.acc": 96.6, "s2.loss_bbox": 0.03018, "loss": 0.30213, "time": 0.59358}
{"mode": "train", "epoch": 2, "iter": 3750, "lr": 3e-05, "memory": 17385, "data_time": 0.0079, "loss_rpn_cls": 0.0161, "loss_rpn_bbox": 0.00615, "s0.loss_cls": 0.08006, "s0.acc": 97.29492, "s0.loss_bbox": 0.03154, "s1.loss_cls": 0.03912, "s1.acc": 97.30055, "s1.loss_bbox": 0.03391, "s2.loss_cls": 0.02023, "s2.acc": 97.29687, "s2.loss_bbox": 0.02519, "loss": 0.25231, "time": 0.56633}
{"mode": "train", "epoch": 2, "iter": 3800, "lr": 3e-05, "memory": 17385, "data_time": 0.00766, "loss_rpn_cls": 0.01569, "loss_rpn_bbox": 0.01156, "s0.loss_cls": 0.11186, "s0.acc": 96.08398, "s0.loss_bbox": 0.05424, "s1.loss_cls": 0.05448, "s1.acc": 96.08956, "s1.loss_bbox": 0.05268, "s2.loss_cls": 0.0278, "s2.acc": 95.89661, "s2.loss_bbox": 0.0368, "loss": 0.36512, "time": 0.57176}
{"mode": "val", "epoch": 2, "iter": 976, "lr": 3e-05, "bbox_mAP": 0.608, "bbox_mAP_50": 0.785, "bbox_mAP_75": 0.651, "bbox_mAP_s": 0.04, "bbox_mAP_m": 0.234, "bbox_mAP_l": 0.687, "bbox_mAP_copypaste": "0.608 0.785 0.651 0.040 0.234 0.687"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 3e-05, "memory": 17385, "data_time": 0.05289, "loss_rpn_cls": 0.01392, "loss_rpn_bbox": 0.0092, "s0.loss_cls": 0.08186, "s0.acc": 97.12109, "s0.loss_bbox": 0.0369, "s1.loss_cls": 0.03936, "s1.acc": 97.16649, "s1.loss_bbox": 0.03834, "s2.loss_cls": 0.02, "s2.acc": 97.09391, "s2.loss_bbox": 0.02691, "loss": 0.26649, "time": 0.60655}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 3e-05, "memory": 17385, "data_time": 0.00784, "loss_rpn_cls": 0.01824, "loss_rpn_bbox": 0.01574, "s0.loss_cls": 0.11585, "s0.acc": 95.9668, "s0.loss_bbox": 0.0526, "s1.loss_cls": 0.05254, "s1.acc": 96.37244, "s1.loss_bbox": 0.05122, "s2.loss_cls": 0.02581, "s2.acc": 96.53645, "s2.loss_bbox": 0.03606, "loss": 0.36807, "time": 0.58936}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 3e-05, "memory": 17385, "data_time": 0.00796, "loss_rpn_cls": 0.01439, "loss_rpn_bbox": 0.00687, "s0.loss_cls": 0.07754, "s0.acc": 97.26953, "s0.loss_bbox": 0.03614, "s1.loss_cls": 0.03841, "s1.acc": 97.4476, "s1.loss_bbox": 0.03953, "s2.loss_cls": 0.02038, "s2.acc": 97.2163, "s2.loss_bbox": 0.02869, "loss": 0.26195, "time": 0.57444}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 3e-05, "memory": 17385, "data_time": 0.00775, "loss_rpn_cls": 0.01693, "loss_rpn_bbox": 0.01126, "s0.loss_cls": 0.09897, "s0.acc": 96.66602, "s0.loss_bbox": 0.05444, "s1.loss_cls": 0.04565, "s1.acc": 96.89257, "s1.loss_bbox": 0.05041, "s2.loss_cls": 0.02122, "s2.acc": 97.08538, "s2.loss_bbox": 0.0297, "loss": 0.32858, "time": 0.55707}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 3e-05, "memory": 17385, "data_time": 0.00739, "loss_rpn_cls": 0.0159, "loss_rpn_bbox": 0.00888, "s0.loss_cls": 0.09007, "s0.acc": 96.91016, "s0.loss_bbox": 0.0425, "s1.loss_cls": 0.04524, "s1.acc": 96.96207, "s1.loss_bbox": 0.04446, "s2.loss_cls": 0.02285, "s2.acc": 96.91566, "s2.loss_bbox": 0.03038, "loss": 0.30029, "time": 0.55452}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 3e-05, "memory": 17385, "data_time": 0.00732, "loss_rpn_cls": 0.01666, "loss_rpn_bbox": 0.01211, "s0.loss_cls": 0.09303, "s0.acc": 96.72461, "s0.loss_bbox": 0.05128, "s1.loss_cls": 0.04407, "s1.acc": 97.05392, "s1.loss_bbox": 0.04986, "s2.loss_cls": 0.02116, "s2.acc": 97.19104, "s2.loss_bbox": 0.0316, "loss": 0.31978, "time": 0.54923}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 3e-05, "memory": 17385, "data_time": 0.00728, "loss_rpn_cls": 0.01064, "loss_rpn_bbox": 0.01048, "s0.loss_cls": 0.07598, "s0.acc": 97.41602, "s0.loss_bbox": 0.03566, "s1.loss_cls": 0.03867, "s1.acc": 97.50111, "s1.loss_bbox": 0.03754, "s2.loss_cls": 0.01971, "s2.acc": 97.39227, "s2.loss_bbox": 0.02565, "loss": 0.25433, "time": 0.54451}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 3e-05, "memory": 17385, "data_time": 0.00721, "loss_rpn_cls": 0.01397, "loss_rpn_bbox": 0.01305, "s0.loss_cls": 0.09528, "s0.acc": 96.7168, "s0.loss_bbox": 0.05362, "s1.loss_cls": 0.04609, "s1.acc": 96.87308, "s1.loss_bbox": 0.04966, "s2.loss_cls": 0.02251, "s2.acc": 96.74469, "s2.loss_bbox": 0.03391, "loss": 0.32808, "time": 0.55612}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 3e-05, "memory": 17385, "data_time": 0.00744, "loss_rpn_cls": 0.0152, "loss_rpn_bbox": 0.00891, "s0.loss_cls": 0.09146, "s0.acc": 96.7168, "s0.loss_bbox": 0.04062, "s1.loss_cls": 0.0479, "s1.acc": 96.47121, "s1.loss_bbox": 0.04177, "s2.loss_cls": 0.02427, "s2.acc": 96.34907, "s2.loss_bbox": 0.02842, "loss": 0.29855, "time": 0.55952}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 3e-05, "memory": 17385, "data_time": 0.00746, "loss_rpn_cls": 0.00798, "loss_rpn_bbox": 0.00535, "s0.loss_cls": 0.05815, "s0.acc": 97.88867, "s0.loss_bbox": 0.02664, "s1.loss_cls": 0.03102, "s1.acc": 97.71711, "s1.loss_bbox": 0.03124, "s2.loss_cls": 0.01738, "s2.acc": 97.46572, "s2.loss_bbox": 0.02364, "loss": 0.2014, "time": 0.55675}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 3e-05, "memory": 17385, "data_time": 0.00763, "loss_rpn_cls": 0.01552, "loss_rpn_bbox": 0.01587, "s0.loss_cls": 0.11055, "s0.acc": 96.19141, "s0.loss_bbox": 0.05744, "s1.loss_cls": 0.0556, "s1.acc": 96.19236, "s1.loss_bbox": 0.05645, "s2.loss_cls": 0.02692, "s2.acc": 96.31622, "s2.loss_bbox": 0.0341, "loss": 0.37244, "time": 0.57435}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 3e-05, "memory": 17385, "data_time": 0.00757, "loss_rpn_cls": 0.01254, "loss_rpn_bbox": 0.00883, "s0.loss_cls": 0.08182, "s0.acc": 97.04883, "s0.loss_bbox": 0.03954, "s1.loss_cls": 0.04038, "s1.acc": 97.07641, "s1.loss_bbox": 0.0415, "s2.loss_cls": 0.02063, "s2.acc": 96.94887, "s2.loss_bbox": 0.03006, "loss": 0.27532, "time": 0.56487}
{"mode": "train", "epoch": 3, "iter": 650, "lr": 3e-05, "memory": 17385, "data_time": 0.00764, "loss_rpn_cls": 0.01602, "loss_rpn_bbox": 0.0076, "s0.loss_cls": 0.06977, "s0.acc": 97.76172, "s0.loss_bbox": 0.02999, "s1.loss_cls": 0.03307, "s1.acc": 97.92043, "s1.loss_bbox": 0.03256, "s2.loss_cls": 0.01616, "s2.acc": 97.79694, "s2.loss_bbox": 0.02399, "loss": 0.22916, "time": 0.5669}
{"mode": "train", "epoch": 3, "iter": 700, "lr": 3e-05, "memory": 17385, "data_time": 0.00764, "loss_rpn_cls": 0.00959, "loss_rpn_bbox": 0.01138, "s0.loss_cls": 0.0785, "s0.acc": 97.32031, "s0.loss_bbox": 0.03496, "s1.loss_cls": 0.03816, "s1.acc": 97.42005, "s1.loss_bbox": 0.03376, "s2.loss_cls": 0.01874, "s2.acc": 97.39386, "s2.loss_bbox": 0.02306, "loss": 0.24815, "time": 0.57651}
{"mode": "train", "epoch": 3, "iter": 750, "lr": 3e-05, "memory": 17385, "data_time": 0.00798, "loss_rpn_cls": 0.02008, "loss_rpn_bbox": 0.01019, "s0.loss_cls": 0.09552, "s0.acc": 96.82812, "s0.loss_bbox": 0.0411, "s1.loss_cls": 0.04528, "s1.acc": 96.88704, "s1.loss_bbox": 0.04091, "s2.loss_cls": 0.02293, "s2.acc": 96.56348, "s2.loss_bbox": 0.02828, "loss": 0.3043, "time": 0.56488}
{"mode": "train", "epoch": 3, "iter": 800, "lr": 3e-05, "memory": 17385, "data_time": 0.00789, "loss_rpn_cls": 0.013, "loss_rpn_bbox": 0.01461, "s0.loss_cls": 0.10708, "s0.acc": 96.15039, "s0.loss_bbox": 0.05297, "s1.loss_cls": 0.05057, "s1.acc": 96.28538, "s1.loss_bbox": 0.05714, "s2.loss_cls": 0.02571, "s2.acc": 96.15075, "s2.loss_bbox": 0.03814, "loss": 0.35922, "time": 0.57355}
{"mode": "train", "epoch": 3, "iter": 850, "lr": 3e-05, "memory": 17385, "data_time": 0.00776, "loss_rpn_cls": 0.01115, "loss_rpn_bbox": 0.0092, "s0.loss_cls": 0.09046, "s0.acc": 96.99023, "s0.loss_bbox": 0.04298, "s1.loss_cls": 0.04123, "s1.acc": 97.31809, "s1.loss_bbox": 0.04586, "s2.loss_cls": 0.02011, "s2.acc": 97.23607, "s2.loss_bbox": 0.03078, "loss": 0.29176, "time": 0.57684}
{"mode": "train", "epoch": 3, "iter": 900, "lr": 3e-05, "memory": 17385, "data_time": 0.00773, "loss_rpn_cls": 0.01284, "loss_rpn_bbox": 0.01099, "s0.loss_cls": 0.09972, "s0.acc": 96.59375, "s0.loss_bbox": 0.05306, "s1.loss_cls": 0.04851, "s1.acc": 96.55054, "s1.loss_bbox": 0.05087, "s2.loss_cls": 0.02527, "s2.acc": 96.3721, "s2.loss_bbox": 0.03123, "loss": 0.33249, "time": 0.55624}
{"mode": "train", "epoch": 3, "iter": 950, "lr": 3e-05, "memory": 17385, "data_time": 0.00729, "loss_rpn_cls": 0.01636, "loss_rpn_bbox": 0.00939, "s0.loss_cls": 0.08457, "s0.acc": 97.15039, "s0.loss_bbox": 0.04008, "s1.loss_cls": 0.04027, "s1.acc": 97.43318, "s1.loss_bbox": 0.03809, "s2.loss_cls": 0.01967, "s2.acc": 97.49229, "s2.loss_bbox": 0.02641, "loss": 0.27483, "time": 0.53926}
{"mode": "train", "epoch": 3, "iter": 1000, "lr": 3e-05, "memory": 17385, "data_time": 0.00783, "loss_rpn_cls": 0.01379, "loss_rpn_bbox": 0.00888, "s0.loss_cls": 0.08411, "s0.acc": 96.96875, "s0.loss_bbox": 0.04401, "s1.loss_cls": 0.03969, "s1.acc": 97.13627, "s1.loss_bbox": 0.04564, "s2.loss_cls": 0.02047, "s2.acc": 96.9774, "s2.loss_bbox": 0.03184, "loss": 0.28846, "time": 0.58097}
{"mode": "train", "epoch": 3, "iter": 1050, "lr": 3e-05, "memory": 17385, "data_time": 0.00772, "loss_rpn_cls": 0.00878, "loss_rpn_bbox": 0.00802, "s0.loss_cls": 0.08121, "s0.acc": 97.22656, "s0.loss_bbox": 0.04418, "s1.loss_cls": 0.03531, "s1.acc": 97.42656, "s1.loss_bbox": 0.0413, "s2.loss_cls": 0.01691, "s2.acc": 97.56363, "s2.loss_bbox": 0.02546, "loss": 0.26117, "time": 0.58806}
{"mode": "train", "epoch": 3, "iter": 1100, "lr": 3e-05, "memory": 17385, "data_time": 0.00752, "loss_rpn_cls": 0.01503, "loss_rpn_bbox": 0.00995, "s0.loss_cls": 0.08875, "s0.acc": 96.92383, "s0.loss_bbox": 0.04484, "s1.loss_cls": 0.04121, "s1.acc": 97.10237, "s1.loss_bbox": 0.04277, "s2.loss_cls": 0.02096, "s2.acc": 96.95304, "s2.loss_bbox": 0.02812, "loss": 0.29161, "time": 0.56614}
{"mode": "train", "epoch": 3, "iter": 1150, "lr": 3e-05, "memory": 17385, "data_time": 0.00747, "loss_rpn_cls": 0.01372, "loss_rpn_bbox": 0.01094, "s0.loss_cls": 0.10028, "s0.acc": 96.31836, "s0.loss_bbox": 0.05004, "s1.loss_cls": 0.04562, "s1.acc": 96.67395, "s1.loss_bbox": 0.0516, "s2.loss_cls": 0.02441, "s2.acc": 96.45964, "s2.loss_bbox": 0.03553, "loss": 0.33214, "time": 0.58234}
{"mode": "train", "epoch": 3, "iter": 1200, "lr": 3e-05, "memory": 17385, "data_time": 0.00807, "loss_rpn_cls": 0.0275, "loss_rpn_bbox": 0.01792, "s0.loss_cls": 0.11179, "s0.acc": 96.02734, "s0.loss_bbox": 0.05575, "s1.loss_cls": 0.05297, "s1.acc": 96.38246, "s1.loss_bbox": 0.05587, "s2.loss_cls": 0.02609, "s2.acc": 96.36974, "s2.loss_bbox": 0.03801, "loss": 0.3859, "time": 0.60274}
{"mode": "train", "epoch": 3, "iter": 1250, "lr": 3e-05, "memory": 17385, "data_time": 0.00789, "loss_rpn_cls": 0.01494, "loss_rpn_bbox": 0.00817, "s0.loss_cls": 0.07823, "s0.acc": 97.36914, "s0.loss_bbox": 0.03429, "s1.loss_cls": 0.0382, "s1.acc": 97.41906, "s1.loss_bbox": 0.03451, "s2.loss_cls": 0.01951, "s2.acc": 97.28815, "s2.loss_bbox": 0.02496, "loss": 0.25282, "time": 0.55777}
{"mode": "train", "epoch": 3, "iter": 1300, "lr": 3e-05, "memory": 17385, "data_time": 0.00777, "loss_rpn_cls": 0.02715, "loss_rpn_bbox": 0.01546, "s0.loss_cls": 0.11775, "s0.acc": 96.08594, "s0.loss_bbox": 0.05387, "s1.loss_cls": 0.05799, "s1.acc": 96.19057, "s1.loss_bbox": 0.05101, "s2.loss_cls": 0.02863, "s2.acc": 96.31221, "s2.loss_bbox": 0.03237, "loss": 0.38422, "time": 0.57295}
{"mode": "train", "epoch": 3, "iter": 1350, "lr": 3e-05, "memory": 17385, "data_time": 0.00759, "loss_rpn_cls": 0.01623, "loss_rpn_bbox": 0.01104, "s0.loss_cls": 0.10631, "s0.acc": 96.39648, "s0.loss_bbox": 0.0426, "s1.loss_cls": 0.0523, "s1.acc": 96.32896, "s1.loss_bbox": 0.04285, "s2.loss_cls": 0.02633, "s2.acc": 96.31899, "s2.loss_bbox": 0.02839, "loss": 0.32605, "time": 0.55516}
{"mode": "train", "epoch": 3, "iter": 1400, "lr": 3e-05, "memory": 17385, "data_time": 0.00762, "loss_rpn_cls": 0.01386, "loss_rpn_bbox": 0.01386, "s0.loss_cls": 0.08399, "s0.acc": 97.07422, "s0.loss_bbox": 0.04265, "s1.loss_cls": 0.03978, "s1.acc": 97.25612, "s1.loss_bbox": 0.04143, "s2.loss_cls": 0.01957, "s2.acc": 97.33683, "s2.loss_bbox": 0.0268, "loss": 0.28195, "time": 0.57421}
{"mode": "train", "epoch": 3, "iter": 1450, "lr": 3e-05, "memory": 17385, "data_time": 0.00739, "loss_rpn_cls": 0.0164, "loss_rpn_bbox": 0.01147, "s0.loss_cls": 0.10563, "s0.acc": 96.48633, "s0.loss_bbox": 0.04433, "s1.loss_cls": 0.05178, "s1.acc": 96.5277, "s1.loss_bbox": 0.04459, "s2.loss_cls": 0.02444, "s2.acc": 96.58284, "s2.loss_bbox": 0.03163, "loss": 0.33028, "time": 0.55855}
{"mode": "train", "epoch": 3, "iter": 1500, "lr": 3e-05, "memory": 17385, "data_time": 0.00719, "loss_rpn_cls": 0.02107, "loss_rpn_bbox": 0.01326, "s0.loss_cls": 0.11837, "s0.acc": 95.92773, "s0.loss_bbox": 0.0551, "s1.loss_cls": 0.0574, "s1.acc": 96.15247, "s1.loss_bbox": 0.05428, "s2.loss_cls": 0.02816, "s2.acc": 96.10797, "s2.loss_bbox": 0.03351, "loss": 0.38116, "time": 0.53846}
{"mode": "train", "epoch": 3, "iter": 1550, "lr": 3e-05, "memory": 17385, "data_time": 0.00757, "loss_rpn_cls": 0.01719, "loss_rpn_bbox": 0.01025, "s0.loss_cls": 0.09686, "s0.acc": 96.68359, "s0.loss_bbox": 0.04525, "s1.loss_cls": 0.04619, "s1.acc": 96.87581, "s1.loss_bbox": 0.04625, "s2.loss_cls": 0.02201, "s2.acc": 96.8651, "s2.loss_bbox": 0.02956, "loss": 0.31357, "time": 0.54616}
{"mode": "train", "epoch": 3, "iter": 1600, "lr": 3e-05, "memory": 17385, "data_time": 0.00742, "loss_rpn_cls": 0.01031, "loss_rpn_bbox": 0.00753, "s0.loss_cls": 0.07621, "s0.acc": 97.25586, "s0.loss_bbox": 0.0379, "s1.loss_cls": 0.03696, "s1.acc": 97.33371, "s1.loss_bbox": 0.04265, "s2.loss_cls": 0.01827, "s2.acc": 97.24759, "s2.loss_bbox": 0.03086, "loss": 0.26068, "time": 0.5525}
{"mode": "train", "epoch": 3, "iter": 1650, "lr": 3e-05, "memory": 17385, "data_time": 0.00761, "loss_rpn_cls": 0.01625, "loss_rpn_bbox": 0.0141, "s0.loss_cls": 0.09803, "s0.acc": 96.43555, "s0.loss_bbox": 0.0557, "s1.loss_cls": 0.04388, "s1.acc": 96.93599, "s1.loss_bbox": 0.05254, "s2.loss_cls": 0.02164, "s2.acc": 96.91371, "s2.loss_bbox": 0.03572, "loss": 0.33786, "time": 0.55632}
{"mode": "train", "epoch": 3, "iter": 1700, "lr": 3e-05, "memory": 17385, "data_time": 0.00765, "loss_rpn_cls": 0.0094, "loss_rpn_bbox": 0.00803, "s0.loss_cls": 0.07179, "s0.acc": 97.42188, "s0.loss_bbox": 0.03585, "s1.loss_cls": 0.03557, "s1.acc": 97.45401, "s1.loss_bbox": 0.03733, "s2.loss_cls": 0.01741, "s2.acc": 97.59133, "s2.loss_bbox": 0.02779, "loss": 0.24317, "time": 0.57425}
{"mode": "train", "epoch": 3, "iter": 1750, "lr": 3e-05, "memory": 17385, "data_time": 0.00772, "loss_rpn_cls": 0.01776, "loss_rpn_bbox": 0.01556, "s0.loss_cls": 0.09912, "s0.acc": 96.47266, "s0.loss_bbox": 0.05346, "s1.loss_cls": 0.04619, "s1.acc": 96.79439, "s1.loss_bbox": 0.05176, "s2.loss_cls": 0.02222, "s2.acc": 96.92781, "s2.loss_bbox": 0.03183, "loss": 0.33789, "time": 0.5766}
{"mode": "train", "epoch": 3, "iter": 1800, "lr": 3e-05, "memory": 17385, "data_time": 0.00745, "loss_rpn_cls": 0.01541, "loss_rpn_bbox": 0.00984, "s0.loss_cls": 0.09411, "s0.acc": 96.71094, "s0.loss_bbox": 0.04904, "s1.loss_cls": 0.04508, "s1.acc": 97.01995, "s1.loss_bbox": 0.04982, "s2.loss_cls": 0.02107, "s2.acc": 97.14955, "s2.loss_bbox": 0.0331, "loss": 0.31748, "time": 0.55026}
{"mode": "train", "epoch": 3, "iter": 1850, "lr": 3e-05, "memory": 17385, "data_time": 0.00799, "loss_rpn_cls": 0.019, "loss_rpn_bbox": 0.01259, "s0.loss_cls": 0.10374, "s0.acc": 96.49219, "s0.loss_bbox": 0.05608, "s1.loss_cls": 0.04955, "s1.acc": 96.56976, "s1.loss_bbox": 0.0532, "s2.loss_cls": 0.02521, "s2.acc": 96.49473, "s2.loss_bbox": 0.03618, "loss": 0.35556, "time": 0.57467}
{"mode": "train", "epoch": 3, "iter": 1900, "lr": 3e-05, "memory": 17385, "data_time": 0.00787, "loss_rpn_cls": 0.01851, "loss_rpn_bbox": 0.01267, "s0.loss_cls": 0.10369, "s0.acc": 96.54492, "s0.loss_bbox": 0.0477, "s1.loss_cls": 0.04903, "s1.acc": 96.69686, "s1.loss_bbox": 0.04491, "s2.loss_cls": 0.02277, "s2.acc": 96.98816, "s2.loss_bbox": 0.02906, "loss": 0.32835, "time": 0.56318}
{"mode": "train", "epoch": 3, "iter": 1950, "lr": 3e-05, "memory": 17385, "data_time": 0.00748, "loss_rpn_cls": 0.01728, "loss_rpn_bbox": 0.01182, "s0.loss_cls": 0.10076, "s0.acc": 96.59375, "s0.loss_bbox": 0.04544, "s1.loss_cls": 0.0511, "s1.acc": 96.53853, "s1.loss_bbox": 0.04614, "s2.loss_cls": 0.02522, "s2.acc": 96.65598, "s2.loss_bbox": 0.03111, "loss": 0.32888, "time": 0.54989}
{"mode": "train", "epoch": 3, "iter": 2000, "lr": 3e-05, "memory": 17385, "data_time": 0.00773, "loss_rpn_cls": 0.01345, "loss_rpn_bbox": 0.00985, "s0.loss_cls": 0.09114, "s0.acc": 96.77734, "s0.loss_bbox": 0.04095, "s1.loss_cls": 0.04337, "s1.acc": 96.86597, "s1.loss_bbox": 0.04154, "s2.loss_cls": 0.02213, "s2.acc": 96.95316, "s2.loss_bbox": 0.02827, "loss": 0.29071, "time": 0.58546}
{"mode": "train", "epoch": 3, "iter": 2050, "lr": 3e-05, "memory": 17385, "data_time": 0.00778, "loss_rpn_cls": 0.01735, "loss_rpn_bbox": 0.00981, "s0.loss_cls": 0.08805, "s0.acc": 96.95898, "s0.loss_bbox": 0.04195, "s1.loss_cls": 0.04134, "s1.acc": 96.98337, "s1.loss_bbox": 0.04188, "s2.loss_cls": 0.01997, "s2.acc": 97.10438, "s2.loss_bbox": 0.02943, "loss": 0.28979, "time": 0.57704}
{"mode": "train", "epoch": 3, "iter": 2100, "lr": 3e-05, "memory": 17385, "data_time": 0.00752, "loss_rpn_cls": 0.01616, "loss_rpn_bbox": 0.00982, "s0.loss_cls": 0.07724, "s0.acc": 97.38672, "s0.loss_bbox": 0.03599, "s1.loss_cls": 0.03342, "s1.acc": 97.74954, "s1.loss_bbox": 0.03722, "s2.loss_cls": 0.01629, "s2.acc": 97.84161, "s2.loss_bbox": 0.02568, "loss": 0.25182, "time": 0.56099}
{"mode": "train", "epoch": 3, "iter": 2150, "lr": 3e-05, "memory": 17385, "data_time": 0.00765, "loss_rpn_cls": 0.01744, "loss_rpn_bbox": 0.00933, "s0.loss_cls": 0.09317, "s0.acc": 96.83984, "s0.loss_bbox": 0.03956, "s1.loss_cls": 0.0451, "s1.acc": 96.86481, "s1.loss_bbox": 0.03894, "s2.loss_cls": 0.02256, "s2.acc": 96.90339, "s2.loss_bbox": 0.02694, "loss": 0.29305, "time": 0.55029}
{"mode": "train", "epoch": 3, "iter": 2200, "lr": 3e-05, "memory": 17385, "data_time": 0.00793, "loss_rpn_cls": 0.01504, "loss_rpn_bbox": 0.0096, "s0.loss_cls": 0.10355, "s0.acc": 96.45508, "s0.loss_bbox": 0.04889, "s1.loss_cls": 0.0517, "s1.acc": 96.739, "s1.loss_bbox": 0.04862, "s2.loss_cls": 0.02568, "s2.acc": 96.82413, "s2.loss_bbox": 0.03053, "loss": 0.33361, "time": 0.57505}
{"mode": "train", "epoch": 3, "iter": 2250, "lr": 3e-05, "memory": 17385, "data_time": 0.00759, "loss_rpn_cls": 0.01583, "loss_rpn_bbox": 0.01152, "s0.loss_cls": 0.10037, "s0.acc": 96.61523, "s0.loss_bbox": 0.04513, "s1.loss_cls": 0.04711, "s1.acc": 96.82744, "s1.loss_bbox": 0.04671, "s2.loss_cls": 0.02362, "s2.acc": 96.70339, "s2.loss_bbox": 0.0309, "loss": 0.3212, "time": 0.56786}
{"mode": "train", "epoch": 3, "iter": 2300, "lr": 3e-05, "memory": 17385, "data_time": 0.00823, "loss_rpn_cls": 0.01054, "loss_rpn_bbox": 0.00984, "s0.loss_cls": 0.08172, "s0.acc": 97.08008, "s0.loss_bbox": 0.04382, "s1.loss_cls": 0.03947, "s1.acc": 97.27689, "s1.loss_bbox": 0.04539, "s2.loss_cls": 0.01924, "s2.acc": 97.29022, "s2.loss_bbox": 0.0307, "loss": 0.2807, "time": 0.58298}
{"mode": "train", "epoch": 3, "iter": 2350, "lr": 3e-05, "memory": 17385, "data_time": 0.00858, "loss_rpn_cls": 0.01317, "loss_rpn_bbox": 0.00696, "s0.loss_cls": 0.08865, "s0.acc": 97.12109, "s0.loss_bbox": 0.03359, "s1.loss_cls": 0.04517, "s1.acc": 97.0766, "s1.loss_bbox": 0.0338, "s2.loss_cls": 0.02251, "s2.acc": 97.14101, "s2.loss_bbox": 0.02323, "loss": 0.26706, "time": 0.58233}
{"mode": "train", "epoch": 3, "iter": 2400, "lr": 3e-05, "memory": 17385, "data_time": 0.00856, "loss_rpn_cls": 0.01436, "loss_rpn_bbox": 0.00938, "s0.loss_cls": 0.10331, "s0.acc": 96.41016, "s0.loss_bbox": 0.0491, "s1.loss_cls": 0.04825, "s1.acc": 96.64313, "s1.loss_bbox": 0.05053, "s2.loss_cls": 0.02404, "s2.acc": 96.78458, "s2.loss_bbox": 0.03592, "loss": 0.33489, "time": 0.5859}
{"mode": "train", "epoch": 3, "iter": 2450, "lr": 3e-05, "memory": 17385, "data_time": 0.00784, "loss_rpn_cls": 0.01151, "loss_rpn_bbox": 0.0082, "s0.loss_cls": 0.09237, "s0.acc": 96.87305, "s0.loss_bbox": 0.03635, "s1.loss_cls": 0.04397, "s1.acc": 96.98059, "s1.loss_bbox": 0.0382, "s2.loss_cls": 0.02282, "s2.acc": 96.83283, "s2.loss_bbox": 0.02791, "loss": 0.28134, "time": 0.57766}
{"mode": "train", "epoch": 3, "iter": 2500, "lr": 3e-05, "memory": 17385, "data_time": 0.00798, "loss_rpn_cls": 0.01731, "loss_rpn_bbox": 0.01177, "s0.loss_cls": 0.09027, "s0.acc": 96.79492, "s0.loss_bbox": 0.04005, "s1.loss_cls": 0.04543, "s1.acc": 96.73438, "s1.loss_bbox": 0.04284, "s2.loss_cls": 0.02283, "s2.acc": 96.94153, "s2.loss_bbox": 0.02709, "loss": 0.2976, "time": 0.58036}
{"mode": "train", "epoch": 3, "iter": 2550, "lr": 3e-05, "memory": 17385, "data_time": 0.00747, "loss_rpn_cls": 0.01219, "loss_rpn_bbox": 0.00882, "s0.loss_cls": 0.08669, "s0.acc": 96.88086, "s0.loss_bbox": 0.0426, "s1.loss_cls": 0.04372, "s1.acc": 96.98859, "s1.loss_bbox": 0.04561, "s2.loss_cls": 0.02173, "s2.acc": 96.95988, "s2.loss_bbox": 0.02915, "loss": 0.29052, "time": 0.54708}
{"mode": "train", "epoch": 3, "iter": 2600, "lr": 3e-05, "memory": 17385, "data_time": 0.00799, "loss_rpn_cls": 0.01099, "loss_rpn_bbox": 0.00854, "s0.loss_cls": 0.09114, "s0.acc": 96.81641, "s0.loss_bbox": 0.04679, "s1.loss_cls": 0.04434, "s1.acc": 96.89905, "s1.loss_bbox": 0.04468, "s2.loss_cls": 0.01991, "s2.acc": 97.01069, "s2.loss_bbox": 0.02784, "loss": 0.29425, "time": 0.55934}
{"mode": "train", "epoch": 3, "iter": 2650, "lr": 3e-05, "memory": 17385, "data_time": 0.00778, "loss_rpn_cls": 0.01603, "loss_rpn_bbox": 0.01167, "s0.loss_cls": 0.09514, "s0.acc": 96.69141, "s0.loss_bbox": 0.0488, "s1.loss_cls": 0.04632, "s1.acc": 96.85871, "s1.loss_bbox": 0.04541, "s2.loss_cls": 0.02296, "s2.acc": 96.7661, "s2.loss_bbox": 0.03023, "loss": 0.31656, "time": 0.56885}
{"mode": "train", "epoch": 3, "iter": 2700, "lr": 3e-05, "memory": 17385, "data_time": 0.00778, "loss_rpn_cls": 0.01276, "loss_rpn_bbox": 0.00767, "s0.loss_cls": 0.09105, "s0.acc": 96.98047, "s0.loss_bbox": 0.04159, "s1.loss_cls": 0.04396, "s1.acc": 97.18003, "s1.loss_bbox": 0.0428, "s2.loss_cls": 0.02074, "s2.acc": 97.24569, "s2.loss_bbox": 0.02987, "loss": 0.29044, "time": 0.56171}
{"mode": "train", "epoch": 3, "iter": 2750, "lr": 3e-05, "memory": 17385, "data_time": 0.00822, "loss_rpn_cls": 0.0165, "loss_rpn_bbox": 0.01074, "s0.loss_cls": 0.1121, "s0.acc": 96.24609, "s0.loss_bbox": 0.05233, "s1.loss_cls": 0.05175, "s1.acc": 96.55374, "s1.loss_bbox": 0.05213, "s2.loss_cls": 0.02447, "s2.acc": 96.70455, "s2.loss_bbox": 0.03458, "loss": 0.35459, "time": 0.59858}
{"mode": "train", "epoch": 3, "iter": 2800, "lr": 3e-05, "memory": 17385, "data_time": 0.00773, "loss_rpn_cls": 0.01346, "loss_rpn_bbox": 0.00993, "s0.loss_cls": 0.0936, "s0.acc": 96.61914, "s0.loss_bbox": 0.04997, "s1.loss_cls": 0.04499, "s1.acc": 96.69458, "s1.loss_bbox": 0.04959, "s2.loss_cls": 0.0225, "s2.acc": 96.65564, "s2.loss_bbox": 0.03238, "loss": 0.31642, "time": 0.55804}
{"mode": "train", "epoch": 3, "iter": 2850, "lr": 3e-05, "memory": 17385, "data_time": 0.0079, "loss_rpn_cls": 0.01202, "loss_rpn_bbox": 0.00919, "s0.loss_cls": 0.08979, "s0.acc": 96.88867, "s0.loss_bbox": 0.04547, "s1.loss_cls": 0.04503, "s1.acc": 96.78802, "s1.loss_bbox": 0.04633, "s2.loss_cls": 0.02344, "s2.acc": 96.50146, "s2.loss_bbox": 0.0334, "loss": 0.30466, "time": 0.56204}
{"mode": "train", "epoch": 3, "iter": 2900, "lr": 3e-05, "memory": 17385, "data_time": 0.00808, "loss_rpn_cls": 0.01706, "loss_rpn_bbox": 0.00808, "s0.loss_cls": 0.11165, "s0.acc": 96.61133, "s0.loss_bbox": 0.04586, "s1.loss_cls": 0.05241, "s1.acc": 96.83352, "s1.loss_bbox": 0.04826, "s2.loss_cls": 0.02513, "s2.acc": 96.63566, "s2.loss_bbox": 0.03071, "loss": 0.33917, "time": 0.56658}
{"mode": "train", "epoch": 3, "iter": 2950, "lr": 3e-05, "memory": 17385, "data_time": 0.00811, "loss_rpn_cls": 0.01558, "loss_rpn_bbox": 0.01529, "s0.loss_cls": 0.11363, "s0.acc": 96.24414, "s0.loss_bbox": 0.05742, "s1.loss_cls": 0.05092, "s1.acc": 96.6366, "s1.loss_bbox": 0.05436, "s2.loss_cls": 0.02416, "s2.acc": 96.68939, "s2.loss_bbox": 0.03695, "loss": 0.36831, "time": 0.57999}
{"mode": "train", "epoch": 3, "iter": 3000, "lr": 3e-05, "memory": 17385, "data_time": 0.008, "loss_rpn_cls": 0.01466, "loss_rpn_bbox": 0.00744, "s0.loss_cls": 0.08923, "s0.acc": 97.07617, "s0.loss_bbox": 0.0405, "s1.loss_cls": 0.04183, "s1.acc": 97.33029, "s1.loss_bbox": 0.03843, "s2.loss_cls": 0.01952, "s2.acc": 97.28672, "s2.loss_bbox": 0.02398, "loss": 0.2756, "time": 0.56247}
{"mode": "train", "epoch": 3, "iter": 3050, "lr": 3e-05, "memory": 17385, "data_time": 0.0074, "loss_rpn_cls": 0.0171, "loss_rpn_bbox": 0.01279, "s0.loss_cls": 0.1091, "s0.acc": 96.37695, "s0.loss_bbox": 0.0509, "s1.loss_cls": 0.04988, "s1.acc": 96.76142, "s1.loss_bbox": 0.05037, "s2.loss_cls": 0.02358, "s2.acc": 96.8198, "s2.loss_bbox": 0.03403, "loss": 0.34775, "time": 0.55518}
{"mode": "train", "epoch": 3, "iter": 3100, "lr": 3e-05, "memory": 17385, "data_time": 0.00738, "loss_rpn_cls": 0.01917, "loss_rpn_bbox": 0.01142, "s0.loss_cls": 0.11016, "s0.acc": 96.03711, "s0.loss_bbox": 0.05193, "s1.loss_cls": 0.05207, "s1.acc": 96.51219, "s1.loss_bbox": 0.05089, "s2.loss_cls": 0.02663, "s2.acc": 96.39211, "s2.loss_bbox": 0.03425, "loss": 0.35652, "time": 0.55386}
{"mode": "train", "epoch": 3, "iter": 3150, "lr": 3e-05, "memory": 17385, "data_time": 0.00819, "loss_rpn_cls": 0.01841, "loss_rpn_bbox": 0.01436, "s0.loss_cls": 0.13127, "s0.acc": 95.60742, "s0.loss_bbox": 0.06516, "s1.loss_cls": 0.06058, "s1.acc": 95.89288, "s1.loss_bbox": 0.05975, "s2.loss_cls": 0.02984, "s2.acc": 95.89545, "s2.loss_bbox": 0.03878, "loss": 0.41814, "time": 0.59064}
{"mode": "train", "epoch": 3, "iter": 3200, "lr": 3e-05, "memory": 17385, "data_time": 0.00775, "loss_rpn_cls": 0.01199, "loss_rpn_bbox": 0.01077, "s0.loss_cls": 0.09771, "s0.acc": 96.64258, "s0.loss_bbox": 0.04592, "s1.loss_cls": 0.04526, "s1.acc": 96.85753, "s1.loss_bbox": 0.04575, "s2.loss_cls": 0.02111, "s2.acc": 97.12386, "s2.loss_bbox": 0.03062, "loss": 0.30912, "time": 0.56604}
{"mode": "train", "epoch": 3, "iter": 3250, "lr": 3e-05, "memory": 17385, "data_time": 0.00738, "loss_rpn_cls": 0.02028, "loss_rpn_bbox": 0.01477, "s0.loss_cls": 0.1067, "s0.acc": 96.45703, "s0.loss_bbox": 0.05042, "s1.loss_cls": 0.04961, "s1.acc": 96.63657, "s1.loss_bbox": 0.05018, "s2.loss_cls": 0.02357, "s2.acc": 96.83482, "s2.loss_bbox": 0.03352, "loss": 0.34905, "time": 0.54845}
{"mode": "train", "epoch": 3, "iter": 3300, "lr": 3e-05, "memory": 17385, "data_time": 0.0074, "loss_rpn_cls": 0.01223, "loss_rpn_bbox": 0.00858, "s0.loss_cls": 0.08424, "s0.acc": 97.13281, "s0.loss_bbox": 0.03808, "s1.loss_cls": 0.03958, "s1.acc": 97.31289, "s1.loss_bbox": 0.03847, "s2.loss_cls": 0.01859, "s2.acc": 97.52052, "s2.loss_bbox": 0.0266, "loss": 0.26638, "time": 0.56483}
{"mode": "train", "epoch": 3, "iter": 3350, "lr": 3e-05, "memory": 17385, "data_time": 0.00766, "loss_rpn_cls": 0.01665, "loss_rpn_bbox": 0.01157, "s0.loss_cls": 0.09342, "s0.acc": 96.75977, "s0.loss_bbox": 0.04304, "s1.loss_cls": 0.04268, "s1.acc": 97.09514, "s1.loss_bbox": 0.041, "s2.loss_cls": 0.02041, "s2.acc": 97.23474, "s2.loss_bbox": 0.03037, "loss": 0.29915, "time": 0.56812}
{"mode": "train", "epoch": 3, "iter": 3400, "lr": 3e-05, "memory": 17385, "data_time": 0.00751, "loss_rpn_cls": 0.0124, "loss_rpn_bbox": 0.0111, "s0.loss_cls": 0.07414, "s0.acc": 97.35156, "s0.loss_bbox": 0.03446, "s1.loss_cls": 0.03649, "s1.acc": 97.4532, "s1.loss_bbox": 0.0368, "s2.loss_cls": 0.0182, "s2.acc": 97.41015, "s2.loss_bbox": 0.02608, "loss": 0.24968, "time": 0.57403}
{"mode": "train", "epoch": 3, "iter": 3450, "lr": 3e-05, "memory": 17385, "data_time": 0.00771, "loss_rpn_cls": 0.01958, "loss_rpn_bbox": 0.01402, "s0.loss_cls": 0.10823, "s0.acc": 96.17578, "s0.loss_bbox": 0.05752, "s1.loss_cls": 0.05088, "s1.acc": 96.43609, "s1.loss_bbox": 0.05438, "s2.loss_cls": 0.02535, "s2.acc": 96.46285, "s2.loss_bbox": 0.0319, "loss": 0.36186, "time": 0.56328}
{"mode": "train", "epoch": 3, "iter": 3500, "lr": 3e-05, "memory": 17385, "data_time": 0.00789, "loss_rpn_cls": 0.01465, "loss_rpn_bbox": 0.01032, "s0.loss_cls": 0.08878, "s0.acc": 96.85156, "s0.loss_bbox": 0.04458, "s1.loss_cls": 0.04056, "s1.acc": 97.1053, "s1.loss_bbox": 0.04464, "s2.loss_cls": 0.02018, "s2.acc": 97.05289, "s2.loss_bbox": 0.03064, "loss": 0.29437, "time": 0.55242}
{"mode": "train", "epoch": 3, "iter": 3550, "lr": 3e-05, "memory": 17385, "data_time": 0.00775, "loss_rpn_cls": 0.00934, "loss_rpn_bbox": 0.01026, "s0.loss_cls": 0.07853, "s0.acc": 97.30273, "s0.loss_bbox": 0.03161, "s1.loss_cls": 0.04193, "s1.acc": 97.27792, "s1.loss_bbox": 0.03589, "s2.loss_cls": 0.02163, "s2.acc": 97.23293, "s2.loss_bbox": 0.0263, "loss": 0.2555, "time": 0.5567}
{"mode": "train", "epoch": 3, "iter": 3600, "lr": 3e-05, "memory": 17385, "data_time": 0.00813, "loss_rpn_cls": 0.01343, "loss_rpn_bbox": 0.00746, "s0.loss_cls": 0.0754, "s0.acc": 97.29297, "s0.loss_bbox": 0.03674, "s1.loss_cls": 0.0373, "s1.acc": 97.39722, "s1.loss_bbox": 0.03968, "s2.loss_cls": 0.01896, "s2.acc": 97.32557, "s2.loss_bbox": 0.0278, "loss": 0.25677, "time": 0.58005}
{"mode": "train", "epoch": 3, "iter": 3650, "lr": 3e-05, "memory": 17385, "data_time": 0.00787, "loss_rpn_cls": 0.01391, "loss_rpn_bbox": 0.0138, "s0.loss_cls": 0.08628, "s0.acc": 96.82031, "s0.loss_bbox": 0.04344, "s1.loss_cls": 0.03895, "s1.acc": 97.08798, "s1.loss_bbox": 0.04249, "s2.loss_cls": 0.01921, "s2.acc": 97.12826, "s2.loss_bbox": 0.02985, "loss": 0.28794, "time": 0.57451}
{"mode": "train", "epoch": 3, "iter": 3700, "lr": 3e-05, "memory": 17385, "data_time": 0.00771, "loss_rpn_cls": 0.01807, "loss_rpn_bbox": 0.00847, "s0.loss_cls": 0.11497, "s0.acc": 96.29492, "s0.loss_bbox": 0.04926, "s1.loss_cls": 0.05479, "s1.acc": 96.33339, "s1.loss_bbox": 0.04976, "s2.loss_cls": 0.02696, "s2.acc": 96.55189, "s2.loss_bbox": 0.03102, "loss": 0.3533, "time": 0.56723}
{"mode": "train", "epoch": 3, "iter": 3750, "lr": 3e-05, "memory": 17385, "data_time": 0.0076, "loss_rpn_cls": 0.01478, "loss_rpn_bbox": 0.00781, "s0.loss_cls": 0.09203, "s0.acc": 96.7832, "s0.loss_bbox": 0.04449, "s1.loss_cls": 0.04644, "s1.acc": 96.8662, "s1.loss_bbox": 0.04472, "s2.loss_cls": 0.02434, "s2.acc": 96.64736, "s2.loss_bbox": 0.03253, "loss": 0.30714, "time": 0.56338}
{"mode": "train", "epoch": 3, "iter": 3800, "lr": 3e-05, "memory": 17385, "data_time": 0.00772, "loss_rpn_cls": 0.01799, "loss_rpn_bbox": 0.01757, "s0.loss_cls": 0.10114, "s0.acc": 96.31055, "s0.loss_bbox": 0.05387, "s1.loss_cls": 0.05083, "s1.acc": 96.29133, "s1.loss_bbox": 0.05308, "s2.loss_cls": 0.02585, "s2.acc": 96.19865, "s2.loss_bbox": 0.03279, "loss": 0.35312, "time": 0.5713}
{"mode": "val", "epoch": 3, "iter": 976, "lr": 3e-05, "bbox_mAP": 0.611, "bbox_mAP_50": 0.785, "bbox_mAP_75": 0.655, "bbox_mAP_s": 0.04, "bbox_mAP_m": 0.253, "bbox_mAP_l": 0.692, "bbox_mAP_copypaste": "0.611 0.785 0.655 0.040 0.253 0.692"}
