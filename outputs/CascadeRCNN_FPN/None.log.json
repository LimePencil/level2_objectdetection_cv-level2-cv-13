{"config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(256, 256), (512, 512), (768, 768), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }]]),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/train_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/validation_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../dataset/test.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=2, metric='bbox', save_best='auto')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0005,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineAnnealing',\n    by_epoch=False,\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.1,\n    min_lr=1e-07)\nrunner = dict(type='EpochBasedRunner', max_epochs=14)\ncheckpoint_config = dict(max_keep_ckpts=3, interval=1)\nlog_config = dict(\n    interval=100,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nseed = 42\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn_1x_coco-custom_trash'\nfp16 = dict(loss_scale=dict(init_scale=512.0))\ndevice = 'cuda'\n", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 9e-05, "memory": 5859, "data_time": 0.02849, "loss_rpn_cls": 0.18366, "loss_rpn_bbox": 0.0494, "s0.loss_cls": 0.35896, "s0.acc": 92.45068, "s0.loss_bbox": 0.25321, "s1.loss_cls": 0.10788, "s1.acc": 96.13281, "s1.loss_bbox": 0.03304, "s2.loss_cls": 0.04149, "s2.acc": 97.34717, "s2.loss_bbox": 0.00321, "loss": 1.03084, "time": 0.49621}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00014, "memory": 5859, "data_time": 0.00653, "loss_rpn_cls": 0.09502, "loss_rpn_bbox": 0.04156, "s0.loss_cls": 0.31245, "s0.acc": 92.52539, "s0.loss_bbox": 0.29314, "s1.loss_cls": 0.0944, "s1.acc": 95.89453, "s1.loss_bbox": 0.05388, "s2.loss_cls": 0.02676, "s2.acc": 98.0249, "s2.loss_bbox": 0.00671, "loss": 0.92392, "time": 0.46259}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00018, "memory": 5859, "data_time": 0.00656, "loss_rpn_cls": 0.09944, "loss_rpn_bbox": 0.04742, "s0.loss_cls": 0.35079, "s0.acc": 91.24707, "s0.loss_bbox": 0.32476, "s1.loss_cls": 0.13935, "s1.acc": 93.23389, "s1.loss_bbox": 0.09254, "s2.loss_cls": 0.045, "s2.acc": 96.06006, "s2.loss_bbox": 0.01683, "loss": 1.11612, "time": 0.4622}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00023, "memory": 5861, "data_time": 0.00636, "loss_rpn_cls": 0.08368, "loss_rpn_bbox": 0.04556, "s0.loss_cls": 0.31177, "s0.acc": 91.92041, "s0.loss_bbox": 0.29171, "s1.loss_cls": 0.13603, "s1.acc": 92.79141, "s1.loss_bbox": 0.0968, "s2.loss_cls": 0.05276, "s2.acc": 94.57174, "s2.loss_bbox": 0.02532, "loss": 1.04364, "time": 0.46746}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00027, "memory": 5861, "data_time": 0.00647, "loss_rpn_cls": 0.07159, "loss_rpn_bbox": 0.03873, "s0.loss_cls": 0.29258, "s0.acc": 92.65479, "s0.loss_bbox": 0.25979, "s1.loss_cls": 0.12915, "s1.acc": 93.27148, "s1.loss_bbox": 0.08965, "s2.loss_cls": 0.05203, "s2.acc": 94.65137, "s2.loss_bbox": 0.02606, "loss": 0.95959, "time": 0.45896}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00032, "memory": 5861, "data_time": 0.00649, "loss_rpn_cls": 0.08954, "loss_rpn_bbox": 0.03992, "s0.loss_cls": 0.31951, "s0.acc": 92.42676, "s0.loss_bbox": 0.26462, "s1.loss_cls": 0.13675, "s1.acc": 93.17077, "s1.loss_bbox": 0.08848, "s2.loss_cls": 0.05382, "s2.acc": 94.73554, "s2.loss_bbox": 0.02521, "loss": 1.01787, "time": 0.457}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00036, "memory": 5861, "data_time": 0.0065, "loss_rpn_cls": 0.11189, "loss_rpn_bbox": 0.05179, "s0.loss_cls": 0.34054, "s0.acc": 91.63428, "s0.loss_bbox": 0.29041, "s1.loss_cls": 0.14446, "s1.acc": 92.72949, "s1.loss_bbox": 0.09431, "s2.loss_cls": 0.0553, "s2.acc": 94.58154, "s2.loss_bbox": 0.0252, "loss": 1.11389, "time": 0.45355}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00041, "memory": 5862, "data_time": 0.00644, "loss_rpn_cls": 0.08344, "loss_rpn_bbox": 0.03989, "s0.loss_cls": 0.31479, "s0.acc": 92.3457, "s0.loss_bbox": 0.26947, "s1.loss_cls": 0.13609, "s1.acc": 93.13574, "s1.loss_bbox": 0.0919, "s2.loss_cls": 0.05311, "s2.acc": 94.68896, "s2.loss_bbox": 0.02644, "loss": 1.01514, "time": 0.47209}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00045, "memory": 5862, "data_time": 0.00659, "loss_rpn_cls": 0.08997, "loss_rpn_bbox": 0.0419, "s0.loss_cls": 0.35811, "s0.acc": 91.28906, "s0.loss_bbox": 0.3027, "s1.loss_cls": 0.15646, "s1.acc": 92.15918, "s1.loss_bbox": 0.10299, "s2.loss_cls": 0.06161, "s2.acc": 93.75146, "s2.loss_bbox": 0.02953, "loss": 1.14327, "time": 0.46435}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00049, "memory": 5862, "data_time": 0.02924, "loss_rpn_cls": 0.09844, "loss_rpn_bbox": 0.04542, "s0.loss_cls": 0.32491, "s0.acc": 92.15576, "s0.loss_bbox": 0.27231, "s1.loss_cls": 0.13914, "s1.acc": 93.07471, "s1.loss_bbox": 0.08913, "s2.loss_cls": 0.05451, "s2.acc": 94.60938, "s2.loss_bbox": 0.02528, "loss": 1.04914, "time": 0.50178}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00049, "memory": 5862, "data_time": 0.0063, "loss_rpn_cls": 0.09141, "loss_rpn_bbox": 0.04026, "s0.loss_cls": 0.33364, "s0.acc": 91.93652, "s0.loss_bbox": 0.27292, "s1.loss_cls": 0.14756, "s1.acc": 92.52192, "s1.loss_bbox": 0.09374, "s2.loss_cls": 0.05894, "s2.acc": 94.03756, "s2.loss_bbox": 0.02752, "loss": 1.06601, "time": 0.47156}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00049, "memory": 5862, "data_time": 0.00628, "loss_rpn_cls": 0.09489, "loss_rpn_bbox": 0.04698, "s0.loss_cls": 0.35854, "s0.acc": 91.26465, "s0.loss_bbox": 0.29556, "s1.loss_cls": 0.15651, "s1.acc": 92.09354, "s1.loss_bbox": 0.10139, "s2.loss_cls": 0.06289, "s2.acc": 93.50775, "s2.loss_bbox": 0.03011, "loss": 1.14688, "time": 0.46192}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.00049, "memory": 5862, "data_time": 0.00641, "loss_rpn_cls": 0.08766, "loss_rpn_bbox": 0.03901, "s0.loss_cls": 0.32824, "s0.acc": 92.05762, "s0.loss_bbox": 0.25943, "s1.loss_cls": 0.14497, "s1.acc": 92.59885, "s1.loss_bbox": 0.08929, "s2.loss_cls": 0.05983, "s2.acc": 93.70878, "s2.loss_bbox": 0.02763, "loss": 1.03608, "time": 0.47172}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00049, "memory": 5862, "data_time": 0.00643, "loss_rpn_cls": 0.07532, "loss_rpn_bbox": 0.03608, "s0.loss_cls": 0.2966, "s0.acc": 92.38281, "s0.loss_bbox": 0.2547, "s1.loss_cls": 0.13234, "s1.acc": 92.88443, "s1.loss_bbox": 0.09111, "s2.loss_cls": 0.05392, "s2.acc": 94.06869, "s2.loss_bbox": 0.02863, "loss": 0.9687, "time": 0.46011}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.00048, "memory": 5862, "data_time": 0.00638, "loss_rpn_cls": 0.08401, "loss_rpn_bbox": 0.03713, "s0.loss_cls": 0.34896, "s0.acc": 91.2998, "s0.loss_bbox": 0.28901, "s1.loss_cls": 0.15948, "s1.acc": 91.74884, "s1.loss_bbox": 0.10433, "s2.loss_cls": 0.06565, "s2.acc": 93.04232, "s2.loss_bbox": 0.03271, "loss": 1.12128, "time": 0.45393}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.00048, "memory": 5862, "data_time": 0.00646, "loss_rpn_cls": 0.08562, "loss_rpn_bbox": 0.03971, "s0.loss_cls": 0.32814, "s0.acc": 91.68555, "s0.loss_bbox": 0.27871, "s1.loss_cls": 0.14997, "s1.acc": 91.94688, "s1.loss_bbox": 0.10109, "s2.loss_cls": 0.06269, "s2.acc": 93.24987, "s2.loss_bbox": 0.03217, "loss": 1.07811, "time": 0.4598}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.00048, "memory": 5862, "data_time": 0.00652, "loss_rpn_cls": 0.07908, "loss_rpn_bbox": 0.03599, "s0.loss_cls": 0.32138, "s0.acc": 91.77441, "s0.loss_bbox": 0.27399, "s1.loss_cls": 0.14712, "s1.acc": 92.09552, "s1.loss_bbox": 0.10059, "s2.loss_cls": 0.06138, "s2.acc": 93.13316, "s2.loss_bbox": 0.03184, "loss": 1.05137, "time": 0.46309}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.00048, "memory": 5862, "data_time": 0.00671, "loss_rpn_cls": 0.07107, "loss_rpn_bbox": 0.03519, "s0.loss_cls": 0.33368, "s0.acc": 91.28467, "s0.loss_bbox": 0.28158, "s1.loss_cls": 0.15528, "s1.acc": 91.61419, "s1.loss_bbox": 0.10221, "s2.loss_cls": 0.06532, "s2.acc": 92.71, "s2.loss_bbox": 0.03252, "loss": 1.07687, "time": 0.46033}
{"mode": "val", "epoch": 2, "iter": 977, "lr": 0.00048, "bbox_mAP": 0.092, "bbox_mAP_50": 0.167, "bbox_mAP_75": 0.098, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.007, "bbox_mAP_l": 0.113, "bbox_mAP_copypaste": "0.092 0.167 0.098 0.000 0.007 0.113"}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00047, "memory": 5862, "data_time": 0.02944, "loss_rpn_cls": 0.07503, "loss_rpn_bbox": 0.03582, "s0.loss_cls": 0.32446, "s0.acc": 91.61475, "s0.loss_bbox": 0.2795, "s1.loss_cls": 0.15154, "s1.acc": 91.77958, "s1.loss_bbox": 0.10272, "s2.loss_cls": 0.06545, "s2.acc": 92.79324, "s2.loss_bbox": 0.03352, "loss": 1.06804, "time": 0.48976}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.00047, "memory": 5862, "data_time": 0.00713, "loss_rpn_cls": 0.06964, "loss_rpn_bbox": 0.03551, "s0.loss_cls": 0.31735, "s0.acc": 91.4248, "s0.loss_bbox": 0.27936, "s1.loss_cls": 0.15158, "s1.acc": 91.59457, "s1.loss_bbox": 0.10441, "s2.loss_cls": 0.06579, "s2.acc": 92.65719, "s2.loss_bbox": 0.03449, "loss": 1.05813, "time": 0.46784}
{"config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(256, 256), (512, 512), (768, 768), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }]]),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/train_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/validation_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../dataset/test.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0005,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=14)\ncheckpoint_config = dict(max_keep_ckpts=3, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nseed = 42\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn_1x_coco-custom_trash'\nfp16 = dict(loss_scale=dict(init_scale=512.0))\ndevice = 'cuda'\n", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 5e-05, "memory": 5487, "data_time": 0.04992, "loss_rpn_cls": 0.44622, "loss_rpn_bbox": 0.04311, "s0.loss_cls": 0.68475, "s0.acc": 85.13184, "s0.loss_bbox": 0.15691, "s1.loss_cls": 0.30932, "s1.acc": 84.63672, "s1.loss_bbox": 0.02036, "s2.loss_cls": 0.17556, "s2.acc": 81.56641, "s2.loss_bbox": 0.00206, "loss": 1.83828, "time": 0.51637}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0001, "memory": 5487, "data_time": 0.00604, "loss_rpn_cls": 0.15994, "loss_rpn_bbox": 0.05438, "s0.loss_cls": 0.35911, "s0.acc": 92.34277, "s0.loss_bbox": 0.29491, "s1.loss_cls": 0.09726, "s1.acc": 96.61719, "s1.loss_bbox": 0.03964, "s2.loss_cls": 0.03008, "s2.acc": 98.28125, "s2.loss_bbox": 0.00407, "loss": 1.0394, "time": 0.47464}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00015, "memory": 5488, "data_time": 0.00575, "loss_rpn_cls": 0.10565, "loss_rpn_bbox": 0.04564, "s0.loss_cls": 0.30697, "s0.acc": 92.84082, "s0.loss_bbox": 0.27879, "s1.loss_cls": 0.0846, "s1.acc": 96.72168, "s1.loss_bbox": 0.0407, "s2.loss_cls": 0.02382, "s2.acc": 98.45312, "s2.loss_bbox": 0.00405, "loss": 0.89024, "time": 0.47435}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.0002, "memory": 5488, "data_time": 0.00585, "loss_rpn_cls": 0.10617, "loss_rpn_bbox": 0.0504, "s0.loss_cls": 0.34613, "s0.acc": 91.59473, "s0.loss_bbox": 0.32714, "s1.loss_cls": 0.1025, "s1.acc": 95.7168, "s1.loss_bbox": 0.05489, "s2.loss_cls": 0.02796, "s2.acc": 98.0625, "s2.loss_bbox": 0.00574, "loss": 1.02093, "time": 0.46184}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00025, "memory": 5488, "data_time": 0.00588, "loss_rpn_cls": 0.09028, "loss_rpn_bbox": 0.03999, "s0.loss_cls": 0.28208, "s0.acc": 93.17383, "s0.loss_bbox": 0.25574, "s1.loss_cls": 0.10502, "s1.acc": 95.10352, "s1.loss_bbox": 0.06695, "s2.loss_cls": 0.0324, "s2.acc": 97.32129, "s2.loss_bbox": 0.01154, "loss": 0.884, "time": 0.46971}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.0003, "memory": 5488, "data_time": 0.00593, "loss_rpn_cls": 0.11198, "loss_rpn_bbox": 0.05302, "s0.loss_cls": 0.34805, "s0.acc": 91.73828, "s0.loss_bbox": 0.30299, "s1.loss_cls": 0.13612, "s1.acc": 93.63477, "s1.loss_bbox": 0.08384, "s2.loss_cls": 0.04575, "s2.acc": 96.0625, "s2.loss_bbox": 0.01672, "loss": 1.09847, "time": 0.47936}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00035, "memory": 5488, "data_time": 0.0059, "loss_rpn_cls": 0.09299, "loss_rpn_bbox": 0.0414, "s0.loss_cls": 0.3421, "s0.acc": 92.10645, "s0.loss_bbox": 0.28125, "s1.loss_cls": 0.13396, "s1.acc": 93.65332, "s1.loss_bbox": 0.08453, "s2.loss_cls": 0.04639, "s2.acc": 95.91211, "s2.loss_bbox": 0.01889, "loss": 1.04151, "time": 0.45765}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0004, "memory": 5488, "data_time": 0.00586, "loss_rpn_cls": 0.12264, "loss_rpn_bbox": 0.05527, "s0.loss_cls": 0.35083, "s0.acc": 91.95703, "s0.loss_bbox": 0.2949, "s1.loss_cls": 0.13646, "s1.acc": 93.6582, "s1.loss_bbox": 0.08398, "s2.loss_cls": 0.04705, "s2.acc": 95.83398, "s2.loss_bbox": 0.01842, "loss": 1.10956, "time": 0.48396}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00045, "memory": 5488, "data_time": 0.00575, "loss_rpn_cls": 0.07816, "loss_rpn_bbox": 0.0438, "s0.loss_cls": 0.33876, "s0.acc": 92.1875, "s0.loss_bbox": 0.2782, "s1.loss_cls": 0.14009, "s1.acc": 93.2959, "s1.loss_bbox": 0.08822, "s2.loss_cls": 0.05023, "s2.acc": 95.44531, "s2.loss_bbox": 0.02152, "loss": 1.03897, "time": 0.46542}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.0005, "memory": 5489, "data_time": 0.0059, "loss_rpn_cls": 0.10116, "loss_rpn_bbox": 0.04095, "s0.loss_cls": 0.33824, "s0.acc": 92.17383, "s0.loss_bbox": 0.27551, "s1.loss_cls": 0.1391, "s1.acc": 93.2832, "s1.loss_bbox": 0.08795, "s2.loss_cls": 0.05422, "s2.acc": 94.85938, "s2.loss_bbox": 0.02328, "loss": 1.0604, "time": 0.48917}
{"config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(256, 256), (512, 512), (768, 768), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }]]),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/train_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/validation_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../dataset/test.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0005,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=14)\ncheckpoint_config = dict(max_keep_ckpts=3, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nseed = 42\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn_1x_coco-custom_trash'\nfp16 = dict(loss_scale=dict(init_scale=512.0))\ndevice = 'cuda'\n", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 5e-05, "memory": 16576, "data_time": 0.06931, "loss_rpn_cls": 0.4369, "loss_rpn_bbox": 0.044, "s0.loss_cls": 0.73165, "s0.acc": 82.80835, "s0.loss_bbox": 0.18028, "s1.loss_cls": 0.27908, "s1.acc": 90.59082, "s1.loss_bbox": 0.0238, "s2.loss_cls": 0.13542, "s2.acc": 87.98145, "s2.loss_bbox": 0.00237, "loss": 1.83351, "time": 1.39052}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0001, "memory": 16576, "data_time": 0.01889, "loss_rpn_cls": 0.12701, "loss_rpn_bbox": 0.04382, "s0.loss_cls": 0.3225, "s0.acc": 92.60205, "s0.loss_bbox": 0.28866, "s1.loss_cls": 0.08666, "s1.acc": 96.75488, "s1.loss_bbox": 0.0393, "s2.loss_cls": 0.02488, "s2.acc": 98.42847, "s2.loss_bbox": 0.0038, "loss": 0.93664, "time": 1.33047}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00015, "memory": 16576, "data_time": 0.01868, "loss_rpn_cls": 0.09132, "loss_rpn_bbox": 0.04143, "s0.loss_cls": 0.30391, "s0.acc": 92.29248, "s0.loss_bbox": 0.30723, "s1.loss_cls": 0.09259, "s1.acc": 95.80298, "s1.loss_bbox": 0.05494, "s2.loss_cls": 0.02657, "s2.acc": 97.99194, "s2.loss_bbox": 0.00655, "loss": 0.92454, "time": 1.30098}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.0002, "memory": 16993, "data_time": 0.01833, "loss_rpn_cls": 0.07633, "loss_rpn_bbox": 0.03786, "s0.loss_cls": 0.26944, "s0.acc": 92.82715, "s0.loss_bbox": 0.27218, "s1.loss_cls": 0.11016, "s1.acc": 94.15332, "s1.loss_bbox": 0.08186, "s2.loss_cls": 0.03683, "s2.acc": 96.36987, "s2.loss_bbox": 0.01639, "loss": 0.90104, "time": 1.30993}
{"mode": "val", "epoch": 1, "iter": 977, "lr": 0.00024, "bbox_mAP": 0.114, "bbox_mAP_50": 0.233, "bbox_mAP_75": 0.1, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.007, "bbox_mAP_l": 0.141, "bbox_mAP_copypaste": "0.114 0.233 0.100 0.000 0.007 0.141"}
{"config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(256, 256), (512, 512), (768, 768), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }]]),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=32,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/train_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/validation_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../dataset/test.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0005,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=14)\ncheckpoint_config = dict(max_keep_ckpts=3, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nseed = 42\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn_1x_coco-custom_trash'\nfp16 = dict(loss_scale=dict(init_scale=512.0))\ndevice = 'cuda'\n", "hook_msgs": {}}
{"config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(256, 256), (512, 512), (768, 768), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }]]),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=30,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/train_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/validation_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../dataset/test.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0005,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=14)\ncheckpoint_config = dict(max_keep_ckpts=3, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nseed = 42\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn_1x_coco-custom_trash'\nfp16 = dict(loss_scale=dict(init_scale=512.0))\ndevice = 'cuda'\n", "hook_msgs": {}}
{"config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(256, 256), (512, 512), (768, 768), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }]]),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=30,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/train_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/validation_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../dataset/test.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0005,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=14)\ncheckpoint_config = dict(max_keep_ckpts=3, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nseed = 42\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn_1x_coco-custom_trash'\nfp16 = dict(loss_scale=dict(init_scale=512.0))\ndevice = 'cuda'\n", "hook_msgs": {}}
{"config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(256, 256), (512, 512), (768, 768), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }]]),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=28,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/train_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/validation_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../dataset/test.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0005,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=14)\ncheckpoint_config = dict(max_keep_ckpts=3, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nseed = 42\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn_1x_coco-custom_trash'\nfp16 = dict(loss_scale=dict(init_scale=512.0))\ndevice = 'cuda'\n", "hook_msgs": {}}
{"config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(256, 256), (512, 512), (768, 768), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }]]),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=24,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/train_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/validation_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../dataset/test.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0005,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=14)\ncheckpoint_config = dict(max_keep_ckpts=3, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nseed = 42\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn_1x_coco-custom_trash'\nfp16 = dict(loss_scale=dict(init_scale=512.0))\ndevice = 'cuda'\n", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 5e-05, "memory": 24678, "data_time": 0.07952, "loss_rpn_cls": 0.44903, "loss_rpn_bbox": 0.04593, "s0.loss_cls": 0.53276, "s0.acc": 93.22786, "s0.loss_bbox": 0.14521, "s1.loss_cls": 0.30905, "s1.acc": 86.12744, "s1.loss_bbox": 0.01968, "s2.loss_cls": 0.16343, "s2.acc": 83.55452, "s2.loss_bbox": 0.00198, "loss": 1.66706, "time": 1.93504}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0001, "memory": 24678, "data_time": 0.02662, "loss_rpn_cls": 0.13395, "loss_rpn_bbox": 0.0442, "s0.loss_cls": 0.31293, "s0.acc": 92.91455, "s0.loss_bbox": 0.27549, "s1.loss_cls": 0.08706, "s1.acc": 96.87337, "s1.loss_bbox": 0.03704, "s2.loss_cls": 0.02654, "s2.acc": 98.43896, "s2.loss_bbox": 0.0037, "loss": 0.9209, "time": 1.92505}
{"config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(256, 256), (512, 512), (768, 768), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }]]),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/train_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/validation_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../dataset/test.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0005,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=14)\ncheckpoint_config = dict(max_keep_ckpts=3, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nseed = 42\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn_1x_coco-custom_trash'\nfp16 = dict(loss_scale=dict(init_scale=512.0))\ndevice = 'cuda'\n", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 5e-05, "memory": 16994, "data_time": 0.06935, "loss_rpn_cls": 0.43389, "loss_rpn_bbox": 0.04125, "s0.loss_cls": 0.6682, "s0.acc": 85.69775, "s0.loss_bbox": 0.14554, "s1.loss_cls": 0.36406, "s1.acc": 81.77441, "s1.loss_bbox": 0.01993, "s2.loss_cls": 0.18228, "s2.acc": 81.04956, "s2.loss_bbox": 0.00201, "loss": 1.85716, "time": 1.36285}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0001, "memory": 16994, "data_time": 0.01899, "loss_rpn_cls": 0.12566, "loss_rpn_bbox": 0.04163, "s0.loss_cls": 0.30315, "s0.acc": 93.30933, "s0.loss_bbox": 0.25964, "s1.loss_cls": 0.08205, "s1.acc": 97.11963, "s1.loss_bbox": 0.0337, "s2.loss_cls": 0.02455, "s2.acc": 98.5481, "s2.loss_bbox": 0.0033, "loss": 0.87368, "time": 1.32636}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00015, "memory": 16994, "data_time": 0.0181, "loss_rpn_cls": 0.08704, "loss_rpn_bbox": 0.04217, "s0.loss_cls": 0.2945, "s0.acc": 92.67188, "s0.loss_bbox": 0.29239, "s1.loss_cls": 0.08567, "s1.acc": 96.34766, "s1.loss_bbox": 0.04709, "s2.loss_cls": 0.02392, "s2.acc": 98.31982, "s2.loss_bbox": 0.00492, "loss": 0.87769, "time": 1.31155}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.0002, "memory": 16994, "data_time": 0.01879, "loss_rpn_cls": 0.08663, "loss_rpn_bbox": 0.04374, "s0.loss_cls": 0.31224, "s0.acc": 91.72827, "s0.loss_bbox": 0.32092, "s1.loss_cls": 0.12143, "s1.acc": 93.73633, "s1.loss_bbox": 0.08674, "s2.loss_cls": 0.03792, "s2.acc": 96.51221, "s2.loss_bbox": 0.01459, "loss": 1.0242, "time": 1.33963}
{"mode": "val", "epoch": 1, "iter": 977, "lr": 0.00024, "bbox_mAP": 0.093, "bbox_mAP_50": 0.207, "bbox_mAP_75": 0.075, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.008, "bbox_mAP_l": 0.116, "bbox_mAP_copypaste": "0.093 0.207 0.075 0.000 0.008 0.116"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00029, "memory": 17007, "data_time": 0.07002, "loss_rpn_cls": 0.06793, "loss_rpn_bbox": 0.03815, "s0.loss_cls": 0.27397, "s0.acc": 92.42871, "s0.loss_bbox": 0.29071, "s1.loss_cls": 0.12363, "s1.acc": 93.04017, "s1.loss_bbox": 0.10471, "s2.loss_cls": 0.05094, "s2.acc": 94.2802, "s2.loss_bbox": 0.03169, "loss": 0.98173, "time": 1.36819}
{"config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(256, 256), (512, 512), (768, 768), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }]]),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/train_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/validation_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../dataset/test.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0005,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=14)\ncheckpoint_config = dict(max_keep_ckpts=3, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nseed = 42\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn_1x_coco-custom_trash'\nfp16 = dict(loss_scale=dict(init_scale=512.0))\ndevice = 'cuda'\n", "hook_msgs": {}}
{"config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(256, 256), (512, 512), (768, 768), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }]]),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=12,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/train_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/validation_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../dataset/test.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0005,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=14)\ncheckpoint_config = dict(max_keep_ckpts=3, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nseed = 42\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn_1x_coco-custom_trash'\nfp16 = dict(loss_scale=dict(init_scale=512.0))\ndevice = 'cuda'\n", "hook_msgs": {}}
{"config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(256, 256), (512, 512), (768, 768), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }]]),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/train_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/validation_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../dataset/test.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0005,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=14)\ncheckpoint_config = dict(max_keep_ckpts=3, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nseed = 42\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn_1x_coco-custom_trash'\nfp16 = dict(loss_scale=dict(init_scale=512.0))\ndevice = 'cuda'\n", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 5e-05, "memory": 18998, "data_time": 0.06301, "loss_rpn_cls": 0.41123, "loss_rpn_bbox": 0.03564, "s0.loss_cls": 0.76359, "s0.acc": 82.04199, "s0.loss_bbox": 0.15667, "s1.loss_cls": 0.26635, "s1.acc": 92.91309, "s1.loss_bbox": 0.0198, "s2.loss_cls": 0.18745, "s2.acc": 80.45459, "s2.loss_bbox": 0.00197, "loss": 1.8427, "time": 1.17403}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0001, "memory": 18998, "data_time": 0.01467, "loss_rpn_cls": 0.1061, "loss_rpn_bbox": 0.03511, "s0.loss_cls": 0.33015, "s0.acc": 92.7998, "s0.loss_bbox": 0.28355, "s1.loss_cls": 0.08497, "s1.acc": 97.0415, "s1.loss_bbox": 0.03611, "s2.loss_cls": 0.02495, "s2.acc": 98.5874, "s2.loss_bbox": 0.00336, "loss": 0.9043, "time": 1.13658}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00015, "memory": 18998, "data_time": 0.01495, "loss_rpn_cls": 0.07493, "loss_rpn_bbox": 0.03487, "s0.loss_cls": 0.29799, "s0.acc": 92.68896, "s0.loss_bbox": 0.29203, "s1.loss_cls": 0.08109, "s1.acc": 96.69727, "s1.loss_bbox": 0.04227, "s2.loss_cls": 0.02235, "s2.acc": 98.50293, "s2.loss_bbox": 0.00415, "loss": 0.84967, "time": 1.12372}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.0002, "memory": 18998, "data_time": 0.01474, "loss_rpn_cls": 0.07315, "loss_rpn_bbox": 0.04081, "s0.loss_cls": 0.32446, "s0.acc": 92.11865, "s0.loss_bbox": 0.29935, "s1.loss_cls": 0.1132, "s1.acc": 94.98975, "s1.loss_bbox": 0.0657, "s2.loss_cls": 0.03391, "s2.acc": 97.44531, "s2.loss_bbox": 0.0091, "loss": 0.95968, "time": 1.12681}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00025, "memory": 18998, "data_time": 0.01499, "loss_rpn_cls": 0.05698, "loss_rpn_bbox": 0.03144, "s0.loss_cls": 0.2906, "s0.acc": 92.59131, "s0.loss_bbox": 0.27798, "s1.loss_cls": 0.12151, "s1.acc": 93.84766, "s1.loss_bbox": 0.08729, "s2.loss_cls": 0.04088, "s2.acc": 96.07666, "s2.loss_bbox": 0.01839, "loss": 0.92506, "time": 1.13466}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.0003, "memory": 19209, "data_time": 0.015, "loss_rpn_cls": 0.06257, "loss_rpn_bbox": 0.03229, "s0.loss_cls": 0.30375, "s0.acc": 91.896, "s0.loss_bbox": 0.29353, "s1.loss_cls": 0.13875, "s1.acc": 92.59814, "s1.loss_bbox": 0.09995, "s2.loss_cls": 0.05385, "s2.acc": 94.51074, "s2.loss_bbox": 0.02693, "loss": 1.01162, "time": 1.13194}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00035, "memory": 19209, "data_time": 0.01474, "loss_rpn_cls": 0.07162, "loss_rpn_bbox": 0.03486, "s0.loss_cls": 0.32855, "s0.acc": 91.38281, "s0.loss_bbox": 0.30466, "s1.loss_cls": 0.14592, "s1.acc": 92.19189, "s1.loss_bbox": 0.10502, "s2.loss_cls": 0.05822, "s2.acc": 94.0, "s2.loss_bbox": 0.02977, "loss": 1.07861, "time": 1.12342}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0004, "memory": 19209, "data_time": 0.01466, "loss_rpn_cls": 0.06892, "loss_rpn_bbox": 0.03793, "s0.loss_cls": 0.33803, "s0.acc": 91.2749, "s0.loss_bbox": 0.30646, "s1.loss_cls": 0.1555, "s1.acc": 91.78587, "s1.loss_bbox": 0.10909, "s2.loss_cls": 0.06212, "s2.acc": 93.46056, "s2.loss_bbox": 0.03119, "loss": 1.10924, "time": 1.11844}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00045, "memory": 19209, "data_time": 0.01507, "loss_rpn_cls": 0.07378, "loss_rpn_bbox": 0.03851, "s0.loss_cls": 0.32471, "s0.acc": 91.74854, "s0.loss_bbox": 0.28282, "s1.loss_cls": 0.14854, "s1.acc": 92.30969, "s1.loss_bbox": 0.10101, "s2.loss_cls": 0.05873, "s2.acc": 93.9257, "s2.loss_bbox": 0.02906, "loss": 1.05716, "time": 1.12096}
{"mode": "val", "epoch": 1, "iter": 977, "lr": 0.00049, "bbox_mAP": 0.063, "bbox_mAP_50": 0.13, "bbox_mAP_75": 0.056, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.008, "bbox_mAP_l": 0.079, "bbox_mAP_copypaste": "0.063 0.130 0.056 0.000 0.008 0.079"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.0005, "memory": 19209, "data_time": 0.06455, "loss_rpn_cls": 0.05645, "loss_rpn_bbox": 0.0321, "s0.loss_cls": 0.30171, "s0.acc": 92.11182, "s0.loss_bbox": 0.27441, "s1.loss_cls": 0.14284, "s1.acc": 92.4043, "s1.loss_bbox": 0.1026, "s2.loss_cls": 0.05953, "s2.acc": 93.68038, "s2.loss_bbox": 0.03246, "loss": 1.0021, "time": 1.17661}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0005, "memory": 19209, "data_time": 0.01636, "loss_rpn_cls": 0.06997, "loss_rpn_bbox": 0.03491, "s0.loss_cls": 0.3157, "s0.acc": 91.92432, "s0.loss_bbox": 0.26675, "s1.loss_cls": 0.14642, "s1.acc": 92.19622, "s1.loss_bbox": 0.09841, "s2.loss_cls": 0.06144, "s2.acc": 93.45405, "s2.loss_bbox": 0.03102, "loss": 1.02463, "time": 1.13975}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.0005, "memory": 19209, "data_time": 0.01666, "loss_rpn_cls": 0.06708, "loss_rpn_bbox": 0.03978, "s0.loss_cls": 0.34336, "s0.acc": 91.35254, "s0.loss_bbox": 0.29118, "s1.loss_cls": 0.15794, "s1.acc": 91.64283, "s1.loss_bbox": 0.10673, "s2.loss_cls": 0.06595, "s2.acc": 92.83527, "s2.loss_bbox": 0.03385, "loss": 1.10587, "time": 1.1295}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0005, "memory": 19209, "data_time": 0.01646, "loss_rpn_cls": 0.06044, "loss_rpn_bbox": 0.0311, "s0.loss_cls": 0.30237, "s0.acc": 92.05176, "s0.loss_bbox": 0.26019, "s1.loss_cls": 0.14711, "s1.acc": 91.88655, "s1.loss_bbox": 0.09989, "s2.loss_cls": 0.0637, "s2.acc": 92.92855, "s2.loss_bbox": 0.03287, "loss": 0.99768, "time": 1.13104}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.0005, "memory": 19209, "data_time": 0.01693, "loss_rpn_cls": 0.0609, "loss_rpn_bbox": 0.03112, "s0.loss_cls": 0.31589, "s0.acc": 91.82275, "s0.loss_bbox": 0.26775, "s1.loss_cls": 0.1569, "s1.acc": 91.63822, "s1.loss_bbox": 0.10232, "s2.loss_cls": 0.06884, "s2.acc": 92.50928, "s2.loss_bbox": 0.03419, "loss": 1.0379, "time": 1.1187}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.0005, "memory": 19209, "data_time": 0.017, "loss_rpn_cls": 0.05728, "loss_rpn_bbox": 0.03007, "s0.loss_cls": 0.30195, "s0.acc": 91.78223, "s0.loss_bbox": 0.27314, "s1.loss_cls": 0.1457, "s1.acc": 91.74087, "s1.loss_bbox": 0.10759, "s2.loss_cls": 0.06431, "s2.acc": 92.53818, "s2.loss_bbox": 0.03762, "loss": 1.01767, "time": 1.12848}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.0005, "memory": 19209, "data_time": 0.01702, "loss_rpn_cls": 0.05832, "loss_rpn_bbox": 0.02987, "s0.loss_cls": 0.30104, "s0.acc": 92.09961, "s0.loss_bbox": 0.26331, "s1.loss_cls": 0.14506, "s1.acc": 92.16035, "s1.loss_bbox": 0.1004, "s2.loss_cls": 0.06301, "s2.acc": 93.06819, "s2.loss_bbox": 0.03372, "loss": 0.99472, "time": 1.12988}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.0005, "memory": 19209, "data_time": 0.01756, "loss_rpn_cls": 0.05943, "loss_rpn_bbox": 0.03066, "s0.loss_cls": 0.31227, "s0.acc": 91.42188, "s0.loss_bbox": 0.2841, "s1.loss_cls": 0.15093, "s1.acc": 91.48499, "s1.loss_bbox": 0.10753, "s2.loss_cls": 0.06544, "s2.acc": 92.60667, "s2.loss_bbox": 0.03504, "loss": 1.0454, "time": 1.17408}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.0005, "memory": 19209, "data_time": 0.01652, "loss_rpn_cls": 0.06056, "loss_rpn_bbox": 0.03226, "s0.loss_cls": 0.32728, "s0.acc": 91.27734, "s0.loss_bbox": 0.2835, "s1.loss_cls": 0.15884, "s1.acc": 91.25747, "s1.loss_bbox": 0.11077, "s2.loss_cls": 0.06966, "s2.acc": 92.22849, "s2.loss_bbox": 0.03795, "loss": 1.08082, "time": 1.13809}
{"config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(256, 256), (512, 512), (768, 768), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }]]),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/train_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/validation_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../dataset/test.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0005,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=14)\ncheckpoint_config = dict(max_keep_ckpts=3, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='WandbLoggerHook',\n            interval=1000,\n            init_kwargs=dict(\n                project='Object Detection',\n                entity='boostcamp-cv-13',\n                name='cascade_rcnn_r50_fpn_50e_coco-custom'),\n            log_artifact=True)\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nseed = 42\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn_1x_coco-custom_trash'\nfp16 = dict(loss_scale=dict(init_scale=512.0))\ndevice = 'cuda'\n", "hook_msgs": {}}
{"config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(256, 256), (512, 512), (768, 768), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }]]),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/train_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/validation_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../dataset/test.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0005,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=14)\ncheckpoint_config = dict(max_keep_ckpts=3, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='WandbLoggerHook',\n            interval=1000,\n            init_kwargs=dict(\n                project='Object Detection',\n                entity='boostcamp-cv-13',\n                name='cascade_rcnn_r50_fpn_50e_coco-custom'),\n            log_artifact=True)\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nseed = 42\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn_1x_coco-custom_trash'\nfp16 = dict(loss_scale=dict(init_scale=512.0))\ndevice = 'cuda'\n", "hook_msgs": {}}
{"config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(256, 256), (512, 512), (768, 768), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }]]),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/train_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/validation_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../dataset/test.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0005,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=14)\ncheckpoint_config = dict(max_keep_ckpts=3, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='WandbLoggerHook',\n            interval=1000,\n            init_kwargs=dict(\n                project='Object Detection',\n                entity='boostcamp-cv-13',\n                name='cascade_rcnn_r50_fpn_50e_coco-custom'),\n            log_artifact=True)\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nseed = 42\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn_1x_coco-custom_trash'\nfp16 = dict(loss_scale=dict(init_scale=512.0))\ndevice = 'cuda'\n", "hook_msgs": {}}
{"config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(256, 256), (512, 512), (768, 768), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }]]),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/train_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/validation_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../dataset/test.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0005,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=14)\ncheckpoint_config = dict(max_keep_ckpts=3, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='WandbLoggerHook',\n            interval=1000,\n            init_kwargs=dict(\n                project='Object Detection',\n                entity='boostcamp-cv-13',\n                name='cascade_rcnn_r50_fpn_50e_coco-custom'),\n            log_artifact=True)\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nseed = 42\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn_1x_coco-custom_trash'\nfp16 = dict(loss_scale=dict(init_scale=512.0))\ndevice = 'cuda'\n", "hook_msgs": {}}
{"config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(256, 256), (512, 512), (768, 768), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }]]),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/train_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/validation_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../dataset/test.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0005,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=14)\ncheckpoint_config = dict(max_keep_ckpts=3, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='WandbLoggerHook',\n            interval=1000,\n            init_kwargs=dict(\n                project='Object Detection',\n                entity='boostcamp-cv-13',\n                name='cascade_rcnn_r50_fpn_50e_coco-custom'),\n            log_artifact=True)\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nseed = 42\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn_1x_coco-custom_trash'\nfp16 = dict(loss_scale=dict(init_scale=512.0))\ndevice = 'cuda'\n", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 5e-05, "memory": 19005, "data_time": 0.06186, "loss_rpn_cls": 0.43471, "loss_rpn_bbox": 0.03824, "s0.loss_cls": 0.83401, "s0.acc": 79.81836, "s0.loss_bbox": 0.15541, "s1.loss_cls": 0.29667, "s1.acc": 87.35352, "s1.loss_bbox": 0.02022, "s2.loss_cls": 0.13329, "s2.acc": 88.17725, "s2.loss_bbox": 0.00198, "loss": 1.91453, "time": 1.18245}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0001, "memory": 19005, "data_time": 0.01428, "loss_rpn_cls": 0.10592, "loss_rpn_bbox": 0.03558, "s0.loss_cls": 0.34168, "s0.acc": 92.76416, "s0.loss_bbox": 0.28325, "s1.loss_cls": 0.08789, "s1.acc": 96.99316, "s1.loss_bbox": 0.03605, "s2.loss_cls": 0.02571, "s2.acc": 98.5332, "s2.loss_bbox": 0.00341, "loss": 0.91949, "time": 1.13485}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00015, "memory": 19005, "data_time": 0.01432, "loss_rpn_cls": 0.08518, "loss_rpn_bbox": 0.03574, "s0.loss_cls": 0.30037, "s0.acc": 92.79443, "s0.loss_bbox": 0.28481, "s1.loss_cls": 0.07924, "s1.acc": 96.87061, "s1.loss_bbox": 0.03908, "s2.loss_cls": 0.02239, "s2.acc": 98.55371, "s2.loss_bbox": 0.00386, "loss": 0.85069, "time": 1.13009}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.0002, "memory": 19005, "data_time": 0.01469, "loss_rpn_cls": 0.06878, "loss_rpn_bbox": 0.03551, "s0.loss_cls": 0.30445, "s0.acc": 92.49707, "s0.loss_bbox": 0.28842, "s1.loss_cls": 0.10258, "s1.acc": 95.32129, "s1.loss_bbox": 0.06185, "s2.loss_cls": 0.02968, "s2.acc": 97.71143, "s2.loss_bbox": 0.00832, "loss": 0.89959, "time": 1.12995}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00025, "memory": 19005, "data_time": 0.01453, "loss_rpn_cls": 0.06537, "loss_rpn_bbox": 0.03289, "s0.loss_cls": 0.31395, "s0.acc": 91.85791, "s0.loss_bbox": 0.29882, "s1.loss_cls": 0.13124, "s1.acc": 93.32715, "s1.loss_bbox": 0.09094, "s2.loss_cls": 0.04389, "s2.acc": 95.8916, "s2.loss_bbox": 0.0186, "loss": 0.9957, "time": 1.13152}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.0003, "memory": 19005, "data_time": 0.01463, "loss_rpn_cls": 0.06047, "loss_rpn_bbox": 0.03228, "s0.loss_cls": 0.30861, "s0.acc": 91.87158, "s0.loss_bbox": 0.29846, "s1.loss_cls": 0.13538, "s1.acc": 92.74316, "s1.loss_bbox": 0.09946, "s2.loss_cls": 0.05149, "s2.acc": 94.78271, "s2.loss_bbox": 0.02498, "loss": 1.01114, "time": 1.14508}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00035, "memory": 19005, "data_time": 0.0147, "loss_rpn_cls": 0.0793, "loss_rpn_bbox": 0.03888, "s0.loss_cls": 0.33518, "s0.acc": 91.4209, "s0.loss_bbox": 0.31307, "s1.loss_cls": 0.1502, "s1.acc": 92.20482, "s1.loss_bbox": 0.10514, "s2.loss_cls": 0.05978, "s2.acc": 93.94607, "s2.loss_bbox": 0.02912, "loss": 1.11068, "time": 1.12762}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0004, "memory": 19005, "data_time": 0.01524, "loss_rpn_cls": 0.05937, "loss_rpn_bbox": 0.03186, "s0.loss_cls": 0.30789, "s0.acc": 92.19971, "s0.loss_bbox": 0.27138, "s1.loss_cls": 0.14345, "s1.acc": 92.54133, "s1.loss_bbox": 0.0987, "s2.loss_cls": 0.05776, "s2.acc": 94.07214, "s2.loss_bbox": 0.02896, "loss": 0.99937, "time": 1.14212}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00045, "memory": 19005, "data_time": 0.01515, "loss_rpn_cls": 0.07188, "loss_rpn_bbox": 0.03766, "s0.loss_cls": 0.33808, "s0.acc": 91.46533, "s0.loss_bbox": 0.29235, "s1.loss_cls": 0.15341, "s1.acc": 91.91602, "s1.loss_bbox": 0.105, "s2.loss_cls": 0.06261, "s2.acc": 93.44971, "s2.loss_bbox": 0.03115, "loss": 1.09214, "time": 1.15106}
{"mode": "val", "epoch": 1, "iter": 977, "lr": 0.00049, "bbox_mAP": 0.076, "bbox_mAP_50": 0.143, "bbox_mAP_75": 0.076, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.011, "bbox_mAP_l": 0.094, "bbox_mAP_copypaste": "0.076 0.143 0.076 0.003 0.011 0.094"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.0005, "memory": 19005, "data_time": 0.06365, "loss_rpn_cls": 0.06175, "loss_rpn_bbox": 0.03061, "s0.loss_cls": 0.29987, "s0.acc": 92.51123, "s0.loss_bbox": 0.24813, "s1.loss_cls": 0.14205, "s1.acc": 92.55266, "s1.loss_bbox": 0.09252, "s2.loss_cls": 0.05903, "s2.acc": 93.70028, "s2.loss_bbox": 0.02975, "loss": 0.9637, "time": 1.18267}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0005, "memory": 19005, "data_time": 0.01481, "loss_rpn_cls": 0.06017, "loss_rpn_bbox": 0.03592, "s0.loss_cls": 0.32559, "s0.acc": 91.50293, "s0.loss_bbox": 0.28471, "s1.loss_cls": 0.15384, "s1.acc": 91.50807, "s1.loss_bbox": 0.10819, "s2.loss_cls": 0.06538, "s2.acc": 92.82518, "s2.loss_bbox": 0.03456, "loss": 1.06835, "time": 1.13338}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.0005, "memory": 19005, "data_time": 0.0159, "loss_rpn_cls": 0.06304, "loss_rpn_bbox": 0.03129, "s0.loss_cls": 0.29808, "s0.acc": 92.22168, "s0.loss_bbox": 0.25036, "s1.loss_cls": 0.14064, "s1.acc": 92.35673, "s1.loss_bbox": 0.09513, "s2.loss_cls": 0.05989, "s2.acc": 93.34924, "s2.loss_bbox": 0.03102, "loss": 0.96945, "time": 1.13705}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0005, "memory": 19005, "data_time": 0.01576, "loss_rpn_cls": 0.04925, "loss_rpn_bbox": 0.02712, "s0.loss_cls": 0.30436, "s0.acc": 92.08398, "s0.loss_bbox": 0.27179, "s1.loss_cls": 0.14405, "s1.acc": 92.22691, "s1.loss_bbox": 0.10319, "s2.loss_cls": 0.06089, "s2.acc": 93.34957, "s2.loss_bbox": 0.03392, "loss": 0.99457, "time": 1.14444}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.0005, "memory": 19005, "data_time": 0.0158, "loss_rpn_cls": 0.06061, "loss_rpn_bbox": 0.03469, "s0.loss_cls": 0.35434, "s0.acc": 90.56982, "s0.loss_bbox": 0.31007, "s1.loss_cls": 0.16848, "s1.acc": 90.86913, "s1.loss_bbox": 0.11634, "s2.loss_cls": 0.07351, "s2.acc": 91.93673, "s2.loss_bbox": 0.03829, "loss": 1.15633, "time": 1.13298}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.0005, "memory": 19005, "data_time": 0.01573, "loss_rpn_cls": 0.06102, "loss_rpn_bbox": 0.03176, "s0.loss_cls": 0.30497, "s0.acc": 91.85449, "s0.loss_bbox": 0.27227, "s1.loss_cls": 0.14361, "s1.acc": 91.88858, "s1.loss_bbox": 0.10426, "s2.loss_cls": 0.06171, "s2.acc": 93.05933, "s2.loss_bbox": 0.03361, "loss": 1.01321, "time": 1.12693}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.0005, "memory": 19005, "data_time": 0.01612, "loss_rpn_cls": 0.0578, "loss_rpn_bbox": 0.03219, "s0.loss_cls": 0.32835, "s0.acc": 91.40576, "s0.loss_bbox": 0.28894, "s1.loss_cls": 0.15644, "s1.acc": 91.46219, "s1.loss_bbox": 0.11155, "s2.loss_cls": 0.06701, "s2.acc": 92.67874, "s2.loss_bbox": 0.0364, "loss": 1.07869, "time": 1.13658}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.0005, "memory": 19005, "data_time": 0.01629, "loss_rpn_cls": 0.05436, "loss_rpn_bbox": 0.02783, "s0.loss_cls": 0.31128, "s0.acc": 91.70654, "s0.loss_bbox": 0.27629, "s1.loss_cls": 0.15062, "s1.acc": 91.56526, "s1.loss_bbox": 0.10747, "s2.loss_cls": 0.06615, "s2.acc": 92.35346, "s2.loss_bbox": 0.03631, "loss": 1.0303, "time": 1.13834}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.0005, "memory": 19005, "data_time": 0.01657, "loss_rpn_cls": 0.06345, "loss_rpn_bbox": 0.03463, "s0.loss_cls": 0.32951, "s0.acc": 91.18896, "s0.loss_bbox": 0.28627, "s1.loss_cls": 0.16269, "s1.acc": 90.9207, "s1.loss_bbox": 0.11001, "s2.loss_cls": 0.07168, "s2.acc": 91.96391, "s2.loss_bbox": 0.03634, "loss": 1.09457, "time": 1.13201}
{"mode": "val", "epoch": 2, "iter": 977, "lr": 0.0005, "bbox_mAP": 0.112, "bbox_mAP_50": 0.189, "bbox_mAP_75": 0.12, "bbox_mAP_s": 0.004, "bbox_mAP_m": 0.018, "bbox_mAP_l": 0.136, "bbox_mAP_copypaste": "0.112 0.189 0.120 0.004 0.018 0.136"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.0005, "memory": 19005, "data_time": 0.06376, "loss_rpn_cls": 0.04515, "loss_rpn_bbox": 0.02781, "s0.loss_cls": 0.293, "s0.acc": 91.84277, "s0.loss_bbox": 0.26644, "s1.loss_cls": 0.14406, "s1.acc": 91.66217, "s1.loss_bbox": 0.10781, "s2.loss_cls": 0.0653, "s2.acc": 92.26382, "s2.loss_bbox": 0.03811, "loss": 0.98767, "time": 1.18296}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.0005, "memory": 19005, "data_time": 0.01581, "loss_rpn_cls": 0.05099, "loss_rpn_bbox": 0.03353, "s0.loss_cls": 0.3067, "s0.acc": 91.61719, "s0.loss_bbox": 0.27053, "s1.loss_cls": 0.15337, "s1.acc": 91.36667, "s1.loss_bbox": 0.10757, "s2.loss_cls": 0.06826, "s2.acc": 92.17362, "s2.loss_bbox": 0.03725, "loss": 1.02821, "time": 1.13913}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.0005, "memory": 19005, "data_time": 0.01555, "loss_rpn_cls": 0.04848, "loss_rpn_bbox": 0.02769, "s0.loss_cls": 0.31498, "s0.acc": 91.44287, "s0.loss_bbox": 0.2827, "s1.loss_cls": 0.15492, "s1.acc": 91.31483, "s1.loss_bbox": 0.10996, "s2.loss_cls": 0.06847, "s2.acc": 92.23429, "s2.loss_bbox": 0.0368, "loss": 1.04399, "time": 1.13717}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.0005, "memory": 19005, "data_time": 0.01531, "loss_rpn_cls": 0.04539, "loss_rpn_bbox": 0.02762, "s0.loss_cls": 0.3036, "s0.acc": 91.66797, "s0.loss_bbox": 0.26689, "s1.loss_cls": 0.15235, "s1.acc": 91.32824, "s1.loss_bbox": 0.10778, "s2.loss_cls": 0.06925, "s2.acc": 92.01767, "s2.loss_bbox": 0.03703, "loss": 1.00992, "time": 1.13009}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.0005, "memory": 19005, "data_time": 0.0147, "loss_rpn_cls": 0.04914, "loss_rpn_bbox": 0.02864, "s0.loss_cls": 0.30297, "s0.acc": 91.51465, "s0.loss_bbox": 0.27455, "s1.loss_cls": 0.15066, "s1.acc": 91.3079, "s1.loss_bbox": 0.10985, "s2.loss_cls": 0.06791, "s2.acc": 92.05246, "s2.loss_bbox": 0.03819, "loss": 1.0219, "time": 1.12875}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.0005, "memory": 19005, "data_time": 0.01515, "loss_rpn_cls": 0.04827, "loss_rpn_bbox": 0.03087, "s0.loss_cls": 0.29587, "s0.acc": 91.61523, "s0.loss_bbox": 0.27266, "s1.loss_cls": 0.14825, "s1.acc": 91.30878, "s1.loss_bbox": 0.10696, "s2.loss_cls": 0.06704, "s2.acc": 91.97078, "s2.loss_bbox": 0.03656, "loss": 1.00648, "time": 1.13583}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.0005, "memory": 19005, "data_time": 0.0152, "loss_rpn_cls": 0.0455, "loss_rpn_bbox": 0.02597, "s0.loss_cls": 0.27569, "s0.acc": 92.30225, "s0.loss_bbox": 0.25214, "s1.loss_cls": 0.13729, "s1.acc": 91.99445, "s1.loss_bbox": 0.10002, "s2.loss_cls": 0.06175, "s2.acc": 92.67113, "s2.loss_bbox": 0.03471, "loss": 0.93308, "time": 1.12002}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0005, "memory": 19005, "data_time": 0.01583, "loss_rpn_cls": 0.05055, "loss_rpn_bbox": 0.02674, "s0.loss_cls": 0.29641, "s0.acc": 91.81982, "s0.loss_bbox": 0.258, "s1.loss_cls": 0.14759, "s1.acc": 91.42044, "s1.loss_bbox": 0.10522, "s2.loss_cls": 0.06771, "s2.acc": 91.87316, "s2.loss_bbox": 0.0377, "loss": 0.98991, "time": 1.13498}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.0005, "memory": 19005, "data_time": 0.01616, "loss_rpn_cls": 0.05365, "loss_rpn_bbox": 0.02788, "s0.loss_cls": 0.30445, "s0.acc": 91.99902, "s0.loss_bbox": 0.25163, "s1.loss_cls": 0.14751, "s1.acc": 91.93039, "s1.loss_bbox": 0.0989, "s2.loss_cls": 0.0661, "s2.acc": 92.66181, "s2.loss_bbox": 0.03528, "loss": 0.9854, "time": 1.1493}
{"mode": "val", "epoch": 3, "iter": 977, "lr": 0.0005, "bbox_mAP": 0.161, "bbox_mAP_50": 0.278, "bbox_mAP_75": 0.166, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.019, "bbox_mAP_l": 0.194, "bbox_mAP_copypaste": "0.161 0.278 0.166 0.000 0.019 0.194"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.0005, "memory": 19005, "data_time": 0.0641, "loss_rpn_cls": 0.03796, "loss_rpn_bbox": 0.02827, "s0.loss_cls": 0.26145, "s0.acc": 92.4917, "s0.loss_bbox": 0.2438, "s1.loss_cls": 0.1322, "s1.acc": 92.09205, "s1.loss_bbox": 0.09916, "s2.loss_cls": 0.06226, "s2.acc": 92.34124, "s2.loss_bbox": 0.03601, "loss": 0.90112, "time": 1.19959}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.0005, "memory": 19005, "data_time": 0.01572, "loss_rpn_cls": 0.03968, "loss_rpn_bbox": 0.02593, "s0.loss_cls": 0.27922, "s0.acc": 91.89746, "s0.loss_bbox": 0.25578, "s1.loss_cls": 0.14252, "s1.acc": 91.4353, "s1.loss_bbox": 0.10602, "s2.loss_cls": 0.06609, "s2.acc": 91.9227, "s2.loss_bbox": 0.03904, "loss": 0.95429, "time": 1.12479}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.0005, "memory": 19005, "data_time": 0.01599, "loss_rpn_cls": 0.04107, "loss_rpn_bbox": 0.02712, "s0.loss_cls": 0.29101, "s0.acc": 91.80518, "s0.loss_bbox": 0.27871, "s1.loss_cls": 0.14201, "s1.acc": 91.77551, "s1.loss_bbox": 0.11186, "s2.loss_cls": 0.06352, "s2.acc": 92.52714, "s2.loss_bbox": 0.0391, "loss": 0.99441, "time": 1.12853}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.0005, "memory": 19005, "data_time": 0.01662, "loss_rpn_cls": 0.04524, "loss_rpn_bbox": 0.02898, "s0.loss_cls": 0.29064, "s0.acc": 91.73682, "s0.loss_bbox": 0.25763, "s1.loss_cls": 0.14621, "s1.acc": 91.3754, "s1.loss_bbox": 0.10575, "s2.loss_cls": 0.06695, "s2.acc": 92.07848, "s2.loss_bbox": 0.0374, "loss": 0.97879, "time": 1.13037}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.0005, "memory": 19005, "data_time": 0.01672, "loss_rpn_cls": 0.04775, "loss_rpn_bbox": 0.02926, "s0.loss_cls": 0.30463, "s0.acc": 91.40039, "s0.loss_bbox": 0.27091, "s1.loss_cls": 0.15242, "s1.acc": 91.08005, "s1.loss_bbox": 0.10734, "s2.loss_cls": 0.07067, "s2.acc": 91.59296, "s2.loss_bbox": 0.03728, "loss": 1.02026, "time": 1.15052}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.0005, "memory": 19005, "data_time": 0.0166, "loss_rpn_cls": 0.0429, "loss_rpn_bbox": 0.02646, "s0.loss_cls": 0.28217, "s0.acc": 91.96484, "s0.loss_bbox": 0.25704, "s1.loss_cls": 0.14156, "s1.acc": 91.64909, "s1.loss_bbox": 0.10312, "s2.loss_cls": 0.06521, "s2.acc": 92.17555, "s2.loss_bbox": 0.03704, "loss": 0.9555, "time": 1.1327}
{"mode": "train", "epoch": 4, "iter": 350, "lr": 0.0005, "memory": 19005, "data_time": 0.017, "loss_rpn_cls": 0.03801, "loss_rpn_bbox": 0.02686, "s0.loss_cls": 0.28802, "s0.acc": 91.83936, "s0.loss_bbox": 0.26045, "s1.loss_cls": 0.1443, "s1.acc": 91.52859, "s1.loss_bbox": 0.10429, "s2.loss_cls": 0.06703, "s2.acc": 91.98224, "s2.loss_bbox": 0.03846, "loss": 0.9674, "time": 1.12617}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.0005, "memory": 19005, "data_time": 0.01654, "loss_rpn_cls": 0.04897, "loss_rpn_bbox": 0.02964, "s0.loss_cls": 0.28564, "s0.acc": 91.93896, "s0.loss_bbox": 0.25383, "s1.loss_cls": 0.14514, "s1.acc": 91.45371, "s1.loss_bbox": 0.10204, "s2.loss_cls": 0.06666, "s2.acc": 92.07249, "s2.loss_bbox": 0.03662, "loss": 0.96853, "time": 1.12643}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 0.0005, "memory": 19005, "data_time": 0.01705, "loss_rpn_cls": 0.04122, "loss_rpn_bbox": 0.02573, "s0.loss_cls": 0.30174, "s0.acc": 91.46436, "s0.loss_bbox": 0.26446, "s1.loss_cls": 0.14949, "s1.acc": 91.31566, "s1.loss_bbox": 0.10579, "s2.loss_cls": 0.0682, "s2.acc": 91.95996, "s2.loss_bbox": 0.03788, "loss": 0.99452, "time": 1.14787}
{"mode": "val", "epoch": 4, "iter": 977, "lr": 0.0005, "bbox_mAP": 0.195, "bbox_mAP_50": 0.314, "bbox_mAP_75": 0.206, "bbox_mAP_s": 0.008, "bbox_mAP_m": 0.036, "bbox_mAP_l": 0.232, "bbox_mAP_copypaste": "0.195 0.314 0.206 0.008 0.036 0.232"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.0005, "memory": 19005, "data_time": 0.06415, "loss_rpn_cls": 0.03767, "loss_rpn_bbox": 0.02756, "s0.loss_cls": 0.28091, "s0.acc": 91.75391, "s0.loss_bbox": 0.26564, "s1.loss_cls": 0.14032, "s1.acc": 91.4853, "s1.loss_bbox": 0.10807, "s2.loss_cls": 0.06564, "s2.acc": 91.86079, "s2.loss_bbox": 0.03929, "loss": 0.96511, "time": 1.19281}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.0005, "memory": 19005, "data_time": 0.01582, "loss_rpn_cls": 0.03557, "loss_rpn_bbox": 0.02451, "s0.loss_cls": 0.27489, "s0.acc": 92.13477, "s0.loss_bbox": 0.24538, "s1.loss_cls": 0.14113, "s1.acc": 91.6799, "s1.loss_bbox": 0.10111, "s2.loss_cls": 0.06589, "s2.acc": 92.05856, "s2.loss_bbox": 0.03722, "loss": 0.9257, "time": 1.12542}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.0005, "memory": 19005, "data_time": 0.01556, "loss_rpn_cls": 0.03734, "loss_rpn_bbox": 0.0248, "s0.loss_cls": 0.26199, "s0.acc": 92.3335, "s0.loss_bbox": 0.25021, "s1.loss_cls": 0.13101, "s1.acc": 92.1571, "s1.loss_bbox": 0.10513, "s2.loss_cls": 0.06224, "s2.acc": 92.4564, "s2.loss_bbox": 0.03986, "loss": 0.91256, "time": 1.13026}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.0005, "memory": 19005, "data_time": 0.01666, "loss_rpn_cls": 0.03916, "loss_rpn_bbox": 0.02882, "s0.loss_cls": 0.29425, "s0.acc": 91.75635, "s0.loss_bbox": 0.26349, "s1.loss_cls": 0.14531, "s1.acc": 91.66111, "s1.loss_bbox": 0.10628, "s2.loss_cls": 0.06683, "s2.acc": 92.24884, "s2.loss_bbox": 0.03847, "loss": 0.98262, "time": 1.12961}
{"mode": "train", "epoch": 5, "iter": 250, "lr": 0.0005, "memory": 19005, "data_time": 0.016, "loss_rpn_cls": 0.04, "loss_rpn_bbox": 0.02538, "s0.loss_cls": 0.29569, "s0.acc": 91.41943, "s0.loss_bbox": 0.27419, "s1.loss_cls": 0.15139, "s1.acc": 91.01996, "s1.loss_bbox": 0.11263, "s2.loss_cls": 0.07009, "s2.acc": 91.53863, "s2.loss_bbox": 0.04081, "loss": 1.01018, "time": 1.12526}
{"mode": "train", "epoch": 5, "iter": 300, "lr": 0.0005, "memory": 19005, "data_time": 0.01567, "loss_rpn_cls": 0.04399, "loss_rpn_bbox": 0.02888, "s0.loss_cls": 0.28036, "s0.acc": 91.96191, "s0.loss_bbox": 0.26422, "s1.loss_cls": 0.13862, "s1.acc": 91.68911, "s1.loss_bbox": 0.10926, "s2.loss_cls": 0.06435, "s2.acc": 92.09182, "s2.loss_bbox": 0.03956, "loss": 0.96924, "time": 1.11886}
{"mode": "train", "epoch": 5, "iter": 350, "lr": 0.0005, "memory": 19005, "data_time": 0.01591, "loss_rpn_cls": 0.0361, "loss_rpn_bbox": 0.02441, "s0.loss_cls": 0.28104, "s0.acc": 91.98633, "s0.loss_bbox": 0.24574, "s1.loss_cls": 0.14589, "s1.acc": 91.23201, "s1.loss_bbox": 0.10359, "s2.loss_cls": 0.06844, "s2.acc": 91.56927, "s2.loss_bbox": 0.03911, "loss": 0.94431, "time": 1.10625}
{"mode": "train", "epoch": 5, "iter": 400, "lr": 0.0005, "memory": 19005, "data_time": 0.01629, "loss_rpn_cls": 0.03437, "loss_rpn_bbox": 0.02413, "s0.loss_cls": 0.25719, "s0.acc": 92.69873, "s0.loss_bbox": 0.23163, "s1.loss_cls": 0.13163, "s1.acc": 92.25991, "s1.loss_bbox": 0.09623, "s2.loss_cls": 0.0623, "s2.acc": 92.47365, "s2.loss_bbox": 0.03638, "loss": 0.87386, "time": 1.1286}
{"mode": "train", "epoch": 5, "iter": 450, "lr": 0.0005, "memory": 19005, "data_time": 0.01618, "loss_rpn_cls": 0.03816, "loss_rpn_bbox": 0.02711, "s0.loss_cls": 0.27947, "s0.acc": 91.8418, "s0.loss_bbox": 0.25923, "s1.loss_cls": 0.14071, "s1.acc": 91.55435, "s1.loss_bbox": 0.10623, "s2.loss_cls": 0.06473, "s2.acc": 92.05611, "s2.loss_bbox": 0.03862, "loss": 0.95426, "time": 1.12333}
{"mode": "val", "epoch": 5, "iter": 977, "lr": 0.0005, "bbox_mAP": 0.191, "bbox_mAP_50": 0.308, "bbox_mAP_75": 0.203, "bbox_mAP_s": 0.004, "bbox_mAP_m": 0.031, "bbox_mAP_l": 0.23, "bbox_mAP_copypaste": "0.191 0.308 0.203 0.004 0.031 0.230"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.0005, "memory": 19005, "data_time": 0.06462, "loss_rpn_cls": 0.03506, "loss_rpn_bbox": 0.02582, "s0.loss_cls": 0.25451, "s0.acc": 92.49121, "s0.loss_bbox": 0.25059, "s1.loss_cls": 0.12779, "s1.acc": 92.25385, "s1.loss_bbox": 0.10331, "s2.loss_cls": 0.05926, "s2.acc": 92.73976, "s2.loss_bbox": 0.03789, "loss": 0.89423, "time": 1.17123}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.0005, "memory": 19005, "data_time": 0.01633, "loss_rpn_cls": 0.03778, "loss_rpn_bbox": 0.02891, "s0.loss_cls": 0.29196, "s0.acc": 91.44092, "s0.loss_bbox": 0.2773, "s1.loss_cls": 0.14822, "s1.acc": 90.9998, "s1.loss_bbox": 0.11446, "s2.loss_cls": 0.06993, "s2.acc": 91.48639, "s2.loss_bbox": 0.0422, "loss": 1.01075, "time": 1.13498}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.0005, "memory": 19005, "data_time": 0.01616, "loss_rpn_cls": 0.02917, "loss_rpn_bbox": 0.0225, "s0.loss_cls": 0.26071, "s0.acc": 92.16162, "s0.loss_bbox": 0.25103, "s1.loss_cls": 0.13533, "s1.acc": 91.70468, "s1.loss_bbox": 0.10738, "s2.loss_cls": 0.06433, "s2.acc": 92.06888, "s2.loss_bbox": 0.04092, "loss": 0.91137, "time": 1.11587}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.0005, "memory": 19005, "data_time": 0.01608, "loss_rpn_cls": 0.03652, "loss_rpn_bbox": 0.02538, "s0.loss_cls": 0.27046, "s0.acc": 91.99609, "s0.loss_bbox": 0.25969, "s1.loss_cls": 0.13652, "s1.acc": 91.76596, "s1.loss_bbox": 0.10865, "s2.loss_cls": 0.06414, "s2.acc": 92.23247, "s2.loss_bbox": 0.03998, "loss": 0.94134, "time": 1.10752}
{"mode": "train", "epoch": 6, "iter": 250, "lr": 0.0005, "memory": 19005, "data_time": 0.01665, "loss_rpn_cls": 0.03559, "loss_rpn_bbox": 0.02596, "s0.loss_cls": 0.27305, "s0.acc": 92.14258, "s0.loss_bbox": 0.25644, "s1.loss_cls": 0.13594, "s1.acc": 92.0584, "s1.loss_bbox": 0.10538, "s2.loss_cls": 0.06324, "s2.acc": 92.65321, "s2.loss_bbox": 0.03977, "loss": 0.93537, "time": 1.12588}
{"mode": "train", "epoch": 6, "iter": 300, "lr": 0.0005, "memory": 19005, "data_time": 0.01647, "loss_rpn_cls": 0.03921, "loss_rpn_bbox": 0.02421, "s0.loss_cls": 0.26205, "s0.acc": 92.59668, "s0.loss_bbox": 0.22602, "s1.loss_cls": 0.13433, "s1.acc": 92.07304, "s1.loss_bbox": 0.09476, "s2.loss_cls": 0.06363, "s2.acc": 92.26261, "s2.loss_bbox": 0.03603, "loss": 0.88023, "time": 1.1105}
{"mode": "train", "epoch": 6, "iter": 350, "lr": 0.0005, "memory": 19005, "data_time": 0.01653, "loss_rpn_cls": 0.0347, "loss_rpn_bbox": 0.02473, "s0.loss_cls": 0.26434, "s0.acc": 92.17236, "s0.loss_bbox": 0.24649, "s1.loss_cls": 0.13409, "s1.acc": 91.88892, "s1.loss_bbox": 0.10105, "s2.loss_cls": 0.06225, "s2.acc": 92.43523, "s2.loss_bbox": 0.03713, "loss": 0.90478, "time": 1.12315}
{"mode": "train", "epoch": 6, "iter": 400, "lr": 0.0005, "memory": 19005, "data_time": 0.01691, "loss_rpn_cls": 0.04076, "loss_rpn_bbox": 0.02612, "s0.loss_cls": 0.26403, "s0.acc": 92.23096, "s0.loss_bbox": 0.24995, "s1.loss_cls": 0.13093, "s1.acc": 91.94302, "s1.loss_bbox": 0.10348, "s2.loss_cls": 0.06104, "s2.acc": 92.4042, "s2.loss_bbox": 0.03821, "loss": 0.91452, "time": 1.13678}
{"mode": "train", "epoch": 6, "iter": 450, "lr": 0.0005, "memory": 19005, "data_time": 0.01693, "loss_rpn_cls": 0.03478, "loss_rpn_bbox": 0.02479, "s0.loss_cls": 0.23999, "s0.acc": 93.10596, "s0.loss_bbox": 0.2198, "s1.loss_cls": 0.12516, "s1.acc": 92.63827, "s1.loss_bbox": 0.09364, "s2.loss_cls": 0.06043, "s2.acc": 92.76218, "s2.loss_bbox": 0.03542, "loss": 0.83401, "time": 1.12985}
{"mode": "val", "epoch": 6, "iter": 977, "lr": 0.0005, "bbox_mAP": 0.191, "bbox_mAP_50": 0.3, "bbox_mAP_75": 0.207, "bbox_mAP_s": 0.008, "bbox_mAP_m": 0.026, "bbox_mAP_l": 0.23, "bbox_mAP_copypaste": "0.191 0.300 0.207 0.008 0.026 0.230"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.0005, "memory": 19005, "data_time": 0.06388, "loss_rpn_cls": 0.03445, "loss_rpn_bbox": 0.02446, "s0.loss_cls": 0.25548, "s0.acc": 92.31006, "s0.loss_bbox": 0.25899, "s1.loss_cls": 0.12826, "s1.acc": 92.04747, "s1.loss_bbox": 0.10769, "s2.loss_cls": 0.06029, "s2.acc": 92.36825, "s2.loss_bbox": 0.04055, "loss": 0.91017, "time": 1.1894}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.0005, "memory": 19005, "data_time": 0.01667, "loss_rpn_cls": 0.03298, "loss_rpn_bbox": 0.02548, "s0.loss_cls": 0.25819, "s0.acc": 92.33887, "s0.loss_bbox": 0.24335, "s1.loss_cls": 0.13021, "s1.acc": 92.19666, "s1.loss_bbox": 0.10298, "s2.loss_cls": 0.06243, "s2.acc": 92.35916, "s2.loss_bbox": 0.0398, "loss": 0.89542, "time": 1.13093}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.0005, "memory": 19005, "data_time": 0.01642, "loss_rpn_cls": 0.03276, "loss_rpn_bbox": 0.02173, "s0.loss_cls": 0.23843, "s0.acc": 93.01709, "s0.loss_bbox": 0.23058, "s1.loss_cls": 0.11793, "s1.acc": 92.84953, "s1.loss_bbox": 0.09655, "s2.loss_cls": 0.05552, "s2.acc": 93.12929, "s2.loss_bbox": 0.03657, "loss": 0.83007, "time": 1.14639}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.0005, "memory": 19005, "data_time": 0.01719, "loss_rpn_cls": 0.02953, "loss_rpn_bbox": 0.02638, "s0.loss_cls": 0.25289, "s0.acc": 92.58301, "s0.loss_bbox": 0.25234, "s1.loss_cls": 0.12458, "s1.acc": 92.44127, "s1.loss_bbox": 0.10456, "s2.loss_cls": 0.05827, "s2.acc": 92.9363, "s2.loss_bbox": 0.03963, "loss": 0.88819, "time": 1.1367}
{"mode": "train", "epoch": 7, "iter": 250, "lr": 0.0005, "memory": 19005, "data_time": 0.01645, "loss_rpn_cls": 0.02766, "loss_rpn_bbox": 0.02287, "s0.loss_cls": 0.24337, "s0.acc": 92.68066, "s0.loss_bbox": 0.23563, "s1.loss_cls": 0.12315, "s1.acc": 92.39369, "s1.loss_bbox": 0.09856, "s2.loss_cls": 0.05931, "s2.acc": 92.61227, "s2.loss_bbox": 0.03715, "loss": 0.8477, "time": 1.12208}
{"mode": "train", "epoch": 7, "iter": 300, "lr": 0.0005, "memory": 19005, "data_time": 0.01746, "loss_rpn_cls": 0.03039, "loss_rpn_bbox": 0.02553, "s0.loss_cls": 0.26692, "s0.acc": 91.9292, "s0.loss_bbox": 0.25525, "s1.loss_cls": 0.13659, "s1.acc": 91.54832, "s1.loss_bbox": 0.10761, "s2.loss_cls": 0.0638, "s2.acc": 91.91899, "s2.loss_bbox": 0.04104, "loss": 0.92712, "time": 1.14389}
{"mode": "train", "epoch": 7, "iter": 350, "lr": 0.0005, "memory": 19005, "data_time": 0.01721, "loss_rpn_cls": 0.03781, "loss_rpn_bbox": 0.02337, "s0.loss_cls": 0.26934, "s0.acc": 92.26562, "s0.loss_bbox": 0.24693, "s1.loss_cls": 0.13406, "s1.acc": 92.0998, "s1.loss_bbox": 0.1026, "s2.loss_cls": 0.06286, "s2.acc": 92.42659, "s2.loss_bbox": 0.0391, "loss": 0.91606, "time": 1.13609}
{"mode": "train", "epoch": 7, "iter": 400, "lr": 0.0005, "memory": 19005, "data_time": 0.0174, "loss_rpn_cls": 0.03587, "loss_rpn_bbox": 0.02681, "s0.loss_cls": 0.27875, "s0.acc": 91.87793, "s0.loss_bbox": 0.25811, "s1.loss_cls": 0.14359, "s1.acc": 91.41346, "s1.loss_bbox": 0.10614, "s2.loss_cls": 0.06716, "s2.acc": 91.81175, "s2.loss_bbox": 0.03854, "loss": 0.95498, "time": 1.13619}
{"mode": "train", "epoch": 7, "iter": 450, "lr": 0.0005, "memory": 19005, "data_time": 0.01703, "loss_rpn_cls": 0.03278, "loss_rpn_bbox": 0.02614, "s0.loss_cls": 0.25713, "s0.acc": 92.42139, "s0.loss_bbox": 0.2449, "s1.loss_cls": 0.12928, "s1.acc": 92.13762, "s1.loss_bbox": 0.10335, "s2.loss_cls": 0.06096, "s2.acc": 92.42184, "s2.loss_bbox": 0.03859, "loss": 0.89314, "time": 1.12457}
{"mode": "val", "epoch": 7, "iter": 977, "lr": 0.0005, "bbox_mAP": 0.226, "bbox_mAP_50": 0.353, "bbox_mAP_75": 0.232, "bbox_mAP_s": 0.004, "bbox_mAP_m": 0.033, "bbox_mAP_l": 0.272, "bbox_mAP_copypaste": "0.226 0.353 0.232 0.004 0.033 0.272"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.0005, "memory": 19005, "data_time": 0.06445, "loss_rpn_cls": 0.03181, "loss_rpn_bbox": 0.02447, "s0.loss_cls": 0.24145, "s0.acc": 92.65576, "s0.loss_bbox": 0.24339, "s1.loss_cls": 0.11929, "s1.acc": 92.62723, "s1.loss_bbox": 0.10163, "s2.loss_cls": 0.05734, "s2.acc": 92.79143, "s2.loss_bbox": 0.03905, "loss": 0.85841, "time": 1.18429}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.0005, "memory": 19005, "data_time": 0.01635, "loss_rpn_cls": 0.03008, "loss_rpn_bbox": 0.02579, "s0.loss_cls": 0.24199, "s0.acc": 92.83398, "s0.loss_bbox": 0.24243, "s1.loss_cls": 0.11939, "s1.acc": 92.71309, "s1.loss_bbox": 0.10341, "s2.loss_cls": 0.05562, "s2.acc": 92.97523, "s2.loss_bbox": 0.03965, "loss": 0.85836, "time": 1.14348}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.0005, "memory": 19005, "data_time": 0.01586, "loss_rpn_cls": 0.0308, "loss_rpn_bbox": 0.02503, "s0.loss_cls": 0.24466, "s0.acc": 92.74609, "s0.loss_bbox": 0.22591, "s1.loss_cls": 0.12368, "s1.acc": 92.54237, "s1.loss_bbox": 0.09644, "s2.loss_cls": 0.06023, "s2.acc": 92.66956, "s2.loss_bbox": 0.03856, "loss": 0.8453, "time": 1.11463}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.0005, "memory": 19005, "data_time": 0.01611, "loss_rpn_cls": 0.0337, "loss_rpn_bbox": 0.02422, "s0.loss_cls": 0.24538, "s0.acc": 92.50977, "s0.loss_bbox": 0.25523, "s1.loss_cls": 0.12034, "s1.acc": 92.50508, "s1.loss_bbox": 0.10568, "s2.loss_cls": 0.05613, "s2.acc": 92.89035, "s2.loss_bbox": 0.03959, "loss": 0.88029, "time": 1.13563}
{"mode": "train", "epoch": 8, "iter": 250, "lr": 0.0005, "memory": 19005, "data_time": 0.01621, "loss_rpn_cls": 0.02764, "loss_rpn_bbox": 0.02156, "s0.loss_cls": 0.2369, "s0.acc": 92.9209, "s0.loss_bbox": 0.23246, "s1.loss_cls": 0.12056, "s1.acc": 92.64137, "s1.loss_bbox": 0.09886, "s2.loss_cls": 0.05746, "s2.acc": 93.0003, "s2.loss_bbox": 0.03818, "loss": 0.83361, "time": 1.13038}
{"mode": "train", "epoch": 8, "iter": 300, "lr": 0.0005, "memory": 19005, "data_time": 0.01644, "loss_rpn_cls": 0.02848, "loss_rpn_bbox": 0.02125, "s0.loss_cls": 0.23598, "s0.acc": 92.87158, "s0.loss_bbox": 0.22155, "s1.loss_cls": 0.12054, "s1.acc": 92.56359, "s1.loss_bbox": 0.09462, "s2.loss_cls": 0.05754, "s2.acc": 92.87922, "s2.loss_bbox": 0.0369, "loss": 0.81686, "time": 1.12982}
{"mode": "train", "epoch": 8, "iter": 350, "lr": 0.0005, "memory": 19005, "data_time": 0.01615, "loss_rpn_cls": 0.0288, "loss_rpn_bbox": 0.02589, "s0.loss_cls": 0.24005, "s0.acc": 92.73047, "s0.loss_bbox": 0.239, "s1.loss_cls": 0.12082, "s1.acc": 92.53475, "s1.loss_bbox": 0.10143, "s2.loss_cls": 0.05823, "s2.acc": 92.73361, "s2.loss_bbox": 0.03877, "loss": 0.85299, "time": 1.13789}
{"mode": "train", "epoch": 8, "iter": 400, "lr": 0.0005, "memory": 19005, "data_time": 0.01633, "loss_rpn_cls": 0.0303, "loss_rpn_bbox": 0.02616, "s0.loss_cls": 0.25275, "s0.acc": 92.45947, "s0.loss_bbox": 0.23695, "s1.loss_cls": 0.129, "s1.acc": 92.06826, "s1.loss_bbox": 0.10108, "s2.loss_cls": 0.06128, "s2.acc": 92.31615, "s2.loss_bbox": 0.03911, "loss": 0.87663, "time": 1.13816}
{"mode": "train", "epoch": 8, "iter": 450, "lr": 0.0005, "memory": 19005, "data_time": 0.01638, "loss_rpn_cls": 0.0333, "loss_rpn_bbox": 0.02827, "s0.loss_cls": 0.27164, "s0.acc": 91.81592, "s0.loss_bbox": 0.25947, "s1.loss_cls": 0.13544, "s1.acc": 91.49171, "s1.loss_bbox": 0.10943, "s2.loss_cls": 0.0651, "s2.acc": 91.77971, "s2.loss_bbox": 0.04229, "loss": 0.94494, "time": 1.1432}
{"mode": "val", "epoch": 8, "iter": 977, "lr": 0.0005, "bbox_mAP": 0.239, "bbox_mAP_50": 0.346, "bbox_mAP_75": 0.266, "bbox_mAP_s": 0.008, "bbox_mAP_m": 0.034, "bbox_mAP_l": 0.286, "bbox_mAP_copypaste": "0.239 0.346 0.266 0.008 0.034 0.286"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 5e-05, "memory": 19005, "data_time": 0.06438, "loss_rpn_cls": 0.02446, "loss_rpn_bbox": 0.02286, "s0.loss_cls": 0.23013, "s0.acc": 92.84033, "s0.loss_bbox": 0.24305, "s1.loss_cls": 0.1145, "s1.acc": 92.80572, "s1.loss_bbox": 0.10426, "s2.loss_cls": 0.05496, "s2.acc": 93.06661, "s2.loss_bbox": 0.04126, "loss": 0.83549, "time": 1.17715}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 5e-05, "memory": 19005, "data_time": 0.01617, "loss_rpn_cls": 0.01906, "loss_rpn_bbox": 0.02107, "s0.loss_cls": 0.20146, "s0.acc": 93.46338, "s0.loss_bbox": 0.22863, "s1.loss_cls": 0.09961, "s1.acc": 93.46366, "s1.loss_bbox": 0.09977, "s2.loss_cls": 0.04844, "s2.acc": 93.51975, "s2.loss_bbox": 0.04031, "loss": 0.75836, "time": 1.13071}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 5e-05, "memory": 19005, "data_time": 0.01602, "loss_rpn_cls": 0.0204, "loss_rpn_bbox": 0.02034, "s0.loss_cls": 0.18266, "s0.acc": 94.12109, "s0.loss_bbox": 0.21041, "s1.loss_cls": 0.09105, "s1.acc": 94.16727, "s1.loss_bbox": 0.09107, "s2.loss_cls": 0.04407, "s2.acc": 94.32084, "s2.loss_bbox": 0.0363, "loss": 0.6963, "time": 1.12064}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 5e-05, "memory": 19005, "data_time": 0.01609, "loss_rpn_cls": 0.01728, "loss_rpn_bbox": 0.01814, "s0.loss_cls": 0.17884, "s0.acc": 94.28809, "s0.loss_bbox": 0.2163, "s1.loss_cls": 0.08696, "s1.acc": 94.49723, "s1.loss_bbox": 0.09496, "s2.loss_cls": 0.04221, "s2.acc": 94.45407, "s2.loss_bbox": 0.03905, "loss": 0.69375, "time": 1.13593}
{"mode": "train", "epoch": 9, "iter": 250, "lr": 5e-05, "memory": 19005, "data_time": 0.01599, "loss_rpn_cls": 0.018, "loss_rpn_bbox": 0.02015, "s0.loss_cls": 0.19085, "s0.acc": 93.84082, "s0.loss_bbox": 0.23714, "s1.loss_cls": 0.08917, "s1.acc": 94.24866, "s1.loss_bbox": 0.1011, "s2.loss_cls": 0.04242, "s2.acc": 94.60979, "s2.loss_bbox": 0.04041, "loss": 0.73924, "time": 1.14221}
{"mode": "train", "epoch": 9, "iter": 300, "lr": 5e-05, "memory": 19005, "data_time": 0.01598, "loss_rpn_cls": 0.01887, "loss_rpn_bbox": 0.02056, "s0.loss_cls": 0.17109, "s0.acc": 94.46191, "s0.loss_bbox": 0.20755, "s1.loss_cls": 0.08337, "s1.acc": 94.52525, "s1.loss_bbox": 0.09024, "s2.loss_cls": 0.04019, "s2.acc": 94.56117, "s2.loss_bbox": 0.03609, "loss": 0.66795, "time": 1.11682}
{"mode": "train", "epoch": 9, "iter": 350, "lr": 5e-05, "memory": 19005, "data_time": 0.01621, "loss_rpn_cls": 0.01983, "loss_rpn_bbox": 0.02158, "s0.loss_cls": 0.18849, "s0.acc": 93.89062, "s0.loss_bbox": 0.22823, "s1.loss_cls": 0.09129, "s1.acc": 94.03134, "s1.loss_bbox": 0.09881, "s2.loss_cls": 0.044, "s2.acc": 94.16005, "s2.loss_bbox": 0.03966, "loss": 0.7319, "time": 1.10978}
{"mode": "train", "epoch": 9, "iter": 400, "lr": 5e-05, "memory": 19005, "data_time": 0.01679, "loss_rpn_cls": 0.01668, "loss_rpn_bbox": 0.01723, "s0.loss_cls": 0.18017, "s0.acc": 94.29834, "s0.loss_bbox": 0.20807, "s1.loss_cls": 0.08737, "s1.acc": 94.27565, "s1.loss_bbox": 0.08922, "s2.loss_cls": 0.04213, "s2.acc": 94.48182, "s2.loss_bbox": 0.03585, "loss": 0.67672, "time": 1.12636}
{"mode": "train", "epoch": 9, "iter": 450, "lr": 5e-05, "memory": 19005, "data_time": 0.01692, "loss_rpn_cls": 0.01644, "loss_rpn_bbox": 0.01817, "s0.loss_cls": 0.17499, "s0.acc": 94.26904, "s0.loss_bbox": 0.21685, "s1.loss_cls": 0.08387, "s1.acc": 94.5413, "s1.loss_bbox": 0.09426, "s2.loss_cls": 0.04076, "s2.acc": 94.52837, "s2.loss_bbox": 0.03862, "loss": 0.68396, "time": 1.13751}
{"mode": "val", "epoch": 9, "iter": 977, "lr": 5e-05, "bbox_mAP": 0.32, "bbox_mAP_50": 0.451, "bbox_mAP_75": 0.343, "bbox_mAP_s": 0.019, "bbox_mAP_m": 0.054, "bbox_mAP_l": 0.382, "bbox_mAP_copypaste": "0.320 0.451 0.343 0.019 0.054 0.382"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 5e-05, "memory": 19005, "data_time": 0.0648, "loss_rpn_cls": 0.0173, "loss_rpn_bbox": 0.01945, "s0.loss_cls": 0.17154, "s0.acc": 94.26318, "s0.loss_bbox": 0.21789, "s1.loss_cls": 0.08079, "s1.acc": 94.70896, "s1.loss_bbox": 0.09461, "s2.loss_cls": 0.03827, "s2.acc": 94.84084, "s2.loss_bbox": 0.0392, "loss": 0.67904, "time": 1.16847}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 5e-05, "memory": 19005, "data_time": 0.01615, "loss_rpn_cls": 0.01424, "loss_rpn_bbox": 0.01708, "s0.loss_cls": 0.15285, "s0.acc": 94.98047, "s0.loss_bbox": 0.20043, "s1.loss_cls": 0.07172, "s1.acc": 95.32521, "s1.loss_bbox": 0.0886, "s2.loss_cls": 0.03467, "s2.acc": 95.41556, "s2.loss_bbox": 0.03684, "loss": 0.61642, "time": 1.12645}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 5e-05, "memory": 19005, "data_time": 0.01634, "loss_rpn_cls": 0.01606, "loss_rpn_bbox": 0.01832, "s0.loss_cls": 0.17029, "s0.acc": 94.4043, "s0.loss_bbox": 0.2157, "s1.loss_cls": 0.08024, "s1.acc": 94.68764, "s1.loss_bbox": 0.09455, "s2.loss_cls": 0.03859, "s2.acc": 94.70066, "s2.loss_bbox": 0.03845, "loss": 0.67221, "time": 1.13139}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 5e-05, "memory": 19005, "data_time": 0.01664, "loss_rpn_cls": 0.01693, "loss_rpn_bbox": 0.01974, "s0.loss_cls": 0.16608, "s0.acc": 94.59521, "s0.loss_bbox": 0.21598, "s1.loss_cls": 0.07984, "s1.acc": 94.87001, "s1.loss_bbox": 0.09399, "s2.loss_cls": 0.0381, "s2.acc": 95.04507, "s2.loss_bbox": 0.0384, "loss": 0.66906, "time": 1.1312}
{"mode": "train", "epoch": 10, "iter": 250, "lr": 5e-05, "memory": 19005, "data_time": 0.01652, "loss_rpn_cls": 0.01647, "loss_rpn_bbox": 0.02071, "s0.loss_cls": 0.16831, "s0.acc": 94.47461, "s0.loss_bbox": 0.22219, "s1.loss_cls": 0.07795, "s1.acc": 94.86977, "s1.loss_bbox": 0.09643, "s2.loss_cls": 0.03794, "s2.acc": 94.9383, "s2.loss_bbox": 0.04009, "loss": 0.68009, "time": 1.12743}
{"mode": "train", "epoch": 10, "iter": 300, "lr": 5e-05, "memory": 19005, "data_time": 0.01676, "loss_rpn_cls": 0.01452, "loss_rpn_bbox": 0.01838, "s0.loss_cls": 0.16169, "s0.acc": 94.62549, "s0.loss_bbox": 0.21225, "s1.loss_cls": 0.07405, "s1.acc": 95.15758, "s1.loss_bbox": 0.0908, "s2.loss_cls": 0.0356, "s2.acc": 95.31296, "s2.loss_bbox": 0.03708, "loss": 0.64437, "time": 1.12627}
{"mode": "train", "epoch": 10, "iter": 350, "lr": 5e-05, "memory": 19005, "data_time": 0.01702, "loss_rpn_cls": 0.01543, "loss_rpn_bbox": 0.01972, "s0.loss_cls": 0.16415, "s0.acc": 94.59473, "s0.loss_bbox": 0.21138, "s1.loss_cls": 0.07795, "s1.acc": 94.88602, "s1.loss_bbox": 0.09078, "s2.loss_cls": 0.03759, "s2.acc": 94.88451, "s2.loss_bbox": 0.03653, "loss": 0.65353, "time": 1.13124}
{"mode": "train", "epoch": 10, "iter": 400, "lr": 5e-05, "memory": 19005, "data_time": 0.01692, "loss_rpn_cls": 0.01207, "loss_rpn_bbox": 0.01583, "s0.loss_cls": 0.15123, "s0.acc": 94.9834, "s0.loss_bbox": 0.1969, "s1.loss_cls": 0.0714, "s1.acc": 95.336, "s1.loss_bbox": 0.0875, "s2.loss_cls": 0.03499, "s2.acc": 95.23267, "s2.loss_bbox": 0.03621, "loss": 0.60613, "time": 1.11678}
{"mode": "train", "epoch": 10, "iter": 450, "lr": 5e-05, "memory": 19005, "data_time": 0.01648, "loss_rpn_cls": 0.01574, "loss_rpn_bbox": 0.0161, "s0.loss_cls": 0.15944, "s0.acc": 94.84668, "s0.loss_bbox": 0.19878, "s1.loss_cls": 0.07545, "s1.acc": 95.07376, "s1.loss_bbox": 0.08658, "s2.loss_cls": 0.03724, "s2.acc": 94.94634, "s2.loss_bbox": 0.03562, "loss": 0.62496, "time": 1.11162}
{"mode": "val", "epoch": 10, "iter": 977, "lr": 5e-05, "bbox_mAP": 0.334, "bbox_mAP_50": 0.465, "bbox_mAP_75": 0.354, "bbox_mAP_s": 0.016, "bbox_mAP_m": 0.047, "bbox_mAP_l": 0.399, "bbox_mAP_copypaste": "0.334 0.465 0.354 0.016 0.047 0.399"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 5e-05, "memory": 19005, "data_time": 0.06508, "loss_rpn_cls": 0.01316, "loss_rpn_bbox": 0.01612, "s0.loss_cls": 0.1398, "s0.acc": 95.35205, "s0.loss_bbox": 0.18746, "s1.loss_cls": 0.06422, "s1.acc": 95.80537, "s1.loss_bbox": 0.08343, "s2.loss_cls": 0.03172, "s2.acc": 95.83804, "s2.loss_bbox": 0.03521, "loss": 0.57112, "time": 1.17349}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 5e-05, "memory": 19005, "data_time": 0.01631, "loss_rpn_cls": 0.01105, "loss_rpn_bbox": 0.01554, "s0.loss_cls": 0.13026, "s0.acc": 95.67725, "s0.loss_bbox": 0.18226, "s1.loss_cls": 0.05886, "s1.acc": 96.11882, "s1.loss_bbox": 0.08072, "s2.loss_cls": 0.0281, "s2.acc": 96.17944, "s2.loss_bbox": 0.03443, "loss": 0.54122, "time": 1.12877}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 5e-05, "memory": 19005, "data_time": 0.01629, "loss_rpn_cls": 0.0141, "loss_rpn_bbox": 0.01776, "s0.loss_cls": 0.15388, "s0.acc": 94.83057, "s0.loss_bbox": 0.21023, "s1.loss_cls": 0.07085, "s1.acc": 95.25476, "s1.loss_bbox": 0.093, "s2.loss_cls": 0.03475, "s2.acc": 95.23041, "s2.loss_bbox": 0.03871, "loss": 0.63328, "time": 1.11992}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 5e-05, "memory": 19005, "data_time": 0.01648, "loss_rpn_cls": 0.01263, "loss_rpn_bbox": 0.01684, "s0.loss_cls": 0.15271, "s0.acc": 94.92773, "s0.loss_bbox": 0.20486, "s1.loss_cls": 0.06982, "s1.acc": 95.48287, "s1.loss_bbox": 0.09026, "s2.loss_cls": 0.03348, "s2.acc": 95.55609, "s2.loss_bbox": 0.03738, "loss": 0.61799, "time": 1.12489}
{"mode": "train", "epoch": 11, "iter": 250, "lr": 5e-05, "memory": 19005, "data_time": 0.0166, "loss_rpn_cls": 0.01505, "loss_rpn_bbox": 0.01956, "s0.loss_cls": 0.16911, "s0.acc": 94.5791, "s0.loss_bbox": 0.21655, "s1.loss_cls": 0.07776, "s1.acc": 95.0686, "s1.loss_bbox": 0.09296, "s2.loss_cls": 0.0374, "s2.acc": 95.21734, "s2.loss_bbox": 0.03783, "loss": 0.66622, "time": 1.12593}
{"mode": "train", "epoch": 11, "iter": 300, "lr": 5e-05, "memory": 19005, "data_time": 0.01688, "loss_rpn_cls": 0.0136, "loss_rpn_bbox": 0.01722, "s0.loss_cls": 0.15067, "s0.acc": 94.95996, "s0.loss_bbox": 0.20814, "s1.loss_cls": 0.06723, "s1.acc": 95.47338, "s1.loss_bbox": 0.0901, "s2.loss_cls": 0.03115, "s2.acc": 95.72643, "s2.loss_bbox": 0.03668, "loss": 0.61479, "time": 1.12762}
{"mode": "train", "epoch": 11, "iter": 350, "lr": 5e-05, "memory": 19005, "data_time": 0.01654, "loss_rpn_cls": 0.01325, "loss_rpn_bbox": 0.01896, "s0.loss_cls": 0.14837, "s0.acc": 95.07422, "s0.loss_bbox": 0.208, "s1.loss_cls": 0.06816, "s1.acc": 95.34981, "s1.loss_bbox": 0.09029, "s2.loss_cls": 0.03277, "s2.acc": 95.4229, "s2.loss_bbox": 0.03674, "loss": 0.61654, "time": 1.12851}
{"mode": "train", "epoch": 11, "iter": 400, "lr": 5e-05, "memory": 19005, "data_time": 0.01644, "loss_rpn_cls": 0.01311, "loss_rpn_bbox": 0.01856, "s0.loss_cls": 0.14673, "s0.acc": 95.13672, "s0.loss_bbox": 0.19982, "s1.loss_cls": 0.06819, "s1.acc": 95.39597, "s1.loss_bbox": 0.08796, "s2.loss_cls": 0.03333, "s2.acc": 95.41173, "s2.loss_bbox": 0.03712, "loss": 0.60483, "time": 1.11371}
{"mode": "train", "epoch": 11, "iter": 450, "lr": 5e-05, "memory": 19005, "data_time": 0.01668, "loss_rpn_cls": 0.01453, "loss_rpn_bbox": 0.01822, "s0.loss_cls": 0.15281, "s0.acc": 94.8916, "s0.loss_bbox": 0.20557, "s1.loss_cls": 0.07145, "s1.acc": 95.24968, "s1.loss_bbox": 0.08911, "s2.loss_cls": 0.03427, "s2.acc": 95.34689, "s2.loss_bbox": 0.03713, "loss": 0.62309, "time": 1.11722}
{"mode": "val", "epoch": 11, "iter": 977, "lr": 5e-05, "bbox_mAP": 0.332, "bbox_mAP_50": 0.457, "bbox_mAP_75": 0.355, "bbox_mAP_s": 0.024, "bbox_mAP_m": 0.05, "bbox_mAP_l": 0.397, "bbox_mAP_copypaste": "0.332 0.457 0.355 0.024 0.050 0.397"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06436, "loss_rpn_cls": 0.01163, "loss_rpn_bbox": 0.0158, "s0.loss_cls": 0.132, "s0.acc": 95.55664, "s0.loss_bbox": 0.18825, "s1.loss_cls": 0.0595, "s1.acc": 96.04824, "s1.loss_bbox": 0.08254, "s2.loss_cls": 0.02844, "s2.acc": 96.17172, "s2.loss_bbox": 0.03392, "loss": 0.55206, "time": 1.19258}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01629, "loss_rpn_cls": 0.01137, "loss_rpn_bbox": 0.01521, "s0.loss_cls": 0.12453, "s0.acc": 95.81055, "s0.loss_bbox": 0.18278, "s1.loss_cls": 0.05542, "s1.acc": 96.31793, "s1.loss_bbox": 0.0809, "s2.loss_cls": 0.02671, "s2.acc": 96.43224, "s2.loss_bbox": 0.03418, "loss": 0.53108, "time": 1.12279}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01642, "loss_rpn_cls": 0.0112, "loss_rpn_bbox": 0.0182, "s0.loss_cls": 0.1455, "s0.acc": 95.10596, "s0.loss_bbox": 0.20548, "s1.loss_cls": 0.0648, "s1.acc": 95.73639, "s1.loss_bbox": 0.08894, "s2.loss_cls": 0.03106, "s2.acc": 95.84117, "s2.loss_bbox": 0.03705, "loss": 0.60222, "time": 1.11876}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01661, "loss_rpn_cls": 0.01252, "loss_rpn_bbox": 0.01729, "s0.loss_cls": 0.13905, "s0.acc": 95.32275, "s0.loss_bbox": 0.20346, "s1.loss_cls": 0.06126, "s1.acc": 95.97899, "s1.loss_bbox": 0.08782, "s2.loss_cls": 0.02962, "s2.acc": 96.01197, "s2.loss_bbox": 0.03663, "loss": 0.58765, "time": 1.12258}
{"mode": "train", "epoch": 12, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01671, "loss_rpn_cls": 0.01113, "loss_rpn_bbox": 0.01765, "s0.loss_cls": 0.1273, "s0.acc": 95.67041, "s0.loss_bbox": 0.19049, "s1.loss_cls": 0.05667, "s1.acc": 96.21347, "s1.loss_bbox": 0.08239, "s2.loss_cls": 0.02703, "s2.acc": 96.33546, "s2.loss_bbox": 0.03505, "loss": 0.54771, "time": 1.11638}
{"mode": "train", "epoch": 12, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01706, "loss_rpn_cls": 0.01306, "loss_rpn_bbox": 0.01771, "s0.loss_cls": 0.1526, "s0.acc": 94.83789, "s0.loss_bbox": 0.21539, "s1.loss_cls": 0.06708, "s1.acc": 95.45712, "s1.loss_bbox": 0.0928, "s2.loss_cls": 0.03165, "s2.acc": 95.70224, "s2.loss_bbox": 0.03797, "loss": 0.62827, "time": 1.12313}
{"mode": "train", "epoch": 12, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01672, "loss_rpn_cls": 0.0126, "loss_rpn_bbox": 0.01783, "s0.loss_cls": 0.1384, "s0.acc": 95.34717, "s0.loss_bbox": 0.20241, "s1.loss_cls": 0.06144, "s1.acc": 95.92515, "s1.loss_bbox": 0.08607, "s2.loss_cls": 0.02917, "s2.acc": 96.07502, "s2.loss_bbox": 0.03571, "loss": 0.58363, "time": 1.13391}
{"mode": "train", "epoch": 12, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01602, "loss_rpn_cls": 0.01087, "loss_rpn_bbox": 0.01507, "s0.loss_cls": 0.12761, "s0.acc": 95.66992, "s0.loss_bbox": 0.19454, "s1.loss_cls": 0.0565, "s1.acc": 96.19065, "s1.loss_bbox": 0.08633, "s2.loss_cls": 0.02772, "s2.acc": 96.26817, "s2.loss_bbox": 0.03648, "loss": 0.55511, "time": 1.10657}
{"mode": "train", "epoch": 12, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01646, "loss_rpn_cls": 0.01249, "loss_rpn_bbox": 0.01719, "s0.loss_cls": 0.1272, "s0.acc": 95.78564, "s0.loss_bbox": 0.18359, "s1.loss_cls": 0.05726, "s1.acc": 96.29933, "s1.loss_bbox": 0.08066, "s2.loss_cls": 0.02746, "s2.acc": 96.35517, "s2.loss_bbox": 0.03401, "loss": 0.53984, "time": 1.11797}
{"mode": "val", "epoch": 12, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.341, "bbox_mAP_50": 0.472, "bbox_mAP_75": 0.366, "bbox_mAP_s": 0.025, "bbox_mAP_m": 0.06, "bbox_mAP_l": 0.406, "bbox_mAP_copypaste": "0.341 0.472 0.366 0.025 0.060 0.406"}
{"mode": "train", "epoch": 13, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06544, "loss_rpn_cls": 0.01227, "loss_rpn_bbox": 0.01534, "s0.loss_cls": 0.13644, "s0.acc": 95.28516, "s0.loss_bbox": 0.20103, "s1.loss_cls": 0.06034, "s1.acc": 95.92827, "s1.loss_bbox": 0.08751, "s2.loss_cls": 0.0291, "s2.acc": 96.02363, "s2.loss_bbox": 0.03756, "loss": 0.5796, "time": 1.18962}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01695, "loss_rpn_cls": 0.01049, "loss_rpn_bbox": 0.01672, "s0.loss_cls": 0.12095, "s0.acc": 95.92822, "s0.loss_bbox": 0.1864, "s1.loss_cls": 0.05257, "s1.acc": 96.49575, "s1.loss_bbox": 0.08172, "s2.loss_cls": 0.02546, "s2.acc": 96.56572, "s2.loss_bbox": 0.03413, "loss": 0.52845, "time": 1.1398}
{"mode": "train", "epoch": 13, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01719, "loss_rpn_cls": 0.01294, "loss_rpn_bbox": 0.01709, "s0.loss_cls": 0.13505, "s0.acc": 95.44531, "s0.loss_bbox": 0.20242, "s1.loss_cls": 0.05875, "s1.acc": 96.13064, "s1.loss_bbox": 0.08821, "s2.loss_cls": 0.02831, "s2.acc": 96.19088, "s2.loss_bbox": 0.03701, "loss": 0.57978, "time": 1.12441}
{"mode": "train", "epoch": 13, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01711, "loss_rpn_cls": 0.01062, "loss_rpn_bbox": 0.01536, "s0.loss_cls": 0.12354, "s0.acc": 95.85596, "s0.loss_bbox": 0.18664, "s1.loss_cls": 0.05459, "s1.acc": 96.3921, "s1.loss_bbox": 0.0816, "s2.loss_cls": 0.02651, "s2.acc": 96.55209, "s2.loss_bbox": 0.03477, "loss": 0.53364, "time": 1.12127}
{"mode": "train", "epoch": 13, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01687, "loss_rpn_cls": 0.01382, "loss_rpn_bbox": 0.01934, "s0.loss_cls": 0.14668, "s0.acc": 95.01709, "s0.loss_bbox": 0.20956, "s1.loss_cls": 0.0665, "s1.acc": 95.50231, "s1.loss_bbox": 0.09058, "s2.loss_cls": 0.03267, "s2.acc": 95.58801, "s2.loss_bbox": 0.03689, "loss": 0.61604, "time": 1.1227}
{"mode": "train", "epoch": 13, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01676, "loss_rpn_cls": 0.01041, "loss_rpn_bbox": 0.01626, "s0.loss_cls": 0.13016, "s0.acc": 95.52197, "s0.loss_bbox": 0.18997, "s1.loss_cls": 0.05798, "s1.acc": 96.00991, "s1.loss_bbox": 0.08282, "s2.loss_cls": 0.02785, "s2.acc": 96.24608, "s2.loss_bbox": 0.03513, "loss": 0.55058, "time": 1.11728}
{"mode": "train", "epoch": 13, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01681, "loss_rpn_cls": 0.011, "loss_rpn_bbox": 0.01542, "s0.loss_cls": 0.121, "s0.acc": 95.875, "s0.loss_bbox": 0.18276, "s1.loss_cls": 0.05353, "s1.acc": 96.42713, "s1.loss_bbox": 0.07992, "s2.loss_cls": 0.02521, "s2.acc": 96.5047, "s2.loss_bbox": 0.03414, "loss": 0.52299, "time": 1.11609}
{"mode": "train", "epoch": 13, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01699, "loss_rpn_cls": 0.01592, "loss_rpn_bbox": 0.01719, "s0.loss_cls": 0.13366, "s0.acc": 95.55566, "s0.loss_bbox": 0.19728, "s1.loss_cls": 0.05927, "s1.acc": 96.03689, "s1.loss_bbox": 0.08456, "s2.loss_cls": 0.02873, "s2.acc": 96.08196, "s2.loss_bbox": 0.0354, "loss": 0.572, "time": 1.13194}
{"mode": "train", "epoch": 13, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01721, "loss_rpn_cls": 0.0124, "loss_rpn_bbox": 0.01754, "s0.loss_cls": 0.1335, "s0.acc": 95.48926, "s0.loss_bbox": 0.20176, "s1.loss_cls": 0.05832, "s1.acc": 96.15916, "s1.loss_bbox": 0.08766, "s2.loss_cls": 0.02771, "s2.acc": 96.23641, "s2.loss_bbox": 0.03655, "loss": 0.57544, "time": 1.11386}
{"mode": "val", "epoch": 13, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.341, "bbox_mAP_50": 0.471, "bbox_mAP_75": 0.361, "bbox_mAP_s": 0.023, "bbox_mAP_m": 0.058, "bbox_mAP_l": 0.407, "bbox_mAP_copypaste": "0.341 0.471 0.361 0.023 0.058 0.407"}
{"mode": "train", "epoch": 14, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06488, "loss_rpn_cls": 0.01133, "loss_rpn_bbox": 0.01799, "s0.loss_cls": 0.13734, "s0.acc": 95.36182, "s0.loss_bbox": 0.19997, "s1.loss_cls": 0.06084, "s1.acc": 95.95713, "s1.loss_bbox": 0.08524, "s2.loss_cls": 0.02938, "s2.acc": 96.07801, "s2.loss_bbox": 0.03584, "loss": 0.57793, "time": 1.16739}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01659, "loss_rpn_cls": 0.01128, "loss_rpn_bbox": 0.01659, "s0.loss_cls": 0.13546, "s0.acc": 95.40479, "s0.loss_bbox": 0.20733, "s1.loss_cls": 0.05981, "s1.acc": 95.9826, "s1.loss_bbox": 0.09037, "s2.loss_cls": 0.02886, "s2.acc": 96.19992, "s2.loss_bbox": 0.03846, "loss": 0.58816, "time": 1.1151}
{"mode": "train", "epoch": 14, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01631, "loss_rpn_cls": 0.01063, "loss_rpn_bbox": 0.01478, "s0.loss_cls": 0.12024, "s0.acc": 95.88184, "s0.loss_bbox": 0.18296, "s1.loss_cls": 0.05408, "s1.acc": 96.40119, "s1.loss_bbox": 0.08083, "s2.loss_cls": 0.02608, "s2.acc": 96.43953, "s2.loss_bbox": 0.03422, "loss": 0.52383, "time": 1.12622}
{"mode": "train", "epoch": 14, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01668, "loss_rpn_cls": 0.01079, "loss_rpn_bbox": 0.01742, "s0.loss_cls": 0.12643, "s0.acc": 95.68311, "s0.loss_bbox": 0.18888, "s1.loss_cls": 0.05416, "s1.acc": 96.29167, "s1.loss_bbox": 0.08192, "s2.loss_cls": 0.02545, "s2.acc": 96.49704, "s2.loss_bbox": 0.03509, "loss": 0.54015, "time": 1.12351}
{"mode": "train", "epoch": 14, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01698, "loss_rpn_cls": 0.0127, "loss_rpn_bbox": 0.01838, "s0.loss_cls": 0.13693, "s0.acc": 95.42334, "s0.loss_bbox": 0.19924, "s1.loss_cls": 0.06095, "s1.acc": 96.00979, "s1.loss_bbox": 0.08609, "s2.loss_cls": 0.0292, "s2.acc": 96.14594, "s2.loss_bbox": 0.03578, "loss": 0.57927, "time": 1.12116}
{"mode": "train", "epoch": 14, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01672, "loss_rpn_cls": 0.01184, "loss_rpn_bbox": 0.0156, "s0.loss_cls": 0.12832, "s0.acc": 95.68213, "s0.loss_bbox": 0.18931, "s1.loss_cls": 0.05525, "s1.acc": 96.25201, "s1.loss_bbox": 0.08232, "s2.loss_cls": 0.02648, "s2.acc": 96.41733, "s2.loss_bbox": 0.03458, "loss": 0.54371, "time": 1.13182}
{"mode": "train", "epoch": 14, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01657, "loss_rpn_cls": 0.01005, "loss_rpn_bbox": 0.01635, "s0.loss_cls": 0.11992, "s0.acc": 95.93359, "s0.loss_bbox": 0.18252, "s1.loss_cls": 0.0522, "s1.acc": 96.55891, "s1.loss_bbox": 0.08029, "s2.loss_cls": 0.02459, "s2.acc": 96.7248, "s2.loss_bbox": 0.03421, "loss": 0.52012, "time": 1.11187}
{"mode": "train", "epoch": 14, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01659, "loss_rpn_cls": 0.01128, "loss_rpn_bbox": 0.01615, "s0.loss_cls": 0.1301, "s0.acc": 95.52295, "s0.loss_bbox": 0.19493, "s1.loss_cls": 0.05718, "s1.acc": 96.13546, "s1.loss_bbox": 0.08518, "s2.loss_cls": 0.02717, "s2.acc": 96.26601, "s2.loss_bbox": 0.03512, "loss": 0.55711, "time": 1.11868}
{"mode": "train", "epoch": 14, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.0165, "loss_rpn_cls": 0.01118, "loss_rpn_bbox": 0.0164, "s0.loss_cls": 0.12185, "s0.acc": 95.8877, "s0.loss_bbox": 0.18456, "s1.loss_cls": 0.05425, "s1.acc": 96.39679, "s1.loss_bbox": 0.08035, "s2.loss_cls": 0.02593, "s2.acc": 96.47319, "s2.loss_bbox": 0.03382, "loss": 0.52833, "time": 1.10534}
{"mode": "val", "epoch": 14, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.342, "bbox_mAP_50": 0.473, "bbox_mAP_75": 0.363, "bbox_mAP_s": 0.023, "bbox_mAP_m": 0.051, "bbox_mAP_l": 0.407, "bbox_mAP_copypaste": "0.342 0.473 0.363 0.023 0.051 0.407"}
{"mode": "train", "epoch": 15, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.0644, "loss_rpn_cls": 0.0115, "loss_rpn_bbox": 0.018, "s0.loss_cls": 0.13529, "s0.acc": 95.42236, "s0.loss_bbox": 0.19962, "s1.loss_cls": 0.05858, "s1.acc": 96.09131, "s1.loss_bbox": 0.08638, "s2.loss_cls": 0.0281, "s2.acc": 96.19754, "s2.loss_bbox": 0.03615, "loss": 0.57362, "time": 1.17027}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01642, "loss_rpn_cls": 0.01077, "loss_rpn_bbox": 0.01696, "s0.loss_cls": 0.12461, "s0.acc": 95.78613, "s0.loss_bbox": 0.18949, "s1.loss_cls": 0.05509, "s1.acc": 96.36808, "s1.loss_bbox": 0.08188, "s2.loss_cls": 0.02679, "s2.acc": 96.35258, "s2.loss_bbox": 0.03432, "loss": 0.5399, "time": 1.11456}
{"mode": "train", "epoch": 15, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01636, "loss_rpn_cls": 0.01404, "loss_rpn_bbox": 0.01922, "s0.loss_cls": 0.14526, "s0.acc": 94.98975, "s0.loss_bbox": 0.21592, "s1.loss_cls": 0.06479, "s1.acc": 95.58015, "s1.loss_bbox": 0.0938, "s2.loss_cls": 0.03092, "s2.acc": 95.64785, "s2.loss_bbox": 0.03886, "loss": 0.62282, "time": 1.11668}
{"mode": "train", "epoch": 15, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01636, "loss_rpn_cls": 0.01351, "loss_rpn_bbox": 0.01929, "s0.loss_cls": 0.13891, "s0.acc": 95.29688, "s0.loss_bbox": 0.20968, "s1.loss_cls": 0.05997, "s1.acc": 95.98129, "s1.loss_bbox": 0.08997, "s2.loss_cls": 0.0286, "s2.acc": 96.13672, "s2.loss_bbox": 0.0373, "loss": 0.59723, "time": 1.11912}
{"mode": "train", "epoch": 15, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01668, "loss_rpn_cls": 0.00965, "loss_rpn_bbox": 0.01502, "s0.loss_cls": 0.11121, "s0.acc": 96.23633, "s0.loss_bbox": 0.17298, "s1.loss_cls": 0.04801, "s1.acc": 96.76118, "s1.loss_bbox": 0.07668, "s2.loss_cls": 0.02272, "s2.acc": 96.86611, "s2.loss_bbox": 0.03261, "loss": 0.48888, "time": 1.11988}
{"mode": "train", "epoch": 15, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.016, "loss_rpn_cls": 0.0115, "loss_rpn_bbox": 0.01528, "s0.loss_cls": 0.13351, "s0.acc": 95.53027, "s0.loss_bbox": 0.20085, "s1.loss_cls": 0.05735, "s1.acc": 96.12757, "s1.loss_bbox": 0.08773, "s2.loss_cls": 0.02726, "s2.acc": 96.39035, "s2.loss_bbox": 0.03677, "loss": 0.57024, "time": 1.11167}
{"mode": "train", "epoch": 15, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01638, "loss_rpn_cls": 0.00881, "loss_rpn_bbox": 0.01344, "s0.loss_cls": 0.11207, "s0.acc": 96.19385, "s0.loss_bbox": 0.17165, "s1.loss_cls": 0.04966, "s1.acc": 96.69677, "s1.loss_bbox": 0.07482, "s2.loss_cls": 0.02389, "s2.acc": 96.79903, "s2.loss_bbox": 0.0318, "loss": 0.48614, "time": 1.12726}
{"mode": "train", "epoch": 15, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01694, "loss_rpn_cls": 0.01186, "loss_rpn_bbox": 0.01544, "s0.loss_cls": 0.12051, "s0.acc": 96.00391, "s0.loss_bbox": 0.18203, "s1.loss_cls": 0.05371, "s1.acc": 96.42905, "s1.loss_bbox": 0.0795, "s2.loss_cls": 0.02594, "s2.acc": 96.46178, "s2.loss_bbox": 0.03389, "loss": 0.52289, "time": 1.12954}
{"mode": "train", "epoch": 15, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01708, "loss_rpn_cls": 0.01141, "loss_rpn_bbox": 0.01644, "s0.loss_cls": 0.13612, "s0.acc": 95.44141, "s0.loss_bbox": 0.20285, "s1.loss_cls": 0.06093, "s1.acc": 95.97226, "s1.loss_bbox": 0.08859, "s2.loss_cls": 0.02803, "s2.acc": 96.24001, "s2.loss_bbox": 0.03658, "loss": 0.58095, "time": 1.11538}
{"mode": "val", "epoch": 15, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.344, "bbox_mAP_50": 0.473, "bbox_mAP_75": 0.367, "bbox_mAP_s": 0.027, "bbox_mAP_m": 0.054, "bbox_mAP_l": 0.409, "bbox_mAP_copypaste": "0.344 0.473 0.367 0.027 0.054 0.409"}
{"mode": "train", "epoch": 16, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06487, "loss_rpn_cls": 0.01297, "loss_rpn_bbox": 0.01988, "s0.loss_cls": 0.13585, "s0.acc": 95.35449, "s0.loss_bbox": 0.20808, "s1.loss_cls": 0.05973, "s1.acc": 95.95687, "s1.loss_bbox": 0.08932, "s2.loss_cls": 0.02855, "s2.acc": 96.04162, "s2.loss_bbox": 0.03692, "loss": 0.5913, "time": 1.17728}
{"mode": "train", "epoch": 16, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01617, "loss_rpn_cls": 0.00997, "loss_rpn_bbox": 0.014, "s0.loss_cls": 0.12415, "s0.acc": 95.77246, "s0.loss_bbox": 0.19361, "s1.loss_cls": 0.05268, "s1.acc": 96.46789, "s1.loss_bbox": 0.08395, "s2.loss_cls": 0.02546, "s2.acc": 96.49849, "s2.loss_bbox": 0.03561, "loss": 0.53942, "time": 1.12073}
{"mode": "train", "epoch": 16, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01647, "loss_rpn_cls": 0.01208, "loss_rpn_bbox": 0.01612, "s0.loss_cls": 0.12592, "s0.acc": 95.73096, "s0.loss_bbox": 0.19101, "s1.loss_cls": 0.05367, "s1.acc": 96.37456, "s1.loss_bbox": 0.08366, "s2.loss_cls": 0.02616, "s2.acc": 96.41175, "s2.loss_bbox": 0.03534, "loss": 0.54396, "time": 1.12526}
{"mode": "train", "epoch": 16, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01723, "loss_rpn_cls": 0.01134, "loss_rpn_bbox": 0.01698, "s0.loss_cls": 0.12031, "s0.acc": 96.01172, "s0.loss_bbox": 0.18627, "s1.loss_cls": 0.0525, "s1.acc": 96.59962, "s1.loss_bbox": 0.08164, "s2.loss_cls": 0.02482, "s2.acc": 96.67733, "s2.loss_bbox": 0.03376, "loss": 0.52763, "time": 1.12932}
{"mode": "train", "epoch": 16, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01653, "loss_rpn_cls": 0.01086, "loss_rpn_bbox": 0.01539, "s0.loss_cls": 0.12405, "s0.acc": 95.90723, "s0.loss_bbox": 0.19151, "s1.loss_cls": 0.05444, "s1.acc": 96.45271, "s1.loss_bbox": 0.08367, "s2.loss_cls": 0.02596, "s2.acc": 96.53398, "s2.loss_bbox": 0.03497, "loss": 0.54085, "time": 1.12135}
{"mode": "train", "epoch": 16, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.0166, "loss_rpn_cls": 0.01169, "loss_rpn_bbox": 0.01747, "s0.loss_cls": 0.12748, "s0.acc": 95.7085, "s0.loss_bbox": 0.19097, "s1.loss_cls": 0.05516, "s1.acc": 96.29912, "s1.loss_bbox": 0.08304, "s2.loss_cls": 0.02633, "s2.acc": 96.38785, "s2.loss_bbox": 0.03498, "loss": 0.54711, "time": 1.12476}
{"mode": "train", "epoch": 16, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.0166, "loss_rpn_cls": 0.0089, "loss_rpn_bbox": 0.01437, "s0.loss_cls": 0.12073, "s0.acc": 95.94043, "s0.loss_bbox": 0.17888, "s1.loss_cls": 0.05229, "s1.acc": 96.46484, "s1.loss_bbox": 0.07788, "s2.loss_cls": 0.02546, "s2.acc": 96.61191, "s2.loss_bbox": 0.03333, "loss": 0.51183, "time": 1.12701}
{"mode": "train", "epoch": 16, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01723, "loss_rpn_cls": 0.01015, "loss_rpn_bbox": 0.01468, "s0.loss_cls": 0.11867, "s0.acc": 95.94727, "s0.loss_bbox": 0.17733, "s1.loss_cls": 0.05329, "s1.acc": 96.40614, "s1.loss_bbox": 0.07878, "s2.loss_cls": 0.02506, "s2.acc": 96.59319, "s2.loss_bbox": 0.03402, "loss": 0.51198, "time": 1.11207}
{"mode": "train", "epoch": 16, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01696, "loss_rpn_cls": 0.01273, "loss_rpn_bbox": 0.01854, "s0.loss_cls": 0.13563, "s0.acc": 95.42188, "s0.loss_bbox": 0.20849, "s1.loss_cls": 0.05877, "s1.acc": 96.09329, "s1.loss_bbox": 0.08927, "s2.loss_cls": 0.02829, "s2.acc": 96.17395, "s2.loss_bbox": 0.03835, "loss": 0.59007, "time": 1.11665}
{"mode": "val", "epoch": 16, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.344, "bbox_mAP_50": 0.474, "bbox_mAP_75": 0.367, "bbox_mAP_s": 0.027, "bbox_mAP_m": 0.061, "bbox_mAP_l": 0.41, "bbox_mAP_copypaste": "0.344 0.474 0.367 0.027 0.061 0.410"}
{"mode": "train", "epoch": 17, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06528, "loss_rpn_cls": 0.01166, "loss_rpn_bbox": 0.01573, "s0.loss_cls": 0.1316, "s0.acc": 95.5752, "s0.loss_bbox": 0.19472, "s1.loss_cls": 0.05779, "s1.acc": 96.17587, "s1.loss_bbox": 0.08432, "s2.loss_cls": 0.02727, "s2.acc": 96.28374, "s2.loss_bbox": 0.03537, "loss": 0.55846, "time": 1.1708}
{"mode": "train", "epoch": 17, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01606, "loss_rpn_cls": 0.01143, "loss_rpn_bbox": 0.01763, "s0.loss_cls": 0.12929, "s0.acc": 95.58398, "s0.loss_bbox": 0.19149, "s1.loss_cls": 0.05631, "s1.acc": 96.20572, "s1.loss_bbox": 0.08353, "s2.loss_cls": 0.02694, "s2.acc": 96.3145, "s2.loss_bbox": 0.03538, "loss": 0.55202, "time": 1.11316}
{"mode": "train", "epoch": 17, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01595, "loss_rpn_cls": 0.01088, "loss_rpn_bbox": 0.01594, "s0.loss_cls": 0.1282, "s0.acc": 95.54346, "s0.loss_bbox": 0.19381, "s1.loss_cls": 0.05599, "s1.acc": 96.11974, "s1.loss_bbox": 0.08474, "s2.loss_cls": 0.02697, "s2.acc": 96.1664, "s2.loss_bbox": 0.03537, "loss": 0.55188, "time": 1.12235}
{"mode": "train", "epoch": 17, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01605, "loss_rpn_cls": 0.01053, "loss_rpn_bbox": 0.0174, "s0.loss_cls": 0.12608, "s0.acc": 95.67627, "s0.loss_bbox": 0.1981, "s1.loss_cls": 0.05475, "s1.acc": 96.24762, "s1.loss_bbox": 0.08582, "s2.loss_cls": 0.02654, "s2.acc": 96.31425, "s2.loss_bbox": 0.036, "loss": 0.55521, "time": 1.10783}
{"mode": "train", "epoch": 17, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01625, "loss_rpn_cls": 0.01167, "loss_rpn_bbox": 0.01758, "s0.loss_cls": 0.125, "s0.acc": 95.7417, "s0.loss_bbox": 0.18975, "s1.loss_cls": 0.05458, "s1.acc": 96.31041, "s1.loss_bbox": 0.0824, "s2.loss_cls": 0.02608, "s2.acc": 96.51001, "s2.loss_bbox": 0.03442, "loss": 0.54148, "time": 1.11052}
{"mode": "train", "epoch": 17, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01679, "loss_rpn_cls": 0.01304, "loss_rpn_bbox": 0.01749, "s0.loss_cls": 0.12719, "s0.acc": 95.63623, "s0.loss_bbox": 0.19625, "s1.loss_cls": 0.05532, "s1.acc": 96.26481, "s1.loss_bbox": 0.08579, "s2.loss_cls": 0.02649, "s2.acc": 96.39372, "s2.loss_bbox": 0.03593, "loss": 0.5575, "time": 1.11878}
{"mode": "train", "epoch": 17, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01687, "loss_rpn_cls": 0.01042, "loss_rpn_bbox": 0.01679, "s0.loss_cls": 0.12477, "s0.acc": 95.68896, "s0.loss_bbox": 0.19579, "s1.loss_cls": 0.05358, "s1.acc": 96.33308, "s1.loss_bbox": 0.08588, "s2.loss_cls": 0.0257, "s2.acc": 96.39834, "s2.loss_bbox": 0.03633, "loss": 0.54924, "time": 1.11345}
{"mode": "train", "epoch": 17, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01676, "loss_rpn_cls": 0.0107, "loss_rpn_bbox": 0.01492, "s0.loss_cls": 0.11954, "s0.acc": 95.90381, "s0.loss_bbox": 0.18869, "s1.loss_cls": 0.05269, "s1.acc": 96.37904, "s1.loss_bbox": 0.08315, "s2.loss_cls": 0.02576, "s2.acc": 96.41085, "s2.loss_bbox": 0.03599, "loss": 0.53144, "time": 1.12268}
{"mode": "train", "epoch": 17, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01728, "loss_rpn_cls": 0.00985, "loss_rpn_bbox": 0.01404, "s0.loss_cls": 0.11474, "s0.acc": 96.13428, "s0.loss_bbox": 0.17712, "s1.loss_cls": 0.05007, "s1.acc": 96.66884, "s1.loss_bbox": 0.07774, "s2.loss_cls": 0.02447, "s2.acc": 96.73686, "s2.loss_bbox": 0.03295, "loss": 0.50099, "time": 1.11266}
{"mode": "val", "epoch": 17, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.345, "bbox_mAP_50": 0.473, "bbox_mAP_75": 0.371, "bbox_mAP_s": 0.027, "bbox_mAP_m": 0.061, "bbox_mAP_l": 0.41, "bbox_mAP_copypaste": "0.345 0.473 0.371 0.027 0.061 0.410"}
{"mode": "train", "epoch": 18, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06563, "loss_rpn_cls": 0.01277, "loss_rpn_bbox": 0.01942, "s0.loss_cls": 0.13207, "s0.acc": 95.48145, "s0.loss_bbox": 0.20096, "s1.loss_cls": 0.05773, "s1.acc": 96.06846, "s1.loss_bbox": 0.08575, "s2.loss_cls": 0.02779, "s2.acc": 96.14257, "s2.loss_bbox": 0.03564, "loss": 0.57213, "time": 1.19058}
{"mode": "train", "epoch": 18, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01597, "loss_rpn_cls": 0.00935, "loss_rpn_bbox": 0.01421, "s0.loss_cls": 0.11397, "s0.acc": 96.11719, "s0.loss_bbox": 0.17816, "s1.loss_cls": 0.04875, "s1.acc": 96.75892, "s1.loss_bbox": 0.07777, "s2.loss_cls": 0.02345, "s2.acc": 96.83572, "s2.loss_bbox": 0.03272, "loss": 0.49838, "time": 1.11887}
{"mode": "train", "epoch": 18, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01656, "loss_rpn_cls": 0.0109, "loss_rpn_bbox": 0.01819, "s0.loss_cls": 0.13033, "s0.acc": 95.50586, "s0.loss_bbox": 0.19399, "s1.loss_cls": 0.05679, "s1.acc": 96.02564, "s1.loss_bbox": 0.08437, "s2.loss_cls": 0.0271, "s2.acc": 96.23625, "s2.loss_bbox": 0.0351, "loss": 0.55678, "time": 1.11897}
{"mode": "train", "epoch": 18, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01628, "loss_rpn_cls": 0.0111, "loss_rpn_bbox": 0.01603, "s0.loss_cls": 0.12416, "s0.acc": 95.80273, "s0.loss_bbox": 0.18192, "s1.loss_cls": 0.05405, "s1.acc": 96.34773, "s1.loss_bbox": 0.07953, "s2.loss_cls": 0.02567, "s2.acc": 96.47615, "s2.loss_bbox": 0.03398, "loss": 0.52643, "time": 1.11244}
{"mode": "train", "epoch": 18, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01639, "loss_rpn_cls": 0.00962, "loss_rpn_bbox": 0.014, "s0.loss_cls": 0.11992, "s0.acc": 95.95703, "s0.loss_bbox": 0.18577, "s1.loss_cls": 0.05287, "s1.acc": 96.42432, "s1.loss_bbox": 0.08203, "s2.loss_cls": 0.02621, "s2.acc": 96.44161, "s2.loss_bbox": 0.03477, "loss": 0.52519, "time": 1.12007}
{"mode": "train", "epoch": 18, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01756, "loss_rpn_cls": 0.01052, "loss_rpn_bbox": 0.01454, "s0.loss_cls": 0.12183, "s0.acc": 95.86426, "s0.loss_bbox": 0.19107, "s1.loss_cls": 0.05085, "s1.acc": 96.62052, "s1.loss_bbox": 0.08345, "s2.loss_cls": 0.02481, "s2.acc": 96.70461, "s2.loss_bbox": 0.03558, "loss": 0.53264, "time": 1.13339}
{"mode": "train", "epoch": 18, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01701, "loss_rpn_cls": 0.01108, "loss_rpn_bbox": 0.01584, "s0.loss_cls": 0.12043, "s0.acc": 95.86279, "s0.loss_bbox": 0.18625, "s1.loss_cls": 0.05228, "s1.acc": 96.45463, "s1.loss_bbox": 0.08096, "s2.loss_cls": 0.02512, "s2.acc": 96.50977, "s2.loss_bbox": 0.03426, "loss": 0.52622, "time": 1.13255}
{"mode": "train", "epoch": 18, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01695, "loss_rpn_cls": 0.01203, "loss_rpn_bbox": 0.01668, "s0.loss_cls": 0.126, "s0.acc": 95.75635, "s0.loss_bbox": 0.19552, "s1.loss_cls": 0.05389, "s1.acc": 96.48028, "s1.loss_bbox": 0.08426, "s2.loss_cls": 0.02555, "s2.acc": 96.68844, "s2.loss_bbox": 0.03617, "loss": 0.55011, "time": 1.11649}
{"mode": "train", "epoch": 18, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01656, "loss_rpn_cls": 0.01137, "loss_rpn_bbox": 0.01692, "s0.loss_cls": 0.1269, "s0.acc": 95.62256, "s0.loss_bbox": 0.19479, "s1.loss_cls": 0.05414, "s1.acc": 96.38924, "s1.loss_bbox": 0.08574, "s2.loss_cls": 0.02631, "s2.acc": 96.43139, "s2.loss_bbox": 0.03563, "loss": 0.5518, "time": 1.11775}
{"mode": "val", "epoch": 18, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.346, "bbox_mAP_50": 0.476, "bbox_mAP_75": 0.37, "bbox_mAP_s": 0.028, "bbox_mAP_m": 0.062, "bbox_mAP_l": 0.412, "bbox_mAP_copypaste": "0.346 0.476 0.370 0.028 0.062 0.412"}
{"mode": "train", "epoch": 19, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06524, "loss_rpn_cls": 0.0097, "loss_rpn_bbox": 0.01488, "s0.loss_cls": 0.12549, "s0.acc": 95.77637, "s0.loss_bbox": 0.1886, "s1.loss_cls": 0.05483, "s1.acc": 96.37225, "s1.loss_bbox": 0.08237, "s2.loss_cls": 0.02588, "s2.acc": 96.53814, "s2.loss_bbox": 0.03445, "loss": 0.5362, "time": 1.1814}
{"mode": "train", "epoch": 19, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01632, "loss_rpn_cls": 0.01083, "loss_rpn_bbox": 0.01602, "s0.loss_cls": 0.12043, "s0.acc": 95.89502, "s0.loss_bbox": 0.18203, "s1.loss_cls": 0.05239, "s1.acc": 96.46997, "s1.loss_bbox": 0.07908, "s2.loss_cls": 0.02521, "s2.acc": 96.54186, "s2.loss_bbox": 0.03346, "loss": 0.51945, "time": 1.10021}
{"mode": "train", "epoch": 19, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01636, "loss_rpn_cls": 0.01066, "loss_rpn_bbox": 0.01572, "s0.loss_cls": 0.12008, "s0.acc": 95.80371, "s0.loss_bbox": 0.18931, "s1.loss_cls": 0.0524, "s1.acc": 96.39786, "s1.loss_bbox": 0.0837, "s2.loss_cls": 0.02566, "s2.acc": 96.3529, "s2.loss_bbox": 0.03569, "loss": 0.53321, "time": 1.11267}
{"mode": "train", "epoch": 19, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01696, "loss_rpn_cls": 0.0122, "loss_rpn_bbox": 0.01886, "s0.loss_cls": 0.13853, "s0.acc": 95.29102, "s0.loss_bbox": 0.20846, "s1.loss_cls": 0.06016, "s1.acc": 95.9227, "s1.loss_bbox": 0.0909, "s2.loss_cls": 0.02918, "s2.acc": 95.94308, "s2.loss_bbox": 0.03803, "loss": 0.59632, "time": 1.11845}
{"mode": "train", "epoch": 19, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01671, "loss_rpn_cls": 0.01158, "loss_rpn_bbox": 0.01594, "s0.loss_cls": 0.12731, "s0.acc": 95.71582, "s0.loss_bbox": 0.19153, "s1.loss_cls": 0.0547, "s1.acc": 96.39019, "s1.loss_bbox": 0.08389, "s2.loss_cls": 0.02594, "s2.acc": 96.52536, "s2.loss_bbox": 0.03588, "loss": 0.54678, "time": 1.12284}
{"mode": "train", "epoch": 19, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01695, "loss_rpn_cls": 0.01141, "loss_rpn_bbox": 0.01705, "s0.loss_cls": 0.12706, "s0.acc": 95.60645, "s0.loss_bbox": 0.2015, "s1.loss_cls": 0.05393, "s1.acc": 96.34119, "s1.loss_bbox": 0.08593, "s2.loss_cls": 0.02586, "s2.acc": 96.39148, "s2.loss_bbox": 0.03618, "loss": 0.55891, "time": 1.12155}
{"mode": "train", "epoch": 19, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01679, "loss_rpn_cls": 0.01063, "loss_rpn_bbox": 0.01515, "s0.loss_cls": 0.11329, "s0.acc": 96.13672, "s0.loss_bbox": 0.17933, "s1.loss_cls": 0.04862, "s1.acc": 96.78504, "s1.loss_bbox": 0.07894, "s2.loss_cls": 0.02344, "s2.acc": 96.80007, "s2.loss_bbox": 0.03313, "loss": 0.50253, "time": 1.10963}
{"mode": "train", "epoch": 19, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01657, "loss_rpn_cls": 0.00957, "loss_rpn_bbox": 0.01473, "s0.loss_cls": 0.11273, "s0.acc": 96.17236, "s0.loss_bbox": 0.17748, "s1.loss_cls": 0.04825, "s1.acc": 96.74242, "s1.loss_bbox": 0.07773, "s2.loss_cls": 0.02368, "s2.acc": 96.71909, "s2.loss_bbox": 0.03318, "loss": 0.49735, "time": 1.11685}
{"mode": "train", "epoch": 19, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01696, "loss_rpn_cls": 0.01082, "loss_rpn_bbox": 0.01591, "s0.loss_cls": 0.11588, "s0.acc": 96.01465, "s0.loss_bbox": 0.18212, "s1.loss_cls": 0.04975, "s1.acc": 96.64421, "s1.loss_bbox": 0.07969, "s2.loss_cls": 0.02444, "s2.acc": 96.6842, "s2.loss_bbox": 0.03428, "loss": 0.51289, "time": 1.12632}
{"mode": "val", "epoch": 19, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.345, "bbox_mAP_50": 0.475, "bbox_mAP_75": 0.368, "bbox_mAP_s": 0.027, "bbox_mAP_m": 0.054, "bbox_mAP_l": 0.412, "bbox_mAP_copypaste": "0.345 0.475 0.368 0.027 0.054 0.412"}
{"mode": "train", "epoch": 20, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06518, "loss_rpn_cls": 0.00886, "loss_rpn_bbox": 0.01608, "s0.loss_cls": 0.11236, "s0.acc": 96.09277, "s0.loss_bbox": 0.18235, "s1.loss_cls": 0.0503, "s1.acc": 96.61516, "s1.loss_bbox": 0.08169, "s2.loss_cls": 0.02464, "s2.acc": 96.67368, "s2.loss_bbox": 0.0348, "loss": 0.51107, "time": 1.16364}
{"mode": "train", "epoch": 20, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01654, "loss_rpn_cls": 0.0106, "loss_rpn_bbox": 0.01762, "s0.loss_cls": 0.12574, "s0.acc": 95.72217, "s0.loss_bbox": 0.19713, "s1.loss_cls": 0.05341, "s1.acc": 96.48451, "s1.loss_bbox": 0.08487, "s2.loss_cls": 0.02573, "s2.acc": 96.48319, "s2.loss_bbox": 0.03553, "loss": 0.55063, "time": 1.12081}
{"mode": "train", "epoch": 20, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01641, "loss_rpn_cls": 0.00939, "loss_rpn_bbox": 0.01508, "s0.loss_cls": 0.11691, "s0.acc": 96.00244, "s0.loss_bbox": 0.17872, "s1.loss_cls": 0.05204, "s1.acc": 96.54487, "s1.loss_bbox": 0.07764, "s2.loss_cls": 0.02438, "s2.acc": 96.6805, "s2.loss_bbox": 0.03255, "loss": 0.50669, "time": 1.1155}
{"mode": "train", "epoch": 20, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01689, "loss_rpn_cls": 0.01178, "loss_rpn_bbox": 0.0158, "s0.loss_cls": 0.12027, "s0.acc": 95.8125, "s0.loss_bbox": 0.1916, "s1.loss_cls": 0.05006, "s1.acc": 96.58271, "s1.loss_bbox": 0.08239, "s2.loss_cls": 0.02377, "s2.acc": 96.71766, "s2.loss_bbox": 0.0347, "loss": 0.53037, "time": 1.11938}
{"mode": "train", "epoch": 20, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01687, "loss_rpn_cls": 0.01077, "loss_rpn_bbox": 0.0179, "s0.loss_cls": 0.12866, "s0.acc": 95.64307, "s0.loss_bbox": 0.19333, "s1.loss_cls": 0.05578, "s1.acc": 96.2694, "s1.loss_bbox": 0.08382, "s2.loss_cls": 0.02652, "s2.acc": 96.39215, "s2.loss_bbox": 0.03514, "loss": 0.55192, "time": 1.11372}
{"mode": "train", "epoch": 20, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01704, "loss_rpn_cls": 0.01096, "loss_rpn_bbox": 0.01609, "s0.loss_cls": 0.11739, "s0.acc": 96.02588, "s0.loss_bbox": 0.18609, "s1.loss_cls": 0.04894, "s1.acc": 96.72477, "s1.loss_bbox": 0.08001, "s2.loss_cls": 0.02347, "s2.acc": 96.80457, "s2.loss_bbox": 0.0339, "loss": 0.51684, "time": 1.1174}
{"mode": "train", "epoch": 20, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01735, "loss_rpn_cls": 0.01125, "loss_rpn_bbox": 0.01569, "s0.loss_cls": 0.12821, "s0.acc": 95.6543, "s0.loss_bbox": 0.19937, "s1.loss_cls": 0.0549, "s1.acc": 96.33927, "s1.loss_bbox": 0.08676, "s2.loss_cls": 0.02626, "s2.acc": 96.50857, "s2.loss_bbox": 0.03691, "loss": 0.55935, "time": 1.11906}
{"mode": "train", "epoch": 20, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01708, "loss_rpn_cls": 0.01093, "loss_rpn_bbox": 0.01695, "s0.loss_cls": 0.13331, "s0.acc": 95.45361, "s0.loss_bbox": 0.20463, "s1.loss_cls": 0.05632, "s1.acc": 96.25916, "s1.loss_bbox": 0.08782, "s2.loss_cls": 0.02656, "s2.acc": 96.36619, "s2.loss_bbox": 0.03714, "loss": 0.57366, "time": 1.11563}
{"mode": "train", "epoch": 20, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01692, "loss_rpn_cls": 0.01032, "loss_rpn_bbox": 0.01421, "s0.loss_cls": 0.11281, "s0.acc": 96.16064, "s0.loss_bbox": 0.17375, "s1.loss_cls": 0.04791, "s1.acc": 96.75436, "s1.loss_bbox": 0.07631, "s2.loss_cls": 0.02246, "s2.acc": 96.96782, "s2.loss_bbox": 0.03304, "loss": 0.49081, "time": 1.11753}
{"mode": "val", "epoch": 20, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.347, "bbox_mAP_50": 0.476, "bbox_mAP_75": 0.372, "bbox_mAP_s": 0.028, "bbox_mAP_m": 0.063, "bbox_mAP_l": 0.412, "bbox_mAP_copypaste": "0.347 0.476 0.372 0.028 0.063 0.412"}
{"mode": "train", "epoch": 21, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06553, "loss_rpn_cls": 0.00941, "loss_rpn_bbox": 0.01552, "s0.loss_cls": 0.11599, "s0.acc": 95.98145, "s0.loss_bbox": 0.18129, "s1.loss_cls": 0.04985, "s1.acc": 96.54187, "s1.loss_bbox": 0.0789, "s2.loss_cls": 0.02411, "s2.acc": 96.53801, "s2.loss_bbox": 0.03381, "loss": 0.50888, "time": 1.18156}
{"mode": "train", "epoch": 21, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01659, "loss_rpn_cls": 0.0101, "loss_rpn_bbox": 0.01567, "s0.loss_cls": 0.11131, "s0.acc": 96.14746, "s0.loss_bbox": 0.18049, "s1.loss_cls": 0.04932, "s1.acc": 96.68214, "s1.loss_bbox": 0.07946, "s2.loss_cls": 0.02368, "s2.acc": 96.84786, "s2.loss_bbox": 0.03319, "loss": 0.50322, "time": 1.11516}
{"mode": "train", "epoch": 21, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.0173, "loss_rpn_cls": 0.01088, "loss_rpn_bbox": 0.0169, "s0.loss_cls": 0.12673, "s0.acc": 95.74756, "s0.loss_bbox": 0.19843, "s1.loss_cls": 0.05389, "s1.acc": 96.32969, "s1.loss_bbox": 0.08571, "s2.loss_cls": 0.02591, "s2.acc": 96.48971, "s2.loss_bbox": 0.03626, "loss": 0.55471, "time": 1.11714}
{"mode": "train", "epoch": 21, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01693, "loss_rpn_cls": 0.01125, "loss_rpn_bbox": 0.01553, "s0.loss_cls": 0.11989, "s0.acc": 95.93848, "s0.loss_bbox": 0.19035, "s1.loss_cls": 0.05103, "s1.acc": 96.62854, "s1.loss_bbox": 0.0839, "s2.loss_cls": 0.02438, "s2.acc": 96.63195, "s2.loss_bbox": 0.03592, "loss": 0.53225, "time": 1.12059}
{"mode": "train", "epoch": 21, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.0166, "loss_rpn_cls": 0.01303, "loss_rpn_bbox": 0.01669, "s0.loss_cls": 0.12705, "s0.acc": 95.65625, "s0.loss_bbox": 0.19516, "s1.loss_cls": 0.05503, "s1.acc": 96.26251, "s1.loss_bbox": 0.08432, "s2.loss_cls": 0.02611, "s2.acc": 96.42865, "s2.loss_bbox": 0.03488, "loss": 0.55228, "time": 1.13256}
{"mode": "train", "epoch": 21, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.0167, "loss_rpn_cls": 0.00932, "loss_rpn_bbox": 0.01512, "s0.loss_cls": 0.11713, "s0.acc": 95.98145, "s0.loss_bbox": 0.18668, "s1.loss_cls": 0.04857, "s1.acc": 96.77409, "s1.loss_bbox": 0.08001, "s2.loss_cls": 0.02295, "s2.acc": 96.94513, "s2.loss_bbox": 0.03413, "loss": 0.5139, "time": 1.11032}
{"mode": "train", "epoch": 21, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01746, "loss_rpn_cls": 0.00865, "loss_rpn_bbox": 0.01452, "s0.loss_cls": 0.11171, "s0.acc": 96.16846, "s0.loss_bbox": 0.18071, "s1.loss_cls": 0.047, "s1.acc": 96.87796, "s1.loss_bbox": 0.08057, "s2.loss_cls": 0.02296, "s2.acc": 96.90666, "s2.loss_bbox": 0.03472, "loss": 0.50083, "time": 1.1296}
{"mode": "train", "epoch": 21, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01745, "loss_rpn_cls": 0.01, "loss_rpn_bbox": 0.01689, "s0.loss_cls": 0.11687, "s0.acc": 95.94385, "s0.loss_bbox": 0.18011, "s1.loss_cls": 0.05121, "s1.acc": 96.56721, "s1.loss_bbox": 0.07883, "s2.loss_cls": 0.02457, "s2.acc": 96.64507, "s2.loss_bbox": 0.03339, "loss": 0.51187, "time": 1.12904}
{"mode": "train", "epoch": 21, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01687, "loss_rpn_cls": 0.01105, "loss_rpn_bbox": 0.01651, "s0.loss_cls": 0.1163, "s0.acc": 96.04102, "s0.loss_bbox": 0.18216, "s1.loss_cls": 0.05017, "s1.acc": 96.56897, "s1.loss_bbox": 0.07969, "s2.loss_cls": 0.02421, "s2.acc": 96.58061, "s2.loss_bbox": 0.03393, "loss": 0.51401, "time": 1.12593}
{"mode": "val", "epoch": 21, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.347, "bbox_mAP_50": 0.476, "bbox_mAP_75": 0.372, "bbox_mAP_s": 0.027, "bbox_mAP_m": 0.062, "bbox_mAP_l": 0.413, "bbox_mAP_copypaste": "0.347 0.476 0.372 0.027 0.062 0.413"}
{"mode": "train", "epoch": 22, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06504, "loss_rpn_cls": 0.01114, "loss_rpn_bbox": 0.01709, "s0.loss_cls": 0.12114, "s0.acc": 95.89795, "s0.loss_bbox": 0.18992, "s1.loss_cls": 0.05238, "s1.acc": 96.47854, "s1.loss_bbox": 0.08213, "s2.loss_cls": 0.02455, "s2.acc": 96.68216, "s2.loss_bbox": 0.03442, "loss": 0.53278, "time": 1.17092}
{"mode": "train", "epoch": 22, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01688, "loss_rpn_cls": 0.01154, "loss_rpn_bbox": 0.01724, "s0.loss_cls": 0.12293, "s0.acc": 95.73535, "s0.loss_bbox": 0.19879, "s1.loss_cls": 0.05249, "s1.acc": 96.35792, "s1.loss_bbox": 0.08602, "s2.loss_cls": 0.02487, "s2.acc": 96.50036, "s2.loss_bbox": 0.03642, "loss": 0.55028, "time": 1.11749}
{"mode": "train", "epoch": 22, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01719, "loss_rpn_cls": 0.00961, "loss_rpn_bbox": 0.01661, "s0.loss_cls": 0.11663, "s0.acc": 95.9668, "s0.loss_bbox": 0.18486, "s1.loss_cls": 0.05013, "s1.acc": 96.61386, "s1.loss_bbox": 0.08012, "s2.loss_cls": 0.02406, "s2.acc": 96.75232, "s2.loss_bbox": 0.03435, "loss": 0.51635, "time": 1.11435}
{"mode": "train", "epoch": 22, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01734, "loss_rpn_cls": 0.0104, "loss_rpn_bbox": 0.0156, "s0.loss_cls": 0.11766, "s0.acc": 96.0, "s0.loss_bbox": 0.18716, "s1.loss_cls": 0.04867, "s1.acc": 96.77298, "s1.loss_bbox": 0.08045, "s2.loss_cls": 0.02329, "s2.acc": 96.80087, "s2.loss_bbox": 0.03425, "loss": 0.51748, "time": 1.12655}
{"mode": "train", "epoch": 22, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01666, "loss_rpn_cls": 0.00996, "loss_rpn_bbox": 0.01653, "s0.loss_cls": 0.12257, "s0.acc": 95.81006, "s0.loss_bbox": 0.18868, "s1.loss_cls": 0.05392, "s1.acc": 96.33279, "s1.loss_bbox": 0.08218, "s2.loss_cls": 0.02556, "s2.acc": 96.53923, "s2.loss_bbox": 0.03412, "loss": 0.53353, "time": 1.10563}
{"mode": "train", "epoch": 22, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01741, "loss_rpn_cls": 0.0086, "loss_rpn_bbox": 0.01361, "s0.loss_cls": 0.10765, "s0.acc": 96.25928, "s0.loss_bbox": 0.16801, "s1.loss_cls": 0.04524, "s1.acc": 96.89245, "s1.loss_bbox": 0.07357, "s2.loss_cls": 0.02149, "s2.acc": 96.97189, "s2.loss_bbox": 0.03164, "loss": 0.4698, "time": 1.12169}
{"mode": "train", "epoch": 22, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01694, "loss_rpn_cls": 0.01032, "loss_rpn_bbox": 0.01695, "s0.loss_cls": 0.11754, "s0.acc": 95.99902, "s0.loss_bbox": 0.18532, "s1.loss_cls": 0.04921, "s1.acc": 96.75092, "s1.loss_bbox": 0.08007, "s2.loss_cls": 0.02384, "s2.acc": 96.8097, "s2.loss_bbox": 0.03406, "loss": 0.5173, "time": 1.11443}
{"mode": "train", "epoch": 22, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01751, "loss_rpn_cls": 0.00947, "loss_rpn_bbox": 0.01723, "s0.loss_cls": 0.12591, "s0.acc": 95.75342, "s0.loss_bbox": 0.20162, "s1.loss_cls": 0.05223, "s1.acc": 96.48339, "s1.loss_bbox": 0.08698, "s2.loss_cls": 0.02474, "s2.acc": 96.50824, "s2.loss_bbox": 0.03641, "loss": 0.55461, "time": 1.12402}
{"mode": "train", "epoch": 22, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01698, "loss_rpn_cls": 0.01147, "loss_rpn_bbox": 0.01465, "s0.loss_cls": 0.11436, "s0.acc": 96.09033, "s0.loss_bbox": 0.17547, "s1.loss_cls": 0.04899, "s1.acc": 96.69828, "s1.loss_bbox": 0.07817, "s2.loss_cls": 0.02374, "s2.acc": 96.76334, "s2.loss_bbox": 0.03389, "loss": 0.50074, "time": 1.11417}
{"mode": "val", "epoch": 22, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.345, "bbox_mAP_50": 0.474, "bbox_mAP_75": 0.371, "bbox_mAP_s": 0.026, "bbox_mAP_m": 0.062, "bbox_mAP_l": 0.411, "bbox_mAP_copypaste": "0.345 0.474 0.371 0.026 0.062 0.411"}
{"mode": "train", "epoch": 23, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06447, "loss_rpn_cls": 0.0101, "loss_rpn_bbox": 0.01578, "s0.loss_cls": 0.12217, "s0.acc": 95.92676, "s0.loss_bbox": 0.18773, "s1.loss_cls": 0.05177, "s1.acc": 96.61486, "s1.loss_bbox": 0.08221, "s2.loss_cls": 0.0244, "s2.acc": 96.75755, "s2.loss_bbox": 0.03474, "loss": 0.52891, "time": 1.15325}
{"mode": "train", "epoch": 23, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01656, "loss_rpn_cls": 0.01004, "loss_rpn_bbox": 0.01797, "s0.loss_cls": 0.12092, "s0.acc": 95.84424, "s0.loss_bbox": 0.19047, "s1.loss_cls": 0.05194, "s1.acc": 96.4379, "s1.loss_bbox": 0.08291, "s2.loss_cls": 0.02506, "s2.acc": 96.57114, "s2.loss_bbox": 0.03525, "loss": 0.53457, "time": 1.09963}
{"mode": "train", "epoch": 23, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.0174, "loss_rpn_cls": 0.0099, "loss_rpn_bbox": 0.01597, "s0.loss_cls": 0.11858, "s0.acc": 95.91504, "s0.loss_bbox": 0.19093, "s1.loss_cls": 0.0511, "s1.acc": 96.53848, "s1.loss_bbox": 0.08411, "s2.loss_cls": 0.02479, "s2.acc": 96.47662, "s2.loss_bbox": 0.03594, "loss": 0.53133, "time": 1.11746}
{"mode": "train", "epoch": 23, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.0176, "loss_rpn_cls": 0.01003, "loss_rpn_bbox": 0.01519, "s0.loss_cls": 0.1167, "s0.acc": 95.93164, "s0.loss_bbox": 0.18754, "s1.loss_cls": 0.05127, "s1.acc": 96.3839, "s1.loss_bbox": 0.08163, "s2.loss_cls": 0.02414, "s2.acc": 96.66519, "s2.loss_bbox": 0.03485, "loss": 0.52136, "time": 1.12215}
{"mode": "train", "epoch": 23, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01696, "loss_rpn_cls": 0.00928, "loss_rpn_bbox": 0.01603, "s0.loss_cls": 0.11619, "s0.acc": 95.96875, "s0.loss_bbox": 0.18937, "s1.loss_cls": 0.04945, "s1.acc": 96.68031, "s1.loss_bbox": 0.08228, "s2.loss_cls": 0.02365, "s2.acc": 96.82103, "s2.loss_bbox": 0.0351, "loss": 0.52135, "time": 1.11112}
{"mode": "train", "epoch": 23, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01719, "loss_rpn_cls": 0.01094, "loss_rpn_bbox": 0.0157, "s0.loss_cls": 0.11645, "s0.acc": 96.07617, "s0.loss_bbox": 0.17737, "s1.loss_cls": 0.05048, "s1.acc": 96.70322, "s1.loss_bbox": 0.07753, "s2.loss_cls": 0.02385, "s2.acc": 96.89907, "s2.loss_bbox": 0.03292, "loss": 0.50526, "time": 1.12042}
{"mode": "train", "epoch": 23, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.0182, "loss_rpn_cls": 0.01019, "loss_rpn_bbox": 0.01578, "s0.loss_cls": 0.11726, "s0.acc": 96.01709, "s0.loss_bbox": 0.18725, "s1.loss_cls": 0.05046, "s1.acc": 96.59427, "s1.loss_bbox": 0.08141, "s2.loss_cls": 0.02388, "s2.acc": 96.67142, "s2.loss_bbox": 0.03477, "loss": 0.521, "time": 1.12946}
{"mode": "train", "epoch": 23, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01771, "loss_rpn_cls": 0.0096, "loss_rpn_bbox": 0.01423, "s0.loss_cls": 0.11026, "s0.acc": 96.1626, "s0.loss_bbox": 0.18246, "s1.loss_cls": 0.04669, "s1.acc": 96.80636, "s1.loss_bbox": 0.07976, "s2.loss_cls": 0.02246, "s2.acc": 96.89153, "s2.loss_bbox": 0.03369, "loss": 0.49916, "time": 1.11584}
{"mode": "train", "epoch": 23, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01703, "loss_rpn_cls": 0.00837, "loss_rpn_bbox": 0.01479, "s0.loss_cls": 0.1038, "s0.acc": 96.4458, "s0.loss_bbox": 0.16817, "s1.loss_cls": 0.04401, "s1.acc": 97.03842, "s1.loss_bbox": 0.07497, "s2.loss_cls": 0.02153, "s2.acc": 96.99733, "s2.loss_bbox": 0.03215, "loss": 0.4678, "time": 1.11311}
{"mode": "val", "epoch": 23, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.345, "bbox_mAP_50": 0.476, "bbox_mAP_75": 0.368, "bbox_mAP_s": 0.027, "bbox_mAP_m": 0.056, "bbox_mAP_l": 0.411, "bbox_mAP_copypaste": "0.345 0.476 0.368 0.027 0.056 0.411"}
{"mode": "train", "epoch": 24, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06517, "loss_rpn_cls": 0.00973, "loss_rpn_bbox": 0.01366, "s0.loss_cls": 0.10785, "s0.acc": 96.24023, "s0.loss_bbox": 0.17933, "s1.loss_cls": 0.04489, "s1.acc": 96.82833, "s1.loss_bbox": 0.07967, "s2.loss_cls": 0.02182, "s2.acc": 96.83786, "s2.loss_bbox": 0.03433, "loss": 0.49128, "time": 1.15563}
{"mode": "train", "epoch": 24, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01676, "loss_rpn_cls": 0.01079, "loss_rpn_bbox": 0.01802, "s0.loss_cls": 0.1178, "s0.acc": 95.99609, "s0.loss_bbox": 0.18645, "s1.loss_cls": 0.05045, "s1.acc": 96.64861, "s1.loss_bbox": 0.08037, "s2.loss_cls": 0.02452, "s2.acc": 96.67326, "s2.loss_bbox": 0.03364, "loss": 0.52204, "time": 1.10292}
{"mode": "train", "epoch": 24, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01708, "loss_rpn_cls": 0.01152, "loss_rpn_bbox": 0.01668, "s0.loss_cls": 0.11839, "s0.acc": 95.92676, "s0.loss_bbox": 0.18975, "s1.loss_cls": 0.05053, "s1.acc": 96.60339, "s1.loss_bbox": 0.08231, "s2.loss_cls": 0.02433, "s2.acc": 96.74651, "s2.loss_bbox": 0.03518, "loss": 0.52869, "time": 1.1189}
{"mode": "train", "epoch": 24, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01718, "loss_rpn_cls": 0.00948, "loss_rpn_bbox": 0.01397, "s0.loss_cls": 0.1144, "s0.acc": 96.09131, "s0.loss_bbox": 0.18294, "s1.loss_cls": 0.04908, "s1.acc": 96.68647, "s1.loss_bbox": 0.08033, "s2.loss_cls": 0.02339, "s2.acc": 96.73513, "s2.loss_bbox": 0.03451, "loss": 0.50809, "time": 1.12685}
{"mode": "train", "epoch": 24, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01706, "loss_rpn_cls": 0.00974, "loss_rpn_bbox": 0.0164, "s0.loss_cls": 0.11563, "s0.acc": 96.08643, "s0.loss_bbox": 0.18444, "s1.loss_cls": 0.04859, "s1.acc": 96.82317, "s1.loss_bbox": 0.08019, "s2.loss_cls": 0.02287, "s2.acc": 96.91348, "s2.loss_bbox": 0.03423, "loss": 0.51208, "time": 1.13172}
{"mode": "train", "epoch": 24, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01702, "loss_rpn_cls": 0.01045, "loss_rpn_bbox": 0.01623, "s0.loss_cls": 0.11913, "s0.acc": 95.91357, "s0.loss_bbox": 0.19665, "s1.loss_cls": 0.04963, "s1.acc": 96.6403, "s1.loss_bbox": 0.08421, "s2.loss_cls": 0.02392, "s2.acc": 96.81876, "s2.loss_bbox": 0.03595, "loss": 0.53617, "time": 1.11979}
{"mode": "train", "epoch": 24, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01742, "loss_rpn_cls": 0.01052, "loss_rpn_bbox": 0.01478, "s0.loss_cls": 0.11212, "s0.acc": 96.15479, "s0.loss_bbox": 0.18371, "s1.loss_cls": 0.04744, "s1.acc": 96.88751, "s1.loss_bbox": 0.07949, "s2.loss_cls": 0.02235, "s2.acc": 97.0341, "s2.loss_bbox": 0.03403, "loss": 0.50443, "time": 1.11381}
{"mode": "train", "epoch": 24, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.0174, "loss_rpn_cls": 0.00922, "loss_rpn_bbox": 0.0148, "s0.loss_cls": 0.11082, "s0.acc": 96.27734, "s0.loss_bbox": 0.17412, "s1.loss_cls": 0.04796, "s1.acc": 96.83506, "s1.loss_bbox": 0.07695, "s2.loss_cls": 0.0226, "s2.acc": 97.06813, "s2.loss_bbox": 0.03261, "loss": 0.48906, "time": 1.11886}
{"mode": "train", "epoch": 24, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01723, "loss_rpn_cls": 0.01085, "loss_rpn_bbox": 0.01694, "s0.loss_cls": 0.1213, "s0.acc": 95.85205, "s0.loss_bbox": 0.19682, "s1.loss_cls": 0.05155, "s1.acc": 96.53701, "s1.loss_bbox": 0.08582, "s2.loss_cls": 0.02415, "s2.acc": 96.70445, "s2.loss_bbox": 0.03622, "loss": 0.54365, "time": 1.1289}
{"mode": "val", "epoch": 24, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.344, "bbox_mAP_50": 0.475, "bbox_mAP_75": 0.365, "bbox_mAP_s": 0.027, "bbox_mAP_m": 0.052, "bbox_mAP_l": 0.41, "bbox_mAP_copypaste": "0.344 0.475 0.365 0.027 0.052 0.410"}
{"mode": "train", "epoch": 25, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06554, "loss_rpn_cls": 0.00959, "loss_rpn_bbox": 0.01534, "s0.loss_cls": 0.1119, "s0.acc": 96.0835, "s0.loss_bbox": 0.19003, "s1.loss_cls": 0.04704, "s1.acc": 96.7475, "s1.loss_bbox": 0.08335, "s2.loss_cls": 0.02298, "s2.acc": 96.77273, "s2.loss_bbox": 0.03583, "loss": 0.51607, "time": 1.17314}
{"mode": "train", "epoch": 25, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01649, "loss_rpn_cls": 0.00942, "loss_rpn_bbox": 0.01423, "s0.loss_cls": 0.10924, "s0.acc": 96.25537, "s0.loss_bbox": 0.17845, "s1.loss_cls": 0.04696, "s1.acc": 96.84836, "s1.loss_bbox": 0.07688, "s2.loss_cls": 0.02178, "s2.acc": 96.98261, "s2.loss_bbox": 0.03222, "loss": 0.48917, "time": 1.10545}
{"mode": "train", "epoch": 25, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01693, "loss_rpn_cls": 0.00883, "loss_rpn_bbox": 0.01551, "s0.loss_cls": 0.1078, "s0.acc": 96.35645, "s0.loss_bbox": 0.16925, "s1.loss_cls": 0.04559, "s1.acc": 96.91014, "s1.loss_bbox": 0.07493, "s2.loss_cls": 0.02138, "s2.acc": 97.07526, "s2.loss_bbox": 0.03213, "loss": 0.47542, "time": 1.12303}
{"mode": "train", "epoch": 25, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01674, "loss_rpn_cls": 0.01125, "loss_rpn_bbox": 0.01775, "s0.loss_cls": 0.12763, "s0.acc": 95.62695, "s0.loss_bbox": 0.20351, "s1.loss_cls": 0.05428, "s1.acc": 96.34887, "s1.loss_bbox": 0.08778, "s2.loss_cls": 0.02572, "s2.acc": 96.46547, "s2.loss_bbox": 0.03672, "loss": 0.56464, "time": 1.114}
{"mode": "train", "epoch": 25, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01774, "loss_rpn_cls": 0.01147, "loss_rpn_bbox": 0.01775, "s0.loss_cls": 0.1314, "s0.acc": 95.46729, "s0.loss_bbox": 0.2063, "s1.loss_cls": 0.05611, "s1.acc": 96.23536, "s1.loss_bbox": 0.08828, "s2.loss_cls": 0.02652, "s2.acc": 96.39762, "s2.loss_bbox": 0.03655, "loss": 0.57437, "time": 1.12478}
{"mode": "train", "epoch": 25, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01729, "loss_rpn_cls": 0.00967, "loss_rpn_bbox": 0.01556, "s0.loss_cls": 0.10736, "s0.acc": 96.3042, "s0.loss_bbox": 0.17256, "s1.loss_cls": 0.04585, "s1.acc": 96.87912, "s1.loss_bbox": 0.07689, "s2.loss_cls": 0.02176, "s2.acc": 97.00219, "s2.loss_bbox": 0.03296, "loss": 0.48261, "time": 1.13199}
{"mode": "train", "epoch": 25, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01696, "loss_rpn_cls": 0.01032, "loss_rpn_bbox": 0.01544, "s0.loss_cls": 0.11817, "s0.acc": 95.96436, "s0.loss_bbox": 0.19145, "s1.loss_cls": 0.04909, "s1.acc": 96.62317, "s1.loss_bbox": 0.08394, "s2.loss_cls": 0.02346, "s2.acc": 96.77469, "s2.loss_bbox": 0.03626, "loss": 0.52813, "time": 1.12079}
{"mode": "train", "epoch": 25, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01675, "loss_rpn_cls": 0.00919, "loss_rpn_bbox": 0.01671, "s0.loss_cls": 0.11755, "s0.acc": 95.99756, "s0.loss_bbox": 0.19657, "s1.loss_cls": 0.04934, "s1.acc": 96.61126, "s1.loss_bbox": 0.0857, "s2.loss_cls": 0.0236, "s2.acc": 96.70936, "s2.loss_bbox": 0.03701, "loss": 0.53567, "time": 1.11408}
{"mode": "train", "epoch": 25, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01689, "loss_rpn_cls": 0.00987, "loss_rpn_bbox": 0.01553, "s0.loss_cls": 0.11424, "s0.acc": 96.10498, "s0.loss_bbox": 0.17737, "s1.loss_cls": 0.0489, "s1.acc": 96.7141, "s1.loss_bbox": 0.07703, "s2.loss_cls": 0.02325, "s2.acc": 96.80464, "s2.loss_bbox": 0.03293, "loss": 0.49912, "time": 1.11534}
{"mode": "val", "epoch": 25, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.346, "bbox_mAP_50": 0.477, "bbox_mAP_75": 0.368, "bbox_mAP_s": 0.027, "bbox_mAP_m": 0.055, "bbox_mAP_l": 0.412, "bbox_mAP_copypaste": "0.346 0.477 0.368 0.027 0.055 0.412"}
{"mode": "train", "epoch": 26, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06596, "loss_rpn_cls": 0.00907, "loss_rpn_bbox": 0.01517, "s0.loss_cls": 0.10287, "s0.acc": 96.52979, "s0.loss_bbox": 0.17127, "s1.loss_cls": 0.0422, "s1.acc": 97.19494, "s1.loss_bbox": 0.07453, "s2.loss_cls": 0.01913, "s2.acc": 97.43109, "s2.loss_bbox": 0.0325, "loss": 0.46673, "time": 1.16916}
{"mode": "train", "epoch": 26, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01798, "loss_rpn_cls": 0.00965, "loss_rpn_bbox": 0.01494, "s0.loss_cls": 0.11321, "s0.acc": 96.05127, "s0.loss_bbox": 0.17979, "s1.loss_cls": 0.04718, "s1.acc": 96.78577, "s1.loss_bbox": 0.07903, "s2.loss_cls": 0.02198, "s2.acc": 97.05548, "s2.loss_bbox": 0.03414, "loss": 0.49991, "time": 1.12464}
{"mode": "train", "epoch": 26, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01668, "loss_rpn_cls": 0.01111, "loss_rpn_bbox": 0.01726, "s0.loss_cls": 0.12201, "s0.acc": 95.81348, "s0.loss_bbox": 0.19705, "s1.loss_cls": 0.05042, "s1.acc": 96.61726, "s1.loss_bbox": 0.08474, "s2.loss_cls": 0.02397, "s2.acc": 96.82197, "s2.loss_bbox": 0.03569, "loss": 0.54225, "time": 1.10793}
{"mode": "train", "epoch": 26, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01771, "loss_rpn_cls": 0.00963, "loss_rpn_bbox": 0.01716, "s0.loss_cls": 0.11489, "s0.acc": 95.91504, "s0.loss_bbox": 0.19375, "s1.loss_cls": 0.04912, "s1.acc": 96.53996, "s1.loss_bbox": 0.08489, "s2.loss_cls": 0.02362, "s2.acc": 96.6028, "s2.loss_bbox": 0.03559, "loss": 0.52866, "time": 1.12359}
{"mode": "train", "epoch": 26, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01776, "loss_rpn_cls": 0.00971, "loss_rpn_bbox": 0.01489, "s0.loss_cls": 0.11312, "s0.acc": 96.04883, "s0.loss_bbox": 0.18135, "s1.loss_cls": 0.04754, "s1.acc": 96.76833, "s1.loss_bbox": 0.07843, "s2.loss_cls": 0.02274, "s2.acc": 96.90352, "s2.loss_bbox": 0.03334, "loss": 0.50111, "time": 1.11367}
{"mode": "train", "epoch": 26, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01708, "loss_rpn_cls": 0.00955, "loss_rpn_bbox": 0.01544, "s0.loss_cls": 0.11253, "s0.acc": 96.06982, "s0.loss_bbox": 0.18506, "s1.loss_cls": 0.04806, "s1.acc": 96.71695, "s1.loss_bbox": 0.08042, "s2.loss_cls": 0.02281, "s2.acc": 96.91136, "s2.loss_bbox": 0.03476, "loss": 0.50863, "time": 1.11039}
{"mode": "train", "epoch": 26, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01678, "loss_rpn_cls": 0.00894, "loss_rpn_bbox": 0.01686, "s0.loss_cls": 0.11139, "s0.acc": 96.14258, "s0.loss_bbox": 0.18045, "s1.loss_cls": 0.04777, "s1.acc": 96.70932, "s1.loss_bbox": 0.07853, "s2.loss_cls": 0.02329, "s2.acc": 96.71798, "s2.loss_bbox": 0.03357, "loss": 0.5008, "time": 1.10665}
{"mode": "train", "epoch": 26, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01735, "loss_rpn_cls": 0.00956, "loss_rpn_bbox": 0.0135, "s0.loss_cls": 0.11068, "s0.acc": 96.15723, "s0.loss_bbox": 0.18173, "s1.loss_cls": 0.04624, "s1.acc": 96.86287, "s1.loss_bbox": 0.08004, "s2.loss_cls": 0.02202, "s2.acc": 96.98793, "s2.loss_bbox": 0.03443, "loss": 0.4982, "time": 1.11681}
{"mode": "train", "epoch": 26, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01714, "loss_rpn_cls": 0.00889, "loss_rpn_bbox": 0.01512, "s0.loss_cls": 0.10687, "s0.acc": 96.24902, "s0.loss_bbox": 0.18381, "s1.loss_cls": 0.0446, "s1.acc": 96.93432, "s1.loss_bbox": 0.08037, "s2.loss_cls": 0.0215, "s2.acc": 97.03505, "s2.loss_bbox": 0.03432, "loss": 0.49547, "time": 1.11088}
{"mode": "val", "epoch": 26, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.345, "bbox_mAP_50": 0.474, "bbox_mAP_75": 0.367, "bbox_mAP_s": 0.027, "bbox_mAP_m": 0.057, "bbox_mAP_l": 0.411, "bbox_mAP_copypaste": "0.345 0.474 0.367 0.027 0.057 0.411"}
{"mode": "train", "epoch": 27, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.0649, "loss_rpn_cls": 0.00746, "loss_rpn_bbox": 0.01364, "s0.loss_cls": 0.1057, "s0.acc": 96.34082, "s0.loss_bbox": 0.17556, "s1.loss_cls": 0.04339, "s1.acc": 96.97152, "s1.loss_bbox": 0.07532, "s2.loss_cls": 0.02039, "s2.acc": 97.07742, "s2.loss_bbox": 0.03235, "loss": 0.47382, "time": 1.15594}
{"mode": "train", "epoch": 27, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.0174, "loss_rpn_cls": 0.01123, "loss_rpn_bbox": 0.01675, "s0.loss_cls": 0.11892, "s0.acc": 95.88184, "s0.loss_bbox": 0.1922, "s1.loss_cls": 0.05082, "s1.acc": 96.56276, "s1.loss_bbox": 0.08268, "s2.loss_cls": 0.02436, "s2.acc": 96.71552, "s2.loss_bbox": 0.03497, "loss": 0.53191, "time": 1.10614}
{"mode": "train", "epoch": 27, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01705, "loss_rpn_cls": 0.0088, "loss_rpn_bbox": 0.01452, "s0.loss_cls": 0.10146, "s0.acc": 96.5249, "s0.loss_bbox": 0.16192, "s1.loss_cls": 0.0424, "s1.acc": 97.153, "s1.loss_bbox": 0.0725, "s2.loss_cls": 0.02017, "s2.acc": 97.25801, "s2.loss_bbox": 0.03205, "loss": 0.45382, "time": 1.11684}
{"mode": "train", "epoch": 27, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01684, "loss_rpn_cls": 0.01027, "loss_rpn_bbox": 0.01506, "s0.loss_cls": 0.10958, "s0.acc": 96.17529, "s0.loss_bbox": 0.18653, "s1.loss_cls": 0.04512, "s1.acc": 96.81977, "s1.loss_bbox": 0.07972, "s2.loss_cls": 0.02119, "s2.acc": 97.02038, "s2.loss_bbox": 0.03373, "loss": 0.5012, "time": 1.11511}
{"mode": "train", "epoch": 27, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01718, "loss_rpn_cls": 0.01035, "loss_rpn_bbox": 0.01506, "s0.loss_cls": 0.11363, "s0.acc": 96.09082, "s0.loss_bbox": 0.18308, "s1.loss_cls": 0.04868, "s1.acc": 96.78258, "s1.loss_bbox": 0.08042, "s2.loss_cls": 0.02256, "s2.acc": 96.95602, "s2.loss_bbox": 0.03445, "loss": 0.50824, "time": 1.12566}
{"mode": "train", "epoch": 27, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01712, "loss_rpn_cls": 0.01077, "loss_rpn_bbox": 0.01759, "s0.loss_cls": 0.11923, "s0.acc": 95.99365, "s0.loss_bbox": 0.20222, "s1.loss_cls": 0.04946, "s1.acc": 96.73222, "s1.loss_bbox": 0.08827, "s2.loss_cls": 0.02358, "s2.acc": 96.81855, "s2.loss_bbox": 0.03672, "loss": 0.54784, "time": 1.10119}
{"mode": "train", "epoch": 27, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01708, "loss_rpn_cls": 0.00789, "loss_rpn_bbox": 0.01416, "s0.loss_cls": 0.10515, "s0.acc": 96.30859, "s0.loss_bbox": 0.17521, "s1.loss_cls": 0.04444, "s1.acc": 96.97693, "s1.loss_bbox": 0.07799, "s2.loss_cls": 0.02169, "s2.acc": 96.94645, "s2.loss_bbox": 0.03381, "loss": 0.48035, "time": 1.11375}
{"mode": "train", "epoch": 27, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01727, "loss_rpn_cls": 0.00987, "loss_rpn_bbox": 0.0158, "s0.loss_cls": 0.11006, "s0.acc": 96.229, "s0.loss_bbox": 0.18347, "s1.loss_cls": 0.04488, "s1.acc": 96.9654, "s1.loss_bbox": 0.07988, "s2.loss_cls": 0.02118, "s2.acc": 97.07456, "s2.loss_bbox": 0.03409, "loss": 0.49923, "time": 1.12697}
{"mode": "train", "epoch": 27, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01727, "loss_rpn_cls": 0.01032, "loss_rpn_bbox": 0.0168, "s0.loss_cls": 0.11885, "s0.acc": 95.93066, "s0.loss_bbox": 0.18994, "s1.loss_cls": 0.05081, "s1.acc": 96.60157, "s1.loss_bbox": 0.08384, "s2.loss_cls": 0.02405, "s2.acc": 96.78052, "s2.loss_bbox": 0.03567, "loss": 0.53026, "time": 1.11}
{"mode": "val", "epoch": 27, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.346, "bbox_mAP_50": 0.474, "bbox_mAP_75": 0.366, "bbox_mAP_s": 0.026, "bbox_mAP_m": 0.058, "bbox_mAP_l": 0.412, "bbox_mAP_copypaste": "0.346 0.474 0.366 0.026 0.058 0.412"}
{"mode": "train", "epoch": 28, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06549, "loss_rpn_cls": 0.01126, "loss_rpn_bbox": 0.01629, "s0.loss_cls": 0.1153, "s0.acc": 96.08789, "s0.loss_bbox": 0.17805, "s1.loss_cls": 0.04864, "s1.acc": 96.75327, "s1.loss_bbox": 0.07631, "s2.loss_cls": 0.02304, "s2.acc": 96.97054, "s2.loss_bbox": 0.03277, "loss": 0.50167, "time": 1.16445}
{"mode": "train", "epoch": 28, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01741, "loss_rpn_cls": 0.00878, "loss_rpn_bbox": 0.01558, "s0.loss_cls": 0.10269, "s0.acc": 96.43164, "s0.loss_bbox": 0.17145, "s1.loss_cls": 0.04167, "s1.acc": 97.23206, "s1.loss_bbox": 0.07352, "s2.loss_cls": 0.01986, "s2.acc": 97.33661, "s2.loss_bbox": 0.03174, "loss": 0.46529, "time": 1.11112}
{"mode": "train", "epoch": 28, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01685, "loss_rpn_cls": 0.01036, "loss_rpn_bbox": 0.01583, "s0.loss_cls": 0.12319, "s0.acc": 95.76367, "s0.loss_bbox": 0.19882, "s1.loss_cls": 0.05144, "s1.acc": 96.52612, "s1.loss_bbox": 0.08642, "s2.loss_cls": 0.02426, "s2.acc": 96.71041, "s2.loss_bbox": 0.03663, "loss": 0.54696, "time": 1.12052}
{"mode": "train", "epoch": 28, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01673, "loss_rpn_cls": 0.00931, "loss_rpn_bbox": 0.01428, "s0.loss_cls": 0.10998, "s0.acc": 96.2124, "s0.loss_bbox": 0.18202, "s1.loss_cls": 0.04644, "s1.acc": 96.88337, "s1.loss_bbox": 0.07875, "s2.loss_cls": 0.02242, "s2.acc": 96.91843, "s2.loss_bbox": 0.03376, "loss": 0.49696, "time": 1.11569}
{"mode": "train", "epoch": 28, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01722, "loss_rpn_cls": 0.01001, "loss_rpn_bbox": 0.01604, "s0.loss_cls": 0.11391, "s0.acc": 96.08252, "s0.loss_bbox": 0.18761, "s1.loss_cls": 0.048, "s1.acc": 96.72217, "s1.loss_bbox": 0.08039, "s2.loss_cls": 0.02254, "s2.acc": 96.86253, "s2.loss_bbox": 0.03428, "loss": 0.51279, "time": 1.12422}
{"mode": "train", "epoch": 28, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.0176, "loss_rpn_cls": 0.00825, "loss_rpn_bbox": 0.01524, "s0.loss_cls": 0.10379, "s0.acc": 96.35352, "s0.loss_bbox": 0.17293, "s1.loss_cls": 0.04346, "s1.acc": 97.05482, "s1.loss_bbox": 0.07577, "s2.loss_cls": 0.02129, "s2.acc": 97.08232, "s2.loss_bbox": 0.03279, "loss": 0.47352, "time": 1.11479}
{"mode": "train", "epoch": 28, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01741, "loss_rpn_cls": 0.00913, "loss_rpn_bbox": 0.01456, "s0.loss_cls": 0.10926, "s0.acc": 96.2085, "s0.loss_bbox": 0.17784, "s1.loss_cls": 0.04626, "s1.acc": 96.82969, "s1.loss_bbox": 0.07864, "s2.loss_cls": 0.02168, "s2.acc": 96.96512, "s2.loss_bbox": 0.03368, "loss": 0.49105, "time": 1.11989}
{"mode": "train", "epoch": 28, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01691, "loss_rpn_cls": 0.00871, "loss_rpn_bbox": 0.01565, "s0.loss_cls": 0.11002, "s0.acc": 96.18262, "s0.loss_bbox": 0.18389, "s1.loss_cls": 0.04465, "s1.acc": 96.92415, "s1.loss_bbox": 0.08073, "s2.loss_cls": 0.021, "s2.acc": 97.11957, "s2.loss_bbox": 0.03443, "loss": 0.49908, "time": 1.11846}
{"mode": "train", "epoch": 28, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01714, "loss_rpn_cls": 0.0105, "loss_rpn_bbox": 0.01546, "s0.loss_cls": 0.11202, "s0.acc": 96.05322, "s0.loss_bbox": 0.19415, "s1.loss_cls": 0.04575, "s1.acc": 96.91161, "s1.loss_bbox": 0.08366, "s2.loss_cls": 0.02252, "s2.acc": 96.84675, "s2.loss_bbox": 0.03544, "loss": 0.51951, "time": 1.12027}
{"mode": "val", "epoch": 28, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.344, "bbox_mAP_50": 0.474, "bbox_mAP_75": 0.367, "bbox_mAP_s": 0.025, "bbox_mAP_m": 0.054, "bbox_mAP_l": 0.411, "bbox_mAP_copypaste": "0.344 0.474 0.367 0.025 0.054 0.411"}
{"mode": "train", "epoch": 29, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06453, "loss_rpn_cls": 0.00856, "loss_rpn_bbox": 0.01631, "s0.loss_cls": 0.10964, "s0.acc": 96.21729, "s0.loss_bbox": 0.18162, "s1.loss_cls": 0.04441, "s1.acc": 96.98337, "s1.loss_bbox": 0.07981, "s2.loss_cls": 0.02137, "s2.acc": 96.97952, "s2.loss_bbox": 0.03492, "loss": 0.49665, "time": 1.15074}
{"mode": "train", "epoch": 29, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01664, "loss_rpn_cls": 0.01047, "loss_rpn_bbox": 0.01724, "s0.loss_cls": 0.11466, "s0.acc": 95.98047, "s0.loss_bbox": 0.18604, "s1.loss_cls": 0.04932, "s1.acc": 96.61001, "s1.loss_bbox": 0.07969, "s2.loss_cls": 0.0236, "s2.acc": 96.76029, "s2.loss_bbox": 0.03349, "loss": 0.5145, "time": 1.11594}
{"mode": "train", "epoch": 29, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01613, "loss_rpn_cls": 0.01095, "loss_rpn_bbox": 0.01576, "s0.loss_cls": 0.11169, "s0.acc": 96.04688, "s0.loss_bbox": 0.19156, "s1.loss_cls": 0.04617, "s1.acc": 96.84384, "s1.loss_bbox": 0.08331, "s2.loss_cls": 0.02232, "s2.acc": 96.79982, "s2.loss_bbox": 0.03548, "loss": 0.51726, "time": 1.09121}
{"mode": "train", "epoch": 29, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01731, "loss_rpn_cls": 0.00943, "loss_rpn_bbox": 0.01699, "s0.loss_cls": 0.12361, "s0.acc": 95.73535, "s0.loss_bbox": 0.19474, "s1.loss_cls": 0.05275, "s1.acc": 96.42889, "s1.loss_bbox": 0.08425, "s2.loss_cls": 0.02505, "s2.acc": 96.5237, "s2.loss_bbox": 0.03563, "loss": 0.54246, "time": 1.12002}
{"mode": "train", "epoch": 29, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01709, "loss_rpn_cls": 0.00995, "loss_rpn_bbox": 0.01345, "s0.loss_cls": 0.10801, "s0.acc": 96.24316, "s0.loss_bbox": 0.17729, "s1.loss_cls": 0.04413, "s1.acc": 97.00813, "s1.loss_bbox": 0.07734, "s2.loss_cls": 0.02053, "s2.acc": 97.13068, "s2.loss_bbox": 0.03309, "loss": 0.48379, "time": 1.12573}
{"mode": "train", "epoch": 29, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01701, "loss_rpn_cls": 0.01052, "loss_rpn_bbox": 0.01711, "s0.loss_cls": 0.11041, "s0.acc": 96.23779, "s0.loss_bbox": 0.18132, "s1.loss_cls": 0.04778, "s1.acc": 96.75371, "s1.loss_bbox": 0.07855, "s2.loss_cls": 0.02216, "s2.acc": 97.01779, "s2.loss_bbox": 0.03319, "loss": 0.50104, "time": 1.11486}
{"mode": "train", "epoch": 29, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01671, "loss_rpn_cls": 0.01034, "loss_rpn_bbox": 0.01592, "s0.loss_cls": 0.10625, "s0.acc": 96.35498, "s0.loss_bbox": 0.18015, "s1.loss_cls": 0.04414, "s1.acc": 97.00877, "s1.loss_bbox": 0.0776, "s2.loss_cls": 0.02151, "s2.acc": 97.00978, "s2.loss_bbox": 0.03268, "loss": 0.48859, "time": 1.10477}
{"mode": "train", "epoch": 29, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01722, "loss_rpn_cls": 0.00853, "loss_rpn_bbox": 0.01455, "s0.loss_cls": 0.1112, "s0.acc": 96.13818, "s0.loss_bbox": 0.18613, "s1.loss_cls": 0.0461, "s1.acc": 96.84915, "s1.loss_bbox": 0.08165, "s2.loss_cls": 0.0214, "s2.acc": 97.00379, "s2.loss_bbox": 0.03526, "loss": 0.50481, "time": 1.12088}
{"mode": "train", "epoch": 29, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01806, "loss_rpn_cls": 0.00823, "loss_rpn_bbox": 0.01305, "s0.loss_cls": 0.10125, "s0.acc": 96.53857, "s0.loss_bbox": 0.16815, "s1.loss_cls": 0.04094, "s1.acc": 97.21833, "s1.loss_bbox": 0.07411, "s2.loss_cls": 0.01938, "s2.acc": 97.31512, "s2.loss_bbox": 0.03223, "loss": 0.45733, "time": 1.12025}
{"mode": "val", "epoch": 29, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.343, "bbox_mAP_50": 0.473, "bbox_mAP_75": 0.366, "bbox_mAP_s": 0.027, "bbox_mAP_m": 0.053, "bbox_mAP_l": 0.41, "bbox_mAP_copypaste": "0.343 0.473 0.366 0.027 0.053 0.410"}
{"mode": "train", "epoch": 30, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06533, "loss_rpn_cls": 0.00915, "loss_rpn_bbox": 0.01487, "s0.loss_cls": 0.10544, "s0.acc": 96.34277, "s0.loss_bbox": 0.17786, "s1.loss_cls": 0.04381, "s1.acc": 96.96586, "s1.loss_bbox": 0.07806, "s2.loss_cls": 0.02148, "s2.acc": 97.04218, "s2.loss_bbox": 0.0337, "loss": 0.48437, "time": 1.16116}
{"mode": "train", "epoch": 30, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01738, "loss_rpn_cls": 0.01097, "loss_rpn_bbox": 0.01732, "s0.loss_cls": 0.11696, "s0.acc": 96.01172, "s0.loss_bbox": 0.19049, "s1.loss_cls": 0.04783, "s1.acc": 96.76492, "s1.loss_bbox": 0.08149, "s2.loss_cls": 0.02287, "s2.acc": 96.99072, "s2.loss_bbox": 0.03442, "loss": 0.52235, "time": 1.12049}
{"mode": "train", "epoch": 30, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01707, "loss_rpn_cls": 0.01011, "loss_rpn_bbox": 0.01527, "s0.loss_cls": 0.11643, "s0.acc": 96.01758, "s0.loss_bbox": 0.18534, "s1.loss_cls": 0.04955, "s1.acc": 96.64992, "s1.loss_bbox": 0.08043, "s2.loss_cls": 0.0233, "s2.acc": 96.76574, "s2.loss_bbox": 0.03385, "loss": 0.51427, "time": 1.12656}
{"mode": "train", "epoch": 30, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01702, "loss_rpn_cls": 0.00908, "loss_rpn_bbox": 0.01617, "s0.loss_cls": 0.10491, "s0.acc": 96.44141, "s0.loss_bbox": 0.17665, "s1.loss_cls": 0.04194, "s1.acc": 97.17589, "s1.loss_bbox": 0.07701, "s2.loss_cls": 0.02078, "s2.acc": 97.19266, "s2.loss_bbox": 0.03357, "loss": 0.48011, "time": 1.10614}
{"mode": "train", "epoch": 30, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01652, "loss_rpn_cls": 0.00855, "loss_rpn_bbox": 0.01424, "s0.loss_cls": 0.10243, "s0.acc": 96.43652, "s0.loss_bbox": 0.17421, "s1.loss_cls": 0.0421, "s1.acc": 97.14907, "s1.loss_bbox": 0.07615, "s2.loss_cls": 0.02003, "s2.acc": 97.24102, "s2.loss_bbox": 0.03295, "loss": 0.47066, "time": 1.12355}
{"mode": "train", "epoch": 30, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01719, "loss_rpn_cls": 0.00921, "loss_rpn_bbox": 0.01697, "s0.loss_cls": 0.11147, "s0.acc": 96.17041, "s0.loss_bbox": 0.18847, "s1.loss_cls": 0.04668, "s1.acc": 96.7893, "s1.loss_bbox": 0.08247, "s2.loss_cls": 0.02216, "s2.acc": 96.9382, "s2.loss_bbox": 0.03546, "loss": 0.51288, "time": 1.11784}
{"mode": "train", "epoch": 30, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01682, "loss_rpn_cls": 0.01156, "loss_rpn_bbox": 0.01505, "s0.loss_cls": 0.11867, "s0.acc": 95.95264, "s0.loss_bbox": 0.19313, "s1.loss_cls": 0.04864, "s1.acc": 96.69377, "s1.loss_bbox": 0.08407, "s2.loss_cls": 0.02354, "s2.acc": 96.72951, "s2.loss_bbox": 0.03585, "loss": 0.53051, "time": 1.11471}
{"mode": "train", "epoch": 30, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01693, "loss_rpn_cls": 0.00834, "loss_rpn_bbox": 0.01191, "s0.loss_cls": 0.09993, "s0.acc": 96.51025, "s0.loss_bbox": 0.16736, "s1.loss_cls": 0.04093, "s1.acc": 97.20509, "s1.loss_bbox": 0.073, "s2.loss_cls": 0.01944, "s2.acc": 97.30699, "s2.loss_bbox": 0.03175, "loss": 0.45266, "time": 1.11613}
{"mode": "train", "epoch": 30, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01665, "loss_rpn_cls": 0.00971, "loss_rpn_bbox": 0.01672, "s0.loss_cls": 0.10928, "s0.acc": 96.16309, "s0.loss_bbox": 0.18641, "s1.loss_cls": 0.04555, "s1.acc": 96.83176, "s1.loss_bbox": 0.08254, "s2.loss_cls": 0.02197, "s2.acc": 96.88651, "s2.loss_bbox": 0.03533, "loss": 0.5075, "time": 1.10796}
{"mode": "val", "epoch": 30, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.344, "bbox_mAP_50": 0.472, "bbox_mAP_75": 0.365, "bbox_mAP_s": 0.019, "bbox_mAP_m": 0.056, "bbox_mAP_l": 0.41, "bbox_mAP_copypaste": "0.344 0.472 0.365 0.019 0.056 0.410"}
{"mode": "train", "epoch": 31, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06538, "loss_rpn_cls": 0.00936, "loss_rpn_bbox": 0.01556, "s0.loss_cls": 0.10997, "s0.acc": 96.17676, "s0.loss_bbox": 0.18574, "s1.loss_cls": 0.04461, "s1.acc": 96.98574, "s1.loss_bbox": 0.0802, "s2.loss_cls": 0.02089, "s2.acc": 97.13833, "s2.loss_bbox": 0.03422, "loss": 0.50054, "time": 1.17313}
{"mode": "train", "epoch": 31, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01669, "loss_rpn_cls": 0.00938, "loss_rpn_bbox": 0.01476, "s0.loss_cls": 0.10879, "s0.acc": 96.21289, "s0.loss_bbox": 0.18977, "s1.loss_cls": 0.04343, "s1.acc": 97.01037, "s1.loss_bbox": 0.08172, "s2.loss_cls": 0.02134, "s2.acc": 96.96504, "s2.loss_bbox": 0.0347, "loss": 0.50389, "time": 1.10757}
{"mode": "train", "epoch": 31, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01621, "loss_rpn_cls": 0.00887, "loss_rpn_bbox": 0.01589, "s0.loss_cls": 0.11232, "s0.acc": 96.0415, "s0.loss_bbox": 0.18809, "s1.loss_cls": 0.04709, "s1.acc": 96.79301, "s1.loss_bbox": 0.08169, "s2.loss_cls": 0.02223, "s2.acc": 96.88474, "s2.loss_bbox": 0.03484, "loss": 0.511, "time": 1.0922}
{"mode": "train", "epoch": 31, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.0167, "loss_rpn_cls": 0.00966, "loss_rpn_bbox": 0.0166, "s0.loss_cls": 0.10981, "s0.acc": 96.16797, "s0.loss_bbox": 0.18153, "s1.loss_cls": 0.04457, "s1.acc": 96.94983, "s1.loss_bbox": 0.08042, "s2.loss_cls": 0.02134, "s2.acc": 96.99908, "s2.loss_bbox": 0.03467, "loss": 0.49859, "time": 1.1095}
{"mode": "train", "epoch": 31, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01701, "loss_rpn_cls": 0.00893, "loss_rpn_bbox": 0.0132, "s0.loss_cls": 0.10257, "s0.acc": 96.44043, "s0.loss_bbox": 0.17049, "s1.loss_cls": 0.04388, "s1.acc": 97.12945, "s1.loss_bbox": 0.07522, "s2.loss_cls": 0.02084, "s2.acc": 97.17919, "s2.loss_bbox": 0.03264, "loss": 0.46778, "time": 1.10297}
{"mode": "train", "epoch": 31, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01688, "loss_rpn_cls": 0.00853, "loss_rpn_bbox": 0.01473, "s0.loss_cls": 0.1021, "s0.acc": 96.47168, "s0.loss_bbox": 0.17535, "s1.loss_cls": 0.04269, "s1.acc": 97.18095, "s1.loss_bbox": 0.07695, "s2.loss_cls": 0.02015, "s2.acc": 97.18065, "s2.loss_bbox": 0.03293, "loss": 0.47342, "time": 1.10126}
{"mode": "train", "epoch": 31, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01703, "loss_rpn_cls": 0.01018, "loss_rpn_bbox": 0.01811, "s0.loss_cls": 0.11158, "s0.acc": 96.18604, "s0.loss_bbox": 0.18734, "s1.loss_cls": 0.04647, "s1.acc": 96.8809, "s1.loss_bbox": 0.08056, "s2.loss_cls": 0.02176, "s2.acc": 96.97546, "s2.loss_bbox": 0.03419, "loss": 0.5102, "time": 1.11466}
{"mode": "train", "epoch": 31, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01721, "loss_rpn_cls": 0.01073, "loss_rpn_bbox": 0.01425, "s0.loss_cls": 0.11051, "s0.acc": 96.16992, "s0.loss_bbox": 0.18328, "s1.loss_cls": 0.04584, "s1.acc": 96.81027, "s1.loss_bbox": 0.07971, "s2.loss_cls": 0.02169, "s2.acc": 96.93044, "s2.loss_bbox": 0.03489, "loss": 0.5009, "time": 1.11318}
{"mode": "train", "epoch": 31, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01726, "loss_rpn_cls": 0.00797, "loss_rpn_bbox": 0.01566, "s0.loss_cls": 0.10537, "s0.acc": 96.34912, "s0.loss_bbox": 0.18372, "s1.loss_cls": 0.04358, "s1.acc": 96.97744, "s1.loss_bbox": 0.08001, "s2.loss_cls": 0.02041, "s2.acc": 97.10937, "s2.loss_bbox": 0.03404, "loss": 0.49076, "time": 1.12328}
{"mode": "val", "epoch": 31, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.347, "bbox_mAP_50": 0.474, "bbox_mAP_75": 0.37, "bbox_mAP_s": 0.027, "bbox_mAP_m": 0.052, "bbox_mAP_l": 0.414, "bbox_mAP_copypaste": "0.347 0.474 0.370 0.027 0.052 0.414"}
{"mode": "train", "epoch": 32, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06542, "loss_rpn_cls": 0.00923, "loss_rpn_bbox": 0.01516, "s0.loss_cls": 0.10895, "s0.acc": 96.17676, "s0.loss_bbox": 0.18774, "s1.loss_cls": 0.04502, "s1.acc": 96.90411, "s1.loss_bbox": 0.08213, "s2.loss_cls": 0.02121, "s2.acc": 97.02331, "s2.loss_bbox": 0.03496, "loss": 0.5044, "time": 1.1658}
{"mode": "train", "epoch": 32, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01715, "loss_rpn_cls": 0.00937, "loss_rpn_bbox": 0.01558, "s0.loss_cls": 0.10819, "s0.acc": 96.22119, "s0.loss_bbox": 0.18469, "s1.loss_cls": 0.04439, "s1.acc": 96.98577, "s1.loss_bbox": 0.07996, "s2.loss_cls": 0.02069, "s2.acc": 97.1122, "s2.loss_bbox": 0.03307, "loss": 0.49593, "time": 1.12837}
{"mode": "train", "epoch": 32, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01747, "loss_rpn_cls": 0.00873, "loss_rpn_bbox": 0.01401, "s0.loss_cls": 0.10102, "s0.acc": 96.50195, "s0.loss_bbox": 0.17526, "s1.loss_cls": 0.04157, "s1.acc": 97.21424, "s1.loss_bbox": 0.07539, "s2.loss_cls": 0.01965, "s2.acc": 97.31244, "s2.loss_bbox": 0.03291, "loss": 0.46853, "time": 1.12962}
{"mode": "train", "epoch": 32, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01694, "loss_rpn_cls": 0.00937, "loss_rpn_bbox": 0.01627, "s0.loss_cls": 0.10914, "s0.acc": 96.27686, "s0.loss_bbox": 0.1779, "s1.loss_cls": 0.04532, "s1.acc": 96.95459, "s1.loss_bbox": 0.07624, "s2.loss_cls": 0.0216, "s2.acc": 97.10338, "s2.loss_bbox": 0.03249, "loss": 0.48833, "time": 1.11132}
{"mode": "train", "epoch": 32, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01681, "loss_rpn_cls": 0.00976, "loss_rpn_bbox": 0.01579, "s0.loss_cls": 0.11237, "s0.acc": 96.08594, "s0.loss_bbox": 0.18766, "s1.loss_cls": 0.047, "s1.acc": 96.8239, "s1.loss_bbox": 0.08143, "s2.loss_cls": 0.02273, "s2.acc": 96.88699, "s2.loss_bbox": 0.03473, "loss": 0.51147, "time": 1.1162}
{"mode": "train", "epoch": 32, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01793, "loss_rpn_cls": 0.0103, "loss_rpn_bbox": 0.01726, "s0.loss_cls": 0.11329, "s0.acc": 96.04834, "s0.loss_bbox": 0.19283, "s1.loss_cls": 0.04719, "s1.acc": 96.80917, "s1.loss_bbox": 0.08322, "s2.loss_cls": 0.02232, "s2.acc": 96.93355, "s2.loss_bbox": 0.03579, "loss": 0.5222, "time": 1.11566}
{"mode": "train", "epoch": 32, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01719, "loss_rpn_cls": 0.00814, "loss_rpn_bbox": 0.0133, "s0.loss_cls": 0.10001, "s0.acc": 96.6001, "s0.loss_bbox": 0.16575, "s1.loss_cls": 0.04044, "s1.acc": 97.25881, "s1.loss_bbox": 0.07229, "s2.loss_cls": 0.01919, "s2.acc": 97.3529, "s2.loss_bbox": 0.03103, "loss": 0.45015, "time": 1.1173}
{"mode": "train", "epoch": 32, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01783, "loss_rpn_cls": 0.00736, "loss_rpn_bbox": 0.01317, "s0.loss_cls": 0.09489, "s0.acc": 96.72705, "s0.loss_bbox": 0.16626, "s1.loss_cls": 0.03792, "s1.acc": 97.37117, "s1.loss_bbox": 0.07209, "s2.loss_cls": 0.01759, "s2.acc": 97.48316, "s2.loss_bbox": 0.03092, "loss": 0.44019, "time": 1.10674}
{"mode": "train", "epoch": 32, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01784, "loss_rpn_cls": 0.00985, "loss_rpn_bbox": 0.01594, "s0.loss_cls": 0.11254, "s0.acc": 96.12646, "s0.loss_bbox": 0.18688, "s1.loss_cls": 0.04687, "s1.acc": 96.82854, "s1.loss_bbox": 0.08161, "s2.loss_cls": 0.02233, "s2.acc": 96.91548, "s2.loss_bbox": 0.03483, "loss": 0.51084, "time": 1.11102}
{"mode": "val", "epoch": 32, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.342, "bbox_mAP_50": 0.468, "bbox_mAP_75": 0.367, "bbox_mAP_s": 0.027, "bbox_mAP_m": 0.054, "bbox_mAP_l": 0.408, "bbox_mAP_copypaste": "0.342 0.468 0.367 0.027 0.054 0.408"}
{"mode": "train", "epoch": 33, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06493, "loss_rpn_cls": 0.01021, "loss_rpn_bbox": 0.01704, "s0.loss_cls": 0.10722, "s0.acc": 96.23584, "s0.loss_bbox": 0.18488, "s1.loss_cls": 0.04374, "s1.acc": 96.94472, "s1.loss_bbox": 0.07881, "s2.loss_cls": 0.02036, "s2.acc": 97.23427, "s2.loss_bbox": 0.03334, "loss": 0.49561, "time": 1.16281}
{"mode": "train", "epoch": 33, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01726, "loss_rpn_cls": 0.00899, "loss_rpn_bbox": 0.01492, "s0.loss_cls": 0.10558, "s0.acc": 96.31299, "s0.loss_bbox": 0.18094, "s1.loss_cls": 0.0429, "s1.acc": 97.03705, "s1.loss_bbox": 0.07784, "s2.loss_cls": 0.02034, "s2.acc": 97.17442, "s2.loss_bbox": 0.03373, "loss": 0.48524, "time": 1.11222}
{"mode": "train", "epoch": 33, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01725, "loss_rpn_cls": 0.00896, "loss_rpn_bbox": 0.01398, "s0.loss_cls": 0.10547, "s0.acc": 96.39258, "s0.loss_bbox": 0.17987, "s1.loss_cls": 0.04156, "s1.acc": 97.18164, "s1.loss_bbox": 0.07735, "s2.loss_cls": 0.01936, "s2.acc": 97.34231, "s2.loss_bbox": 0.03382, "loss": 0.48036, "time": 1.12084}
{"mode": "train", "epoch": 33, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01856, "loss_rpn_cls": 0.00902, "loss_rpn_bbox": 0.01434, "s0.loss_cls": 0.10524, "s0.acc": 96.33545, "s0.loss_bbox": 0.17819, "s1.loss_cls": 0.04223, "s1.acc": 97.17024, "s1.loss_bbox": 0.07807, "s2.loss_cls": 0.02015, "s2.acc": 97.30673, "s2.loss_bbox": 0.03342, "loss": 0.48065, "time": 1.13001}
{"mode": "train", "epoch": 33, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01758, "loss_rpn_cls": 0.008, "loss_rpn_bbox": 0.01523, "s0.loss_cls": 0.10604, "s0.acc": 96.27734, "s0.loss_bbox": 0.18342, "s1.loss_cls": 0.04345, "s1.acc": 96.93494, "s1.loss_bbox": 0.0796, "s2.loss_cls": 0.02068, "s2.acc": 96.98654, "s2.loss_bbox": 0.03461, "loss": 0.49103, "time": 1.1207}
{"mode": "train", "epoch": 33, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01735, "loss_rpn_cls": 0.00894, "loss_rpn_bbox": 0.01392, "s0.loss_cls": 0.09843, "s0.acc": 96.48926, "s0.loss_bbox": 0.17316, "s1.loss_cls": 0.04082, "s1.acc": 97.18408, "s1.loss_bbox": 0.07603, "s2.loss_cls": 0.01934, "s2.acc": 97.33036, "s2.loss_bbox": 0.03215, "loss": 0.46277, "time": 1.10507}
{"mode": "train", "epoch": 33, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01707, "loss_rpn_cls": 0.00844, "loss_rpn_bbox": 0.01433, "s0.loss_cls": 0.10249, "s0.acc": 96.43799, "s0.loss_bbox": 0.1727, "s1.loss_cls": 0.04276, "s1.acc": 97.10029, "s1.loss_bbox": 0.07591, "s2.loss_cls": 0.02041, "s2.acc": 97.16111, "s2.loss_bbox": 0.03272, "loss": 0.46975, "time": 1.10157}
{"mode": "train", "epoch": 33, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01714, "loss_rpn_cls": 0.01043, "loss_rpn_bbox": 0.01557, "s0.loss_cls": 0.11194, "s0.acc": 96.12158, "s0.loss_bbox": 0.18499, "s1.loss_cls": 0.04752, "s1.acc": 96.77135, "s1.loss_bbox": 0.07932, "s2.loss_cls": 0.02326, "s2.acc": 96.76815, "s2.loss_bbox": 0.034, "loss": 0.50702, "time": 1.10813}
{"mode": "train", "epoch": 33, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01692, "loss_rpn_cls": 0.00866, "loss_rpn_bbox": 0.01625, "s0.loss_cls": 0.10528, "s0.acc": 96.32764, "s0.loss_bbox": 0.17825, "s1.loss_cls": 0.04374, "s1.acc": 97.05888, "s1.loss_bbox": 0.07856, "s2.loss_cls": 0.02057, "s2.acc": 97.16427, "s2.loss_bbox": 0.03335, "loss": 0.48466, "time": 1.10112}
{"mode": "val", "epoch": 33, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.343, "bbox_mAP_50": 0.47, "bbox_mAP_75": 0.362, "bbox_mAP_s": 0.023, "bbox_mAP_m": 0.053, "bbox_mAP_l": 0.41, "bbox_mAP_copypaste": "0.343 0.470 0.362 0.023 0.053 0.410"}
{"mode": "train", "epoch": 34, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06532, "loss_rpn_cls": 0.00871, "loss_rpn_bbox": 0.01366, "s0.loss_cls": 0.10273, "s0.acc": 96.45654, "s0.loss_bbox": 0.17638, "s1.loss_cls": 0.04158, "s1.acc": 97.15436, "s1.loss_bbox": 0.07664, "s2.loss_cls": 0.01991, "s2.acc": 97.27163, "s2.loss_bbox": 0.03343, "loss": 0.47304, "time": 1.16464}
{"mode": "train", "epoch": 34, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01697, "loss_rpn_cls": 0.00768, "loss_rpn_bbox": 0.01412, "s0.loss_cls": 0.1029, "s0.acc": 96.40234, "s0.loss_bbox": 0.18189, "s1.loss_cls": 0.04123, "s1.acc": 97.22136, "s1.loss_bbox": 0.08096, "s2.loss_cls": 0.01939, "s2.acc": 97.33595, "s2.loss_bbox": 0.03504, "loss": 0.48321, "time": 1.12341}
{"mode": "train", "epoch": 34, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01745, "loss_rpn_cls": 0.00965, "loss_rpn_bbox": 0.01555, "s0.loss_cls": 0.10874, "s0.acc": 96.15967, "s0.loss_bbox": 0.17834, "s1.loss_cls": 0.04516, "s1.acc": 96.90181, "s1.loss_bbox": 0.07807, "s2.loss_cls": 0.02174, "s2.acc": 96.9473, "s2.loss_bbox": 0.03312, "loss": 0.49036, "time": 1.11574}
{"mode": "train", "epoch": 34, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01694, "loss_rpn_cls": 0.0087, "loss_rpn_bbox": 0.01519, "s0.loss_cls": 0.10584, "s0.acc": 96.31396, "s0.loss_bbox": 0.18243, "s1.loss_cls": 0.04266, "s1.acc": 97.08004, "s1.loss_bbox": 0.07974, "s2.loss_cls": 0.01995, "s2.acc": 97.22059, "s2.loss_bbox": 0.03437, "loss": 0.48888, "time": 1.11274}
{"mode": "train", "epoch": 34, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01747, "loss_rpn_cls": 0.00743, "loss_rpn_bbox": 0.01379, "s0.loss_cls": 0.09696, "s0.acc": 96.59912, "s0.loss_bbox": 0.16532, "s1.loss_cls": 0.03894, "s1.acc": 97.29859, "s1.loss_bbox": 0.07321, "s2.loss_cls": 0.01873, "s2.acc": 97.43774, "s2.loss_bbox": 0.032, "loss": 0.44637, "time": 1.11713}
{"mode": "train", "epoch": 34, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01722, "loss_rpn_cls": 0.00953, "loss_rpn_bbox": 0.01583, "s0.loss_cls": 0.10857, "s0.acc": 96.27979, "s0.loss_bbox": 0.18362, "s1.loss_cls": 0.04545, "s1.acc": 96.92528, "s1.loss_bbox": 0.07948, "s2.loss_cls": 0.02111, "s2.acc": 97.17519, "s2.loss_bbox": 0.03421, "loss": 0.4978, "time": 1.11905}
{"mode": "train", "epoch": 34, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01729, "loss_rpn_cls": 0.00754, "loss_rpn_bbox": 0.01298, "s0.loss_cls": 0.09392, "s0.acc": 96.71484, "s0.loss_bbox": 0.17081, "s1.loss_cls": 0.03751, "s1.acc": 97.41673, "s1.loss_bbox": 0.07453, "s2.loss_cls": 0.01754, "s2.acc": 97.60103, "s2.loss_bbox": 0.03291, "loss": 0.44773, "time": 1.11765}
{"mode": "train", "epoch": 34, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01677, "loss_rpn_cls": 0.00936, "loss_rpn_bbox": 0.01756, "s0.loss_cls": 0.11093, "s0.acc": 96.10889, "s0.loss_bbox": 0.18787, "s1.loss_cls": 0.04607, "s1.acc": 96.82752, "s1.loss_bbox": 0.08073, "s2.loss_cls": 0.02167, "s2.acc": 96.96497, "s2.loss_bbox": 0.03435, "loss": 0.50854, "time": 1.10699}
{"mode": "train", "epoch": 34, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01699, "loss_rpn_cls": 0.01046, "loss_rpn_bbox": 0.01668, "s0.loss_cls": 0.11021, "s0.acc": 96.21289, "s0.loss_bbox": 0.1899, "s1.loss_cls": 0.04409, "s1.acc": 96.98434, "s1.loss_bbox": 0.0819, "s2.loss_cls": 0.02092, "s2.acc": 97.1135, "s2.loss_bbox": 0.03464, "loss": 0.5088, "time": 1.1148}
{"mode": "val", "epoch": 34, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.346, "bbox_mAP_50": 0.472, "bbox_mAP_75": 0.368, "bbox_mAP_s": 0.025, "bbox_mAP_m": 0.053, "bbox_mAP_l": 0.412, "bbox_mAP_copypaste": "0.346 0.472 0.368 0.025 0.053 0.412"}
{"mode": "train", "epoch": 35, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06587, "loss_rpn_cls": 0.00922, "loss_rpn_bbox": 0.01512, "s0.loss_cls": 0.10692, "s0.acc": 96.27539, "s0.loss_bbox": 0.17734, "s1.loss_cls": 0.04291, "s1.acc": 97.13339, "s1.loss_bbox": 0.07709, "s2.loss_cls": 0.02017, "s2.acc": 97.29421, "s2.loss_bbox": 0.03383, "loss": 0.48259, "time": 1.1621}
{"mode": "train", "epoch": 35, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.0178, "loss_rpn_cls": 0.00773, "loss_rpn_bbox": 0.01384, "s0.loss_cls": 0.09586, "s0.acc": 96.6416, "s0.loss_bbox": 0.16533, "s1.loss_cls": 0.03959, "s1.acc": 97.27292, "s1.loss_bbox": 0.07416, "s2.loss_cls": 0.01888, "s2.acc": 97.43197, "s2.loss_bbox": 0.03235, "loss": 0.44774, "time": 1.11956}
{"mode": "train", "epoch": 35, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01756, "loss_rpn_cls": 0.00847, "loss_rpn_bbox": 0.01442, "s0.loss_cls": 0.10621, "s0.acc": 96.28223, "s0.loss_bbox": 0.18426, "s1.loss_cls": 0.04356, "s1.acc": 96.90271, "s1.loss_bbox": 0.07938, "s2.loss_cls": 0.02052, "s2.acc": 97.04615, "s2.loss_bbox": 0.0339, "loss": 0.49072, "time": 1.11865}
{"mode": "train", "epoch": 35, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01662, "loss_rpn_cls": 0.00895, "loss_rpn_bbox": 0.01598, "s0.loss_cls": 0.11085, "s0.acc": 96.11328, "s0.loss_bbox": 0.19424, "s1.loss_cls": 0.04453, "s1.acc": 96.94837, "s1.loss_bbox": 0.083, "s2.loss_cls": 0.02129, "s2.acc": 97.07572, "s2.loss_bbox": 0.03548, "loss": 0.51432, "time": 1.10343}
{"mode": "train", "epoch": 35, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01639, "loss_rpn_cls": 0.00919, "loss_rpn_bbox": 0.01481, "s0.loss_cls": 0.09737, "s0.acc": 96.56689, "s0.loss_bbox": 0.1741, "s1.loss_cls": 0.04045, "s1.acc": 97.26739, "s1.loss_bbox": 0.07702, "s2.loss_cls": 0.01989, "s2.acc": 97.28846, "s2.loss_bbox": 0.03241, "loss": 0.46524, "time": 1.0997}
{"mode": "train", "epoch": 35, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01681, "loss_rpn_cls": 0.00873, "loss_rpn_bbox": 0.01398, "s0.loss_cls": 0.10063, "s0.acc": 96.53564, "s0.loss_bbox": 0.1728, "s1.loss_cls": 0.04019, "s1.acc": 97.2809, "s1.loss_bbox": 0.07525, "s2.loss_cls": 0.01902, "s2.acc": 97.3872, "s2.loss_bbox": 0.03262, "loss": 0.46322, "time": 1.10652}
{"mode": "train", "epoch": 35, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01683, "loss_rpn_cls": 0.00902, "loss_rpn_bbox": 0.01509, "s0.loss_cls": 0.10322, "s0.acc": 96.40918, "s0.loss_bbox": 0.17909, "s1.loss_cls": 0.04159, "s1.acc": 97.12406, "s1.loss_bbox": 0.07766, "s2.loss_cls": 0.01974, "s2.acc": 97.19837, "s2.loss_bbox": 0.03359, "loss": 0.47898, "time": 1.1138}
{"mode": "train", "epoch": 35, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01823, "loss_rpn_cls": 0.00808, "loss_rpn_bbox": 0.01508, "s0.loss_cls": 0.09907, "s0.acc": 96.49316, "s0.loss_bbox": 0.17703, "s1.loss_cls": 0.04004, "s1.acc": 97.20065, "s1.loss_bbox": 0.07674, "s2.loss_cls": 0.01898, "s2.acc": 97.28223, "s2.loss_bbox": 0.03351, "loss": 0.46853, "time": 1.12908}
{"mode": "train", "epoch": 35, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.0171, "loss_rpn_cls": 0.01026, "loss_rpn_bbox": 0.01788, "s0.loss_cls": 0.12089, "s0.acc": 95.90967, "s0.loss_bbox": 0.19235, "s1.loss_cls": 0.04928, "s1.acc": 96.70457, "s1.loss_bbox": 0.08367, "s2.loss_cls": 0.02368, "s2.acc": 96.76546, "s2.loss_bbox": 0.03532, "loss": 0.53333, "time": 1.10275}
{"mode": "val", "epoch": 35, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.346, "bbox_mAP_50": 0.474, "bbox_mAP_75": 0.37, "bbox_mAP_s": 0.021, "bbox_mAP_m": 0.061, "bbox_mAP_l": 0.412, "bbox_mAP_copypaste": "0.346 0.474 0.370 0.021 0.061 0.412"}
{"mode": "train", "epoch": 36, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.0659, "loss_rpn_cls": 0.00902, "loss_rpn_bbox": 0.01556, "s0.loss_cls": 0.10138, "s0.acc": 96.44287, "s0.loss_bbox": 0.17999, "s1.loss_cls": 0.04083, "s1.acc": 97.23394, "s1.loss_bbox": 0.07911, "s2.loss_cls": 0.01932, "s2.acc": 97.33369, "s2.loss_bbox": 0.03465, "loss": 0.47984, "time": 1.15634}
{"mode": "train", "epoch": 36, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01715, "loss_rpn_cls": 0.00858, "loss_rpn_bbox": 0.01423, "s0.loss_cls": 0.10041, "s0.acc": 96.45801, "s0.loss_bbox": 0.16983, "s1.loss_cls": 0.04149, "s1.acc": 97.08563, "s1.loss_bbox": 0.07279, "s2.loss_cls": 0.01926, "s2.acc": 97.27271, "s2.loss_bbox": 0.03108, "loss": 0.45766, "time": 1.1141}
{"mode": "train", "epoch": 36, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01743, "loss_rpn_cls": 0.00896, "loss_rpn_bbox": 0.017, "s0.loss_cls": 0.10948, "s0.acc": 96.1499, "s0.loss_bbox": 0.191, "s1.loss_cls": 0.04471, "s1.acc": 96.93837, "s1.loss_bbox": 0.08238, "s2.loss_cls": 0.02102, "s2.acc": 97.09348, "s2.loss_bbox": 0.03549, "loss": 0.51004, "time": 1.1148}
{"mode": "train", "epoch": 36, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01744, "loss_rpn_cls": 0.00862, "loss_rpn_bbox": 0.01418, "s0.loss_cls": 0.10236, "s0.acc": 96.41602, "s0.loss_bbox": 0.17454, "s1.loss_cls": 0.04073, "s1.acc": 97.24288, "s1.loss_bbox": 0.07524, "s2.loss_cls": 0.01943, "s2.acc": 97.35694, "s2.loss_bbox": 0.03252, "loss": 0.46761, "time": 1.10556}
{"mode": "train", "epoch": 36, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01707, "loss_rpn_cls": 0.00942, "loss_rpn_bbox": 0.01575, "s0.loss_cls": 0.09958, "s0.acc": 96.49902, "s0.loss_bbox": 0.17376, "s1.loss_cls": 0.04103, "s1.acc": 97.13065, "s1.loss_bbox": 0.07504, "s2.loss_cls": 0.01917, "s2.acc": 97.29802, "s2.loss_bbox": 0.0317, "loss": 0.46544, "time": 1.09816}
{"mode": "train", "epoch": 36, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01711, "loss_rpn_cls": 0.00908, "loss_rpn_bbox": 0.01535, "s0.loss_cls": 0.1082, "s0.acc": 96.30029, "s0.loss_bbox": 0.18213, "s1.loss_cls": 0.04432, "s1.acc": 96.96159, "s1.loss_bbox": 0.08074, "s2.loss_cls": 0.02098, "s2.acc": 97.08288, "s2.loss_bbox": 0.03436, "loss": 0.49518, "time": 1.09958}
{"mode": "train", "epoch": 36, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01697, "loss_rpn_cls": 0.00811, "loss_rpn_bbox": 0.01307, "s0.loss_cls": 0.09955, "s0.acc": 96.5415, "s0.loss_bbox": 0.17091, "s1.loss_cls": 0.04087, "s1.acc": 97.18337, "s1.loss_bbox": 0.07581, "s2.loss_cls": 0.01904, "s2.acc": 97.35887, "s2.loss_bbox": 0.03293, "loss": 0.46029, "time": 1.109}
{"mode": "train", "epoch": 36, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01692, "loss_rpn_cls": 0.00773, "loss_rpn_bbox": 0.01397, "s0.loss_cls": 0.09716, "s0.acc": 96.63281, "s0.loss_bbox": 0.17078, "s1.loss_cls": 0.04, "s1.acc": 97.23275, "s1.loss_bbox": 0.07602, "s2.loss_cls": 0.01888, "s2.acc": 97.32958, "s2.loss_bbox": 0.03259, "loss": 0.45711, "time": 1.09515}
{"mode": "train", "epoch": 36, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01744, "loss_rpn_cls": 0.00883, "loss_rpn_bbox": 0.0149, "s0.loss_cls": 0.10417, "s0.acc": 96.40137, "s0.loss_bbox": 0.18026, "s1.loss_cls": 0.04077, "s1.acc": 97.22863, "s1.loss_bbox": 0.07758, "s2.loss_cls": 0.01944, "s2.acc": 97.38472, "s2.loss_bbox": 0.03353, "loss": 0.47947, "time": 1.10781}
{"mode": "val", "epoch": 36, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.346, "bbox_mAP_50": 0.472, "bbox_mAP_75": 0.372, "bbox_mAP_s": 0.025, "bbox_mAP_m": 0.059, "bbox_mAP_l": 0.412, "bbox_mAP_copypaste": "0.346 0.472 0.372 0.025 0.059 0.412"}
{"mode": "train", "epoch": 37, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06563, "loss_rpn_cls": 0.00866, "loss_rpn_bbox": 0.01387, "s0.loss_cls": 0.1035, "s0.acc": 96.43457, "s0.loss_bbox": 0.17538, "s1.loss_cls": 0.04117, "s1.acc": 97.27399, "s1.loss_bbox": 0.07592, "s2.loss_cls": 0.01977, "s2.acc": 97.2991, "s2.loss_bbox": 0.0327, "loss": 0.47096, "time": 1.15301}
{"mode": "train", "epoch": 37, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01723, "loss_rpn_cls": 0.00762, "loss_rpn_bbox": 0.0126, "s0.loss_cls": 0.09238, "s0.acc": 96.70996, "s0.loss_bbox": 0.16436, "s1.loss_cls": 0.03749, "s1.acc": 97.42008, "s1.loss_bbox": 0.07148, "s2.loss_cls": 0.0175, "s2.acc": 97.58064, "s2.loss_bbox": 0.03107, "loss": 0.43451, "time": 1.10756}
{"mode": "train", "epoch": 37, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01734, "loss_rpn_cls": 0.0092, "loss_rpn_bbox": 0.01725, "s0.loss_cls": 0.10708, "s0.acc": 96.18652, "s0.loss_bbox": 0.18453, "s1.loss_cls": 0.04262, "s1.acc": 97.03134, "s1.loss_bbox": 0.07934, "s2.loss_cls": 0.0205, "s2.acc": 97.12221, "s2.loss_bbox": 0.03369, "loss": 0.49421, "time": 1.122}
{"mode": "train", "epoch": 37, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01745, "loss_rpn_cls": 0.00848, "loss_rpn_bbox": 0.01505, "s0.loss_cls": 0.10183, "s0.acc": 96.44336, "s0.loss_bbox": 0.17938, "s1.loss_cls": 0.04183, "s1.acc": 97.11367, "s1.loss_bbox": 0.07793, "s2.loss_cls": 0.01956, "s2.acc": 97.29908, "s2.loss_bbox": 0.03264, "loss": 0.4767, "time": 1.11855}
{"mode": "train", "epoch": 37, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01704, "loss_rpn_cls": 0.00877, "loss_rpn_bbox": 0.01531, "s0.loss_cls": 0.10984, "s0.acc": 96.1792, "s0.loss_bbox": 0.18398, "s1.loss_cls": 0.04463, "s1.acc": 96.99473, "s1.loss_bbox": 0.08071, "s2.loss_cls": 0.02078, "s2.acc": 97.1633, "s2.loss_bbox": 0.03494, "loss": 0.49897, "time": 1.12355}
{"mode": "train", "epoch": 37, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01724, "loss_rpn_cls": 0.00712, "loss_rpn_bbox": 0.0133, "s0.loss_cls": 0.09379, "s0.acc": 96.68359, "s0.loss_bbox": 0.16845, "s1.loss_cls": 0.03864, "s1.acc": 97.37376, "s1.loss_bbox": 0.07402, "s2.loss_cls": 0.01801, "s2.acc": 97.45879, "s2.loss_bbox": 0.03221, "loss": 0.44552, "time": 1.10238}
{"mode": "train", "epoch": 37, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01692, "loss_rpn_cls": 0.00784, "loss_rpn_bbox": 0.01616, "s0.loss_cls": 0.10156, "s0.acc": 96.44873, "s0.loss_bbox": 0.17907, "s1.loss_cls": 0.04002, "s1.acc": 97.2681, "s1.loss_bbox": 0.07789, "s2.loss_cls": 0.01931, "s2.acc": 97.29671, "s2.loss_bbox": 0.03423, "loss": 0.47608, "time": 1.11931}
{"mode": "train", "epoch": 37, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01717, "loss_rpn_cls": 0.00814, "loss_rpn_bbox": 0.01376, "s0.loss_cls": 0.0986, "s0.acc": 96.58496, "s0.loss_bbox": 0.17132, "s1.loss_cls": 0.03926, "s1.acc": 97.3753, "s1.loss_bbox": 0.07324, "s2.loss_cls": 0.0182, "s2.acc": 97.66518, "s2.loss_bbox": 0.03176, "loss": 0.45428, "time": 1.124}
{"mode": "train", "epoch": 37, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01712, "loss_rpn_cls": 0.00959, "loss_rpn_bbox": 0.01607, "s0.loss_cls": 0.10591, "s0.acc": 96.29443, "s0.loss_bbox": 0.18268, "s1.loss_cls": 0.04205, "s1.acc": 97.04413, "s1.loss_bbox": 0.07848, "s2.loss_cls": 0.0202, "s2.acc": 97.1508, "s2.loss_bbox": 0.03463, "loss": 0.48962, "time": 1.11394}
{"mode": "val", "epoch": 37, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.346, "bbox_mAP_50": 0.472, "bbox_mAP_75": 0.37, "bbox_mAP_s": 0.021, "bbox_mAP_m": 0.059, "bbox_mAP_l": 0.412, "bbox_mAP_copypaste": "0.346 0.472 0.370 0.021 0.059 0.412"}
{"mode": "train", "epoch": 38, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06512, "loss_rpn_cls": 0.00861, "loss_rpn_bbox": 0.01564, "s0.loss_cls": 0.10243, "s0.acc": 96.39062, "s0.loss_bbox": 0.1816, "s1.loss_cls": 0.04111, "s1.acc": 97.16253, "s1.loss_bbox": 0.07905, "s2.loss_cls": 0.01933, "s2.acc": 97.20908, "s2.loss_bbox": 0.0345, "loss": 0.48227, "time": 1.15827}
{"mode": "train", "epoch": 38, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01691, "loss_rpn_cls": 0.00887, "loss_rpn_bbox": 0.01613, "s0.loss_cls": 0.11274, "s0.acc": 96.11816, "s0.loss_bbox": 0.19017, "s1.loss_cls": 0.04367, "s1.acc": 97.06307, "s1.loss_bbox": 0.08221, "s2.loss_cls": 0.02034, "s2.acc": 97.21967, "s2.loss_bbox": 0.03522, "loss": 0.50934, "time": 1.10568}
{"mode": "train", "epoch": 38, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01668, "loss_rpn_cls": 0.00874, "loss_rpn_bbox": 0.01478, "s0.loss_cls": 0.10217, "s0.acc": 96.4751, "s0.loss_bbox": 0.17594, "s1.loss_cls": 0.04131, "s1.acc": 97.20535, "s1.loss_bbox": 0.07688, "s2.loss_cls": 0.01943, "s2.acc": 97.30257, "s2.loss_bbox": 0.03286, "loss": 0.47211, "time": 1.102}
{"mode": "train", "epoch": 38, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01728, "loss_rpn_cls": 0.00971, "loss_rpn_bbox": 0.01712, "s0.loss_cls": 0.11178, "s0.acc": 96.07959, "s0.loss_bbox": 0.18582, "s1.loss_cls": 0.04672, "s1.acc": 96.79843, "s1.loss_bbox": 0.08005, "s2.loss_cls": 0.02213, "s2.acc": 96.989, "s2.loss_bbox": 0.03438, "loss": 0.5077, "time": 1.11415}
{"mode": "train", "epoch": 38, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01738, "loss_rpn_cls": 0.00895, "loss_rpn_bbox": 0.01405, "s0.loss_cls": 0.09893, "s0.acc": 96.44824, "s0.loss_bbox": 0.17388, "s1.loss_cls": 0.04084, "s1.acc": 97.17208, "s1.loss_bbox": 0.07648, "s2.loss_cls": 0.0196, "s2.acc": 97.23942, "s2.loss_bbox": 0.03323, "loss": 0.46597, "time": 1.12079}
{"mode": "train", "epoch": 38, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01712, "loss_rpn_cls": 0.00738, "loss_rpn_bbox": 0.01437, "s0.loss_cls": 0.09683, "s0.acc": 96.62549, "s0.loss_bbox": 0.16868, "s1.loss_cls": 0.03789, "s1.acc": 97.41746, "s1.loss_bbox": 0.07285, "s2.loss_cls": 0.01785, "s2.acc": 97.57287, "s2.loss_bbox": 0.03115, "loss": 0.44701, "time": 1.11834}
{"mode": "train", "epoch": 38, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01708, "loss_rpn_cls": 0.00791, "loss_rpn_bbox": 0.01208, "s0.loss_cls": 0.08883, "s0.acc": 96.91895, "s0.loss_bbox": 0.15429, "s1.loss_cls": 0.03596, "s1.acc": 97.51825, "s1.loss_bbox": 0.06857, "s2.loss_cls": 0.01735, "s2.acc": 97.49117, "s2.loss_bbox": 0.03042, "loss": 0.4154, "time": 1.11059}
{"mode": "train", "epoch": 38, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01755, "loss_rpn_cls": 0.00922, "loss_rpn_bbox": 0.01604, "s0.loss_cls": 0.10279, "s0.acc": 96.38135, "s0.loss_bbox": 0.18159, "s1.loss_cls": 0.04039, "s1.acc": 97.23396, "s1.loss_bbox": 0.07779, "s2.loss_cls": 0.01944, "s2.acc": 97.38306, "s2.loss_bbox": 0.0337, "loss": 0.48097, "time": 1.11689}
{"mode": "train", "epoch": 38, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01708, "loss_rpn_cls": 0.00754, "loss_rpn_bbox": 0.0136, "s0.loss_cls": 0.09587, "s0.acc": 96.5752, "s0.loss_bbox": 0.17781, "s1.loss_cls": 0.03906, "s1.acc": 97.31389, "s1.loss_bbox": 0.07875, "s2.loss_cls": 0.01853, "s2.acc": 97.36211, "s2.loss_bbox": 0.03405, "loss": 0.46522, "time": 1.1041}
{"mode": "val", "epoch": 38, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.343, "bbox_mAP_50": 0.47, "bbox_mAP_75": 0.365, "bbox_mAP_s": 0.029, "bbox_mAP_m": 0.056, "bbox_mAP_l": 0.408, "bbox_mAP_copypaste": "0.343 0.470 0.365 0.029 0.056 0.408"}
{"mode": "train", "epoch": 39, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06497, "loss_rpn_cls": 0.0063, "loss_rpn_bbox": 0.01216, "s0.loss_cls": 0.08983, "s0.acc": 96.82666, "s0.loss_bbox": 0.16215, "s1.loss_cls": 0.03442, "s1.acc": 97.65413, "s1.loss_bbox": 0.07007, "s2.loss_cls": 0.01596, "s2.acc": 97.72197, "s2.loss_bbox": 0.0306, "loss": 0.4215, "time": 1.15301}
{"mode": "train", "epoch": 39, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01711, "loss_rpn_cls": 0.00738, "loss_rpn_bbox": 0.01333, "s0.loss_cls": 0.09867, "s0.acc": 96.50146, "s0.loss_bbox": 0.17379, "s1.loss_cls": 0.03855, "s1.acc": 97.3517, "s1.loss_bbox": 0.07505, "s2.loss_cls": 0.01869, "s2.acc": 97.43434, "s2.loss_bbox": 0.03251, "loss": 0.45797, "time": 1.10975}
{"mode": "train", "epoch": 39, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01696, "loss_rpn_cls": 0.01051, "loss_rpn_bbox": 0.01749, "s0.loss_cls": 0.11463, "s0.acc": 95.95508, "s0.loss_bbox": 0.1914, "s1.loss_cls": 0.0464, "s1.acc": 96.81271, "s1.loss_bbox": 0.08271, "s2.loss_cls": 0.0226, "s2.acc": 96.86614, "s2.loss_bbox": 0.03531, "loss": 0.52105, "time": 1.11105}
{"mode": "train", "epoch": 39, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01713, "loss_rpn_cls": 0.00924, "loss_rpn_bbox": 0.01644, "s0.loss_cls": 0.10419, "s0.acc": 96.31055, "s0.loss_bbox": 0.18865, "s1.loss_cls": 0.04174, "s1.acc": 97.14298, "s1.loss_bbox": 0.08133, "s2.loss_cls": 0.0195, "s2.acc": 97.27163, "s2.loss_bbox": 0.0352, "loss": 0.49629, "time": 1.11324}
{"mode": "train", "epoch": 39, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01718, "loss_rpn_cls": 0.00904, "loss_rpn_bbox": 0.01656, "s0.loss_cls": 0.1039, "s0.acc": 96.40723, "s0.loss_bbox": 0.17806, "s1.loss_cls": 0.04279, "s1.acc": 97.06779, "s1.loss_bbox": 0.0775, "s2.loss_cls": 0.0203, "s2.acc": 97.16305, "s2.loss_bbox": 0.03297, "loss": 0.48111, "time": 1.11718}
{"mode": "train", "epoch": 39, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01691, "loss_rpn_cls": 0.00922, "loss_rpn_bbox": 0.01724, "s0.loss_cls": 0.1104, "s0.acc": 96.23535, "s0.loss_bbox": 0.18643, "s1.loss_cls": 0.0446, "s1.acc": 96.91211, "s1.loss_bbox": 0.07981, "s2.loss_cls": 0.02121, "s2.acc": 97.02073, "s2.loss_bbox": 0.03381, "loss": 0.50273, "time": 1.10561}
{"mode": "train", "epoch": 39, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.0173, "loss_rpn_cls": 0.00821, "loss_rpn_bbox": 0.01498, "s0.loss_cls": 0.09777, "s0.acc": 96.6123, "s0.loss_bbox": 0.17376, "s1.loss_cls": 0.03872, "s1.acc": 97.41107, "s1.loss_bbox": 0.07468, "s2.loss_cls": 0.01784, "s2.acc": 97.61917, "s2.loss_bbox": 0.03271, "loss": 0.45867, "time": 1.11249}
{"mode": "train", "epoch": 39, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01699, "loss_rpn_cls": 0.00637, "loss_rpn_bbox": 0.01195, "s0.loss_cls": 0.08773, "s0.acc": 96.91357, "s0.loss_bbox": 0.15852, "s1.loss_cls": 0.03464, "s1.acc": 97.58464, "s1.loss_bbox": 0.07052, "s2.loss_cls": 0.01617, "s2.acc": 97.70251, "s2.loss_bbox": 0.03121, "loss": 0.4171, "time": 1.11917}
{"mode": "train", "epoch": 39, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01706, "loss_rpn_cls": 0.00854, "loss_rpn_bbox": 0.01588, "s0.loss_cls": 0.10114, "s0.acc": 96.46826, "s0.loss_bbox": 0.1793, "s1.loss_cls": 0.0411, "s1.acc": 97.18277, "s1.loss_bbox": 0.0774, "s2.loss_cls": 0.01882, "s2.acc": 97.45844, "s2.loss_bbox": 0.03238, "loss": 0.47458, "time": 1.11308}
{"mode": "val", "epoch": 39, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.344, "bbox_mAP_50": 0.469, "bbox_mAP_75": 0.364, "bbox_mAP_s": 0.03, "bbox_mAP_m": 0.055, "bbox_mAP_l": 0.41, "bbox_mAP_copypaste": "0.344 0.469 0.364 0.030 0.055 0.410"}
{"mode": "train", "epoch": 40, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06549, "loss_rpn_cls": 0.00741, "loss_rpn_bbox": 0.01339, "s0.loss_cls": 0.09637, "s0.acc": 96.59277, "s0.loss_bbox": 0.17622, "s1.loss_cls": 0.03935, "s1.acc": 97.31517, "s1.loss_bbox": 0.07805, "s2.loss_cls": 0.0187, "s2.acc": 97.37964, "s2.loss_bbox": 0.0341, "loss": 0.46359, "time": 1.16253}
{"mode": "train", "epoch": 40, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01721, "loss_rpn_cls": 0.00893, "loss_rpn_bbox": 0.01606, "s0.loss_cls": 0.09968, "s0.acc": 96.48242, "s0.loss_bbox": 0.17965, "s1.loss_cls": 0.04102, "s1.acc": 97.203, "s1.loss_bbox": 0.07808, "s2.loss_cls": 0.01884, "s2.acc": 97.42519, "s2.loss_bbox": 0.03345, "loss": 0.47572, "time": 1.10513}
{"mode": "train", "epoch": 40, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01831, "loss_rpn_cls": 0.00836, "loss_rpn_bbox": 0.01595, "s0.loss_cls": 0.1058, "s0.acc": 96.34766, "s0.loss_bbox": 0.18289, "s1.loss_cls": 0.04256, "s1.acc": 97.13367, "s1.loss_bbox": 0.08041, "s2.loss_cls": 0.01978, "s2.acc": 97.28177, "s2.loss_bbox": 0.03418, "loss": 0.48993, "time": 1.13416}
{"mode": "train", "epoch": 40, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01753, "loss_rpn_cls": 0.00866, "loss_rpn_bbox": 0.01513, "s0.loss_cls": 0.10062, "s0.acc": 96.39941, "s0.loss_bbox": 0.1774, "s1.loss_cls": 0.03926, "s1.acc": 97.28672, "s1.loss_bbox": 0.07771, "s2.loss_cls": 0.01843, "s2.acc": 97.45874, "s2.loss_bbox": 0.03375, "loss": 0.47097, "time": 1.12436}
{"mode": "train", "epoch": 40, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01734, "loss_rpn_cls": 0.00872, "loss_rpn_bbox": 0.01505, "s0.loss_cls": 0.09768, "s0.acc": 96.45459, "s0.loss_bbox": 0.17208, "s1.loss_cls": 0.04011, "s1.acc": 97.16209, "s1.loss_bbox": 0.07471, "s2.loss_cls": 0.01905, "s2.acc": 97.27383, "s2.loss_bbox": 0.03173, "loss": 0.45914, "time": 1.10227}
{"mode": "train", "epoch": 40, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01703, "loss_rpn_cls": 0.01019, "loss_rpn_bbox": 0.01596, "s0.loss_cls": 0.10907, "s0.acc": 96.15332, "s0.loss_bbox": 0.19171, "s1.loss_cls": 0.04325, "s1.acc": 97.0604, "s1.loss_bbox": 0.08069, "s2.loss_cls": 0.02024, "s2.acc": 97.3018, "s2.loss_bbox": 0.03445, "loss": 0.50556, "time": 1.10296}
{"mode": "train", "epoch": 40, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01757, "loss_rpn_cls": 0.00761, "loss_rpn_bbox": 0.01475, "s0.loss_cls": 0.09914, "s0.acc": 96.46777, "s0.loss_bbox": 0.17699, "s1.loss_cls": 0.04093, "s1.acc": 97.19836, "s1.loss_bbox": 0.0778, "s2.loss_cls": 0.01936, "s2.acc": 97.24108, "s2.loss_bbox": 0.03417, "loss": 0.47075, "time": 1.12074}
{"mode": "train", "epoch": 40, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01736, "loss_rpn_cls": 0.00947, "loss_rpn_bbox": 0.01509, "s0.loss_cls": 0.10214, "s0.acc": 96.38232, "s0.loss_bbox": 0.17369, "s1.loss_cls": 0.04084, "s1.acc": 97.18918, "s1.loss_bbox": 0.07481, "s2.loss_cls": 0.01957, "s2.acc": 97.23828, "s2.loss_bbox": 0.03247, "loss": 0.46809, "time": 1.10669}
{"mode": "train", "epoch": 40, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01703, "loss_rpn_cls": 0.0083, "loss_rpn_bbox": 0.01369, "s0.loss_cls": 0.09324, "s0.acc": 96.75684, "s0.loss_bbox": 0.16414, "s1.loss_cls": 0.03824, "s1.acc": 97.37526, "s1.loss_bbox": 0.07214, "s2.loss_cls": 0.01769, "s2.acc": 97.53601, "s2.loss_bbox": 0.03116, "loss": 0.4386, "time": 1.0952}
{"mode": "val", "epoch": 40, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.344, "bbox_mAP_50": 0.47, "bbox_mAP_75": 0.364, "bbox_mAP_s": 0.03, "bbox_mAP_m": 0.056, "bbox_mAP_l": 0.41, "bbox_mAP_copypaste": "0.344 0.470 0.364 0.030 0.056 0.410"}
{"mode": "train", "epoch": 41, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06578, "loss_rpn_cls": 0.00803, "loss_rpn_bbox": 0.0147, "s0.loss_cls": 0.09955, "s0.acc": 96.49316, "s0.loss_bbox": 0.17337, "s1.loss_cls": 0.03937, "s1.acc": 97.27445, "s1.loss_bbox": 0.07622, "s2.loss_cls": 0.0188, "s2.acc": 97.36859, "s2.loss_bbox": 0.03303, "loss": 0.46308, "time": 1.16631}
{"mode": "train", "epoch": 41, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01706, "loss_rpn_cls": 0.00894, "loss_rpn_bbox": 0.01447, "s0.loss_cls": 0.10942, "s0.acc": 96.15186, "s0.loss_bbox": 0.19179, "s1.loss_cls": 0.04343, "s1.acc": 97.02517, "s1.loss_bbox": 0.08212, "s2.loss_cls": 0.02101, "s2.acc": 97.16727, "s2.loss_bbox": 0.0346, "loss": 0.50579, "time": 1.11764}
{"mode": "train", "epoch": 41, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01684, "loss_rpn_cls": 0.00828, "loss_rpn_bbox": 0.01659, "s0.loss_cls": 0.10156, "s0.acc": 96.38477, "s0.loss_bbox": 0.17867, "s1.loss_cls": 0.04084, "s1.acc": 97.17133, "s1.loss_bbox": 0.07867, "s2.loss_cls": 0.01913, "s2.acc": 97.21249, "s2.loss_bbox": 0.0341, "loss": 0.47784, "time": 1.11439}
{"mode": "train", "epoch": 41, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01751, "loss_rpn_cls": 0.00881, "loss_rpn_bbox": 0.016, "s0.loss_cls": 0.10143, "s0.acc": 96.36475, "s0.loss_bbox": 0.18595, "s1.loss_cls": 0.03962, "s1.acc": 97.22864, "s1.loss_bbox": 0.08071, "s2.loss_cls": 0.0187, "s2.acc": 97.43014, "s2.loss_bbox": 0.03472, "loss": 0.48594, "time": 1.10715}
{"mode": "train", "epoch": 41, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01671, "loss_rpn_cls": 0.01005, "loss_rpn_bbox": 0.01572, "s0.loss_cls": 0.10704, "s0.acc": 96.23877, "s0.loss_bbox": 0.18509, "s1.loss_cls": 0.04357, "s1.acc": 97.01314, "s1.loss_bbox": 0.07983, "s2.loss_cls": 0.0203, "s2.acc": 97.11381, "s2.loss_bbox": 0.03378, "loss": 0.49537, "time": 1.09976}
{"mode": "train", "epoch": 41, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.0165, "loss_rpn_cls": 0.00829, "loss_rpn_bbox": 0.01579, "s0.loss_cls": 0.08954, "s0.acc": 96.83643, "s0.loss_bbox": 0.16557, "s1.loss_cls": 0.03597, "s1.acc": 97.53029, "s1.loss_bbox": 0.07181, "s2.loss_cls": 0.01662, "s2.acc": 97.66183, "s2.loss_bbox": 0.03112, "loss": 0.43473, "time": 1.1235}
{"mode": "train", "epoch": 41, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01783, "loss_rpn_cls": 0.00735, "loss_rpn_bbox": 0.01246, "s0.loss_cls": 0.09204, "s0.acc": 96.79199, "s0.loss_bbox": 0.17187, "s1.loss_cls": 0.03645, "s1.acc": 97.46489, "s1.loss_bbox": 0.07653, "s2.loss_cls": 0.01749, "s2.acc": 97.49158, "s2.loss_bbox": 0.03387, "loss": 0.44807, "time": 1.12192}
{"mode": "train", "epoch": 41, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01778, "loss_rpn_cls": 0.00942, "loss_rpn_bbox": 0.01455, "s0.loss_cls": 0.09903, "s0.acc": 96.58252, "s0.loss_bbox": 0.17481, "s1.loss_cls": 0.03981, "s1.acc": 97.25959, "s1.loss_bbox": 0.07404, "s2.loss_cls": 0.01849, "s2.acc": 97.40494, "s2.loss_bbox": 0.03163, "loss": 0.46176, "time": 1.11255}
{"mode": "train", "epoch": 41, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01728, "loss_rpn_cls": 0.00729, "loss_rpn_bbox": 0.01209, "s0.loss_cls": 0.08386, "s0.acc": 96.97803, "s0.loss_bbox": 0.15509, "s1.loss_cls": 0.03237, "s1.acc": 97.71956, "s1.loss_bbox": 0.06782, "s2.loss_cls": 0.01522, "s2.acc": 97.86625, "s2.loss_bbox": 0.02986, "loss": 0.4036, "time": 1.10984}
{"mode": "val", "epoch": 41, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.346, "bbox_mAP_50": 0.472, "bbox_mAP_75": 0.365, "bbox_mAP_s": 0.031, "bbox_mAP_m": 0.054, "bbox_mAP_l": 0.412, "bbox_mAP_copypaste": "0.346 0.472 0.365 0.031 0.054 0.412"}
{"mode": "train", "epoch": 42, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.0654, "loss_rpn_cls": 0.00767, "loss_rpn_bbox": 0.01172, "s0.loss_cls": 0.09058, "s0.acc": 96.84082, "s0.loss_bbox": 0.16704, "s1.loss_cls": 0.0344, "s1.acc": 97.59806, "s1.loss_bbox": 0.07314, "s2.loss_cls": 0.01637, "s2.acc": 97.61058, "s2.loss_bbox": 0.03205, "loss": 0.43297, "time": 1.17188}
{"mode": "train", "epoch": 42, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01697, "loss_rpn_cls": 0.00808, "loss_rpn_bbox": 0.01442, "s0.loss_cls": 0.09574, "s0.acc": 96.62012, "s0.loss_bbox": 0.17253, "s1.loss_cls": 0.03797, "s1.acc": 97.3867, "s1.loss_bbox": 0.07465, "s2.loss_cls": 0.01796, "s2.acc": 97.40994, "s2.loss_bbox": 0.03258, "loss": 0.45393, "time": 1.10754}
{"mode": "train", "epoch": 42, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01735, "loss_rpn_cls": 0.00757, "loss_rpn_bbox": 0.01388, "s0.loss_cls": 0.09359, "s0.acc": 96.69629, "s0.loss_bbox": 0.16894, "s1.loss_cls": 0.03733, "s1.acc": 97.416, "s1.loss_bbox": 0.07407, "s2.loss_cls": 0.01782, "s2.acc": 97.45206, "s2.loss_bbox": 0.03223, "loss": 0.44543, "time": 1.11669}
{"mode": "train", "epoch": 42, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01707, "loss_rpn_cls": 0.0092, "loss_rpn_bbox": 0.01701, "s0.loss_cls": 0.0969, "s0.acc": 96.61914, "s0.loss_bbox": 0.17339, "s1.loss_cls": 0.03885, "s1.acc": 97.39284, "s1.loss_bbox": 0.07483, "s2.loss_cls": 0.01834, "s2.acc": 97.5825, "s2.loss_bbox": 0.03247, "loss": 0.46099, "time": 1.09872}
{"mode": "train", "epoch": 42, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01717, "loss_rpn_cls": 0.00748, "loss_rpn_bbox": 0.01403, "s0.loss_cls": 0.08895, "s0.acc": 96.86328, "s0.loss_bbox": 0.16267, "s1.loss_cls": 0.03465, "s1.acc": 97.57702, "s1.loss_bbox": 0.0716, "s2.loss_cls": 0.01674, "s2.acc": 97.66977, "s2.loss_bbox": 0.03171, "loss": 0.42783, "time": 1.11282}
{"mode": "train", "epoch": 42, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01735, "loss_rpn_cls": 0.00923, "loss_rpn_bbox": 0.01552, "s0.loss_cls": 0.10066, "s0.acc": 96.52246, "s0.loss_bbox": 0.18102, "s1.loss_cls": 0.04148, "s1.acc": 97.18105, "s1.loss_bbox": 0.07791, "s2.loss_cls": 0.01941, "s2.acc": 97.32477, "s2.loss_bbox": 0.03335, "loss": 0.47858, "time": 1.11681}
{"mode": "train", "epoch": 42, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.0173, "loss_rpn_cls": 0.00949, "loss_rpn_bbox": 0.01579, "s0.loss_cls": 0.10779, "s0.acc": 96.21533, "s0.loss_bbox": 0.18848, "s1.loss_cls": 0.04408, "s1.acc": 96.99978, "s1.loss_bbox": 0.08126, "s2.loss_cls": 0.02108, "s2.acc": 97.05334, "s2.loss_bbox": 0.03434, "loss": 0.50231, "time": 1.12094}
{"mode": "train", "epoch": 42, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01709, "loss_rpn_cls": 0.00885, "loss_rpn_bbox": 0.0159, "s0.loss_cls": 0.10206, "s0.acc": 96.37354, "s0.loss_bbox": 0.1869, "s1.loss_cls": 0.0403, "s1.acc": 97.20081, "s1.loss_bbox": 0.08152, "s2.loss_cls": 0.01899, "s2.acc": 97.34165, "s2.loss_bbox": 0.03499, "loss": 0.48952, "time": 1.11299}
{"mode": "train", "epoch": 42, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01697, "loss_rpn_cls": 0.00784, "loss_rpn_bbox": 0.01446, "s0.loss_cls": 0.0935, "s0.acc": 96.70947, "s0.loss_bbox": 0.16545, "s1.loss_cls": 0.03663, "s1.acc": 97.4889, "s1.loss_bbox": 0.07299, "s2.loss_cls": 0.01736, "s2.acc": 97.54234, "s2.loss_bbox": 0.03206, "loss": 0.44028, "time": 1.10774}
{"mode": "val", "epoch": 42, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.345, "bbox_mAP_50": 0.471, "bbox_mAP_75": 0.366, "bbox_mAP_s": 0.03, "bbox_mAP_m": 0.055, "bbox_mAP_l": 0.411, "bbox_mAP_copypaste": "0.345 0.471 0.366 0.030 0.055 0.411"}
{"mode": "train", "epoch": 43, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06613, "loss_rpn_cls": 0.00838, "loss_rpn_bbox": 0.01458, "s0.loss_cls": 0.09658, "s0.acc": 96.55518, "s0.loss_bbox": 0.17412, "s1.loss_cls": 0.039, "s1.acc": 97.32961, "s1.loss_bbox": 0.07641, "s2.loss_cls": 0.01819, "s2.acc": 97.47287, "s2.loss_bbox": 0.03284, "loss": 0.46011, "time": 1.1645}
{"mode": "train", "epoch": 43, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01733, "loss_rpn_cls": 0.0099, "loss_rpn_bbox": 0.01531, "s0.loss_cls": 0.10215, "s0.acc": 96.39648, "s0.loss_bbox": 0.18527, "s1.loss_cls": 0.03985, "s1.acc": 97.29214, "s1.loss_bbox": 0.0796, "s2.loss_cls": 0.01927, "s2.acc": 97.31512, "s2.loss_bbox": 0.03463, "loss": 0.48598, "time": 1.1147}
{"mode": "train", "epoch": 43, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01694, "loss_rpn_cls": 0.00875, "loss_rpn_bbox": 0.01401, "s0.loss_cls": 0.10008, "s0.acc": 96.45459, "s0.loss_bbox": 0.17828, "s1.loss_cls": 0.039, "s1.acc": 97.23078, "s1.loss_bbox": 0.07731, "s2.loss_cls": 0.01836, "s2.acc": 97.42342, "s2.loss_bbox": 0.03323, "loss": 0.46902, "time": 1.10611}
{"mode": "train", "epoch": 43, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01705, "loss_rpn_cls": 0.00794, "loss_rpn_bbox": 0.01436, "s0.loss_cls": 0.08901, "s0.acc": 96.90674, "s0.loss_bbox": 0.16457, "s1.loss_cls": 0.03453, "s1.acc": 97.54394, "s1.loss_bbox": 0.07202, "s2.loss_cls": 0.01627, "s2.acc": 97.6768, "s2.loss_bbox": 0.03135, "loss": 0.43005, "time": 1.09643}
{"mode": "train", "epoch": 43, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01667, "loss_rpn_cls": 0.00715, "loss_rpn_bbox": 0.01288, "s0.loss_cls": 0.08927, "s0.acc": 96.86133, "s0.loss_bbox": 0.16363, "s1.loss_cls": 0.03523, "s1.acc": 97.56415, "s1.loss_bbox": 0.07028, "s2.loss_cls": 0.01654, "s2.acc": 97.68831, "s2.loss_bbox": 0.0304, "loss": 0.42538, "time": 1.09128}
{"mode": "train", "epoch": 43, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01665, "loss_rpn_cls": 0.00791, "loss_rpn_bbox": 0.01395, "s0.loss_cls": 0.0938, "s0.acc": 96.71436, "s0.loss_bbox": 0.16597, "s1.loss_cls": 0.03729, "s1.acc": 97.4783, "s1.loss_bbox": 0.07112, "s2.loss_cls": 0.01738, "s2.acc": 97.62021, "s2.loss_bbox": 0.03095, "loss": 0.43837, "time": 1.09232}
{"mode": "train", "epoch": 43, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01695, "loss_rpn_cls": 0.00844, "loss_rpn_bbox": 0.0152, "s0.loss_cls": 0.10164, "s0.acc": 96.40771, "s0.loss_bbox": 0.17835, "s1.loss_cls": 0.03961, "s1.acc": 97.30144, "s1.loss_bbox": 0.07758, "s2.loss_cls": 0.01859, "s2.acc": 97.34827, "s2.loss_bbox": 0.03332, "loss": 0.47272, "time": 1.10649}
{"mode": "train", "epoch": 43, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01708, "loss_rpn_cls": 0.00843, "loss_rpn_bbox": 0.01632, "s0.loss_cls": 0.10092, "s0.acc": 96.43359, "s0.loss_bbox": 0.18171, "s1.loss_cls": 0.03921, "s1.acc": 97.28067, "s1.loss_bbox": 0.07767, "s2.loss_cls": 0.01836, "s2.acc": 97.3723, "s2.loss_bbox": 0.03345, "loss": 0.47605, "time": 1.11344}
{"mode": "train", "epoch": 43, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.017, "loss_rpn_cls": 0.00866, "loss_rpn_bbox": 0.01528, "s0.loss_cls": 0.10197, "s0.acc": 96.40479, "s0.loss_bbox": 0.18347, "s1.loss_cls": 0.04027, "s1.acc": 97.22217, "s1.loss_bbox": 0.08127, "s2.loss_cls": 0.01982, "s2.acc": 97.1798, "s2.loss_bbox": 0.035, "loss": 0.48573, "time": 1.11219}
{"mode": "val", "epoch": 43, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.342, "bbox_mAP_50": 0.467, "bbox_mAP_75": 0.363, "bbox_mAP_s": 0.022, "bbox_mAP_m": 0.055, "bbox_mAP_l": 0.408, "bbox_mAP_copypaste": "0.342 0.467 0.363 0.022 0.055 0.408"}
{"mode": "train", "epoch": 44, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06593, "loss_rpn_cls": 0.00871, "loss_rpn_bbox": 0.01518, "s0.loss_cls": 0.10567, "s0.acc": 96.21777, "s0.loss_bbox": 0.18811, "s1.loss_cls": 0.0423, "s1.acc": 97.0366, "s1.loss_bbox": 0.08122, "s2.loss_cls": 0.01942, "s2.acc": 97.25718, "s2.loss_bbox": 0.03502, "loss": 0.49564, "time": 1.16698}
{"mode": "train", "epoch": 44, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01704, "loss_rpn_cls": 0.00773, "loss_rpn_bbox": 0.01447, "s0.loss_cls": 0.09647, "s0.acc": 96.59326, "s0.loss_bbox": 0.17996, "s1.loss_cls": 0.03673, "s1.acc": 97.45793, "s1.loss_bbox": 0.07828, "s2.loss_cls": 0.01787, "s2.acc": 97.50123, "s2.loss_bbox": 0.0345, "loss": 0.46601, "time": 1.1059}
{"mode": "train", "epoch": 44, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01731, "loss_rpn_cls": 0.00812, "loss_rpn_bbox": 0.01583, "s0.loss_cls": 0.09848, "s0.acc": 96.49463, "s0.loss_bbox": 0.17664, "s1.loss_cls": 0.03915, "s1.acc": 97.31508, "s1.loss_bbox": 0.07709, "s2.loss_cls": 0.0179, "s2.acc": 97.5297, "s2.loss_bbox": 0.03379, "loss": 0.46701, "time": 1.11681}
{"mode": "train", "epoch": 44, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.0169, "loss_rpn_cls": 0.00844, "loss_rpn_bbox": 0.0143, "s0.loss_cls": 0.09756, "s0.acc": 96.5542, "s0.loss_bbox": 0.17421, "s1.loss_cls": 0.03743, "s1.acc": 97.42143, "s1.loss_bbox": 0.07508, "s2.loss_cls": 0.01742, "s2.acc": 97.61084, "s2.loss_bbox": 0.03281, "loss": 0.45725, "time": 1.10706}
{"mode": "train", "epoch": 44, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01713, "loss_rpn_cls": 0.00827, "loss_rpn_bbox": 0.01566, "s0.loss_cls": 0.09794, "s0.acc": 96.53613, "s0.loss_bbox": 0.17668, "s1.loss_cls": 0.03858, "s1.acc": 97.32335, "s1.loss_bbox": 0.07551, "s2.loss_cls": 0.01822, "s2.acc": 97.48766, "s2.loss_bbox": 0.03222, "loss": 0.46308, "time": 1.11443}
{"mode": "train", "epoch": 44, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01704, "loss_rpn_cls": 0.00635, "loss_rpn_bbox": 0.01389, "s0.loss_cls": 0.08858, "s0.acc": 96.87158, "s0.loss_bbox": 0.15768, "s1.loss_cls": 0.03608, "s1.acc": 97.54819, "s1.loss_bbox": 0.07001, "s2.loss_cls": 0.01724, "s2.acc": 97.61492, "s2.loss_bbox": 0.03027, "loss": 0.42012, "time": 1.11789}
{"mode": "train", "epoch": 44, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01727, "loss_rpn_cls": 0.00792, "loss_rpn_bbox": 0.01334, "s0.loss_cls": 0.09427, "s0.acc": 96.73291, "s0.loss_bbox": 0.16714, "s1.loss_cls": 0.03729, "s1.acc": 97.37757, "s1.loss_bbox": 0.07435, "s2.loss_cls": 0.01737, "s2.acc": 97.60783, "s2.loss_bbox": 0.03279, "loss": 0.44447, "time": 1.1139}
{"mode": "train", "epoch": 44, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01669, "loss_rpn_cls": 0.00665, "loss_rpn_bbox": 0.01234, "s0.loss_cls": 0.08918, "s0.acc": 96.84229, "s0.loss_bbox": 0.16186, "s1.loss_cls": 0.03497, "s1.acc": 97.58203, "s1.loss_bbox": 0.0702, "s2.loss_cls": 0.01693, "s2.acc": 97.60574, "s2.loss_bbox": 0.03025, "loss": 0.42238, "time": 1.10916}
{"mode": "train", "epoch": 44, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.0171, "loss_rpn_cls": 0.00797, "loss_rpn_bbox": 0.01448, "s0.loss_cls": 0.09817, "s0.acc": 96.51953, "s0.loss_bbox": 0.17029, "s1.loss_cls": 0.03997, "s1.acc": 97.23038, "s1.loss_bbox": 0.07346, "s2.loss_cls": 0.01825, "s2.acc": 97.50742, "s2.loss_bbox": 0.03128, "loss": 0.45387, "time": 1.0981}
{"mode": "val", "epoch": 44, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.344, "bbox_mAP_50": 0.47, "bbox_mAP_75": 0.366, "bbox_mAP_s": 0.021, "bbox_mAP_m": 0.059, "bbox_mAP_l": 0.41, "bbox_mAP_copypaste": "0.344 0.470 0.366 0.021 0.059 0.410"}
{"mode": "train", "epoch": 45, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06584, "loss_rpn_cls": 0.0073, "loss_rpn_bbox": 0.0145, "s0.loss_cls": 0.09599, "s0.acc": 96.62158, "s0.loss_bbox": 0.17129, "s1.loss_cls": 0.03715, "s1.acc": 97.48924, "s1.loss_bbox": 0.07397, "s2.loss_cls": 0.01668, "s2.acc": 97.76496, "s2.loss_bbox": 0.032, "loss": 0.44888, "time": 1.1518}
{"mode": "train", "epoch": 45, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01731, "loss_rpn_cls": 0.00789, "loss_rpn_bbox": 0.01394, "s0.loss_cls": 0.09727, "s0.acc": 96.62939, "s0.loss_bbox": 0.17286, "s1.loss_cls": 0.03647, "s1.acc": 97.50496, "s1.loss_bbox": 0.07495, "s2.loss_cls": 0.0169, "s2.acc": 97.63113, "s2.loss_bbox": 0.03256, "loss": 0.45283, "time": 1.12172}
{"mode": "train", "epoch": 45, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01695, "loss_rpn_cls": 0.00872, "loss_rpn_bbox": 0.01448, "s0.loss_cls": 0.09347, "s0.acc": 96.71533, "s0.loss_bbox": 0.17466, "s1.loss_cls": 0.03732, "s1.acc": 97.4379, "s1.loss_bbox": 0.07602, "s2.loss_cls": 0.01768, "s2.acc": 97.59246, "s2.loss_bbox": 0.0329, "loss": 0.45525, "time": 1.10573}
{"mode": "train", "epoch": 45, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01741, "loss_rpn_cls": 0.00698, "loss_rpn_bbox": 0.0129, "s0.loss_cls": 0.09198, "s0.acc": 96.81396, "s0.loss_bbox": 0.16598, "s1.loss_cls": 0.03691, "s1.acc": 97.40548, "s1.loss_bbox": 0.07269, "s2.loss_cls": 0.01674, "s2.acc": 97.69617, "s2.loss_bbox": 0.03213, "loss": 0.43633, "time": 1.11852}
{"mode": "train", "epoch": 45, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.0174, "loss_rpn_cls": 0.00784, "loss_rpn_bbox": 0.01279, "s0.loss_cls": 0.09571, "s0.acc": 96.61768, "s0.loss_bbox": 0.17639, "s1.loss_cls": 0.03812, "s1.acc": 97.34266, "s1.loss_bbox": 0.07762, "s2.loss_cls": 0.01798, "s2.acc": 97.42546, "s2.loss_bbox": 0.03357, "loss": 0.46002, "time": 1.11067}
{"mode": "train", "epoch": 45, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01784, "loss_rpn_cls": 0.00955, "loss_rpn_bbox": 0.01695, "s0.loss_cls": 0.10067, "s0.acc": 96.44531, "s0.loss_bbox": 0.18208, "s1.loss_cls": 0.03991, "s1.acc": 97.24569, "s1.loss_bbox": 0.07793, "s2.loss_cls": 0.01875, "s2.acc": 97.34843, "s2.loss_bbox": 0.03287, "loss": 0.47871, "time": 1.11285}
{"mode": "train", "epoch": 45, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01742, "loss_rpn_cls": 0.00803, "loss_rpn_bbox": 0.01642, "s0.loss_cls": 0.10101, "s0.acc": 96.4585, "s0.loss_bbox": 0.1812, "s1.loss_cls": 0.04079, "s1.acc": 97.15761, "s1.loss_bbox": 0.07738, "s2.loss_cls": 0.01924, "s2.acc": 97.23122, "s2.loss_bbox": 0.03326, "loss": 0.47734, "time": 1.11783}
{"mode": "train", "epoch": 45, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01667, "loss_rpn_cls": 0.00753, "loss_rpn_bbox": 0.01451, "s0.loss_cls": 0.09501, "s0.acc": 96.61621, "s0.loss_bbox": 0.168, "s1.loss_cls": 0.03779, "s1.acc": 97.36657, "s1.loss_bbox": 0.07349, "s2.loss_cls": 0.01784, "s2.acc": 97.46988, "s2.loss_bbox": 0.03186, "loss": 0.44603, "time": 1.09663}
{"mode": "train", "epoch": 45, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01737, "loss_rpn_cls": 0.00678, "loss_rpn_bbox": 0.01406, "s0.loss_cls": 0.08656, "s0.acc": 96.9585, "s0.loss_bbox": 0.16245, "s1.loss_cls": 0.03405, "s1.acc": 97.61067, "s1.loss_bbox": 0.07183, "s2.loss_cls": 0.0155, "s2.acc": 97.81832, "s2.loss_bbox": 0.03158, "loss": 0.42282, "time": 1.10846}
{"mode": "val", "epoch": 45, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.344, "bbox_mAP_50": 0.47, "bbox_mAP_75": 0.366, "bbox_mAP_s": 0.03, "bbox_mAP_m": 0.055, "bbox_mAP_l": 0.411, "bbox_mAP_copypaste": "0.344 0.470 0.366 0.030 0.055 0.411"}
{"mode": "train", "epoch": 46, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06461, "loss_rpn_cls": 0.00697, "loss_rpn_bbox": 0.01329, "s0.loss_cls": 0.09069, "s0.acc": 96.77783, "s0.loss_bbox": 0.16993, "s1.loss_cls": 0.03462, "s1.acc": 97.60564, "s1.loss_bbox": 0.07473, "s2.loss_cls": 0.01638, "s2.acc": 97.76236, "s2.loss_bbox": 0.03278, "loss": 0.43939, "time": 1.1584}
{"mode": "train", "epoch": 46, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01678, "loss_rpn_cls": 0.00689, "loss_rpn_bbox": 0.01326, "s0.loss_cls": 0.08872, "s0.acc": 96.86914, "s0.loss_bbox": 0.16599, "s1.loss_cls": 0.03392, "s1.acc": 97.61341, "s1.loss_bbox": 0.07064, "s2.loss_cls": 0.01615, "s2.acc": 97.81754, "s2.loss_bbox": 0.03139, "loss": 0.42697, "time": 1.10704}
{"mode": "train", "epoch": 46, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01671, "loss_rpn_cls": 0.00858, "loss_rpn_bbox": 0.01574, "s0.loss_cls": 0.10153, "s0.acc": 96.41699, "s0.loss_bbox": 0.17653, "s1.loss_cls": 0.04035, "s1.acc": 97.19981, "s1.loss_bbox": 0.07585, "s2.loss_cls": 0.01913, "s2.acc": 97.3742, "s2.loss_bbox": 0.03292, "loss": 0.47062, "time": 1.11095}
{"mode": "train", "epoch": 46, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01704, "loss_rpn_cls": 0.00759, "loss_rpn_bbox": 0.01424, "s0.loss_cls": 0.09998, "s0.acc": 96.42041, "s0.loss_bbox": 0.18602, "s1.loss_cls": 0.04056, "s1.acc": 97.13724, "s1.loss_bbox": 0.08121, "s2.loss_cls": 0.01907, "s2.acc": 97.29103, "s2.loss_bbox": 0.03457, "loss": 0.48325, "time": 1.09494}
{"mode": "train", "epoch": 46, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01654, "loss_rpn_cls": 0.00893, "loss_rpn_bbox": 0.01581, "s0.loss_cls": 0.10149, "s0.acc": 96.40869, "s0.loss_bbox": 0.17805, "s1.loss_cls": 0.04043, "s1.acc": 97.16032, "s1.loss_bbox": 0.07702, "s2.loss_cls": 0.01941, "s2.acc": 97.23612, "s2.loss_bbox": 0.03287, "loss": 0.47401, "time": 1.10522}
{"mode": "train", "epoch": 46, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.016, "loss_rpn_cls": 0.0083, "loss_rpn_bbox": 0.01368, "s0.loss_cls": 0.09182, "s0.acc": 96.82617, "s0.loss_bbox": 0.16878, "s1.loss_cls": 0.03534, "s1.acc": 97.57886, "s1.loss_bbox": 0.07295, "s2.loss_cls": 0.01607, "s2.acc": 97.72769, "s2.loss_bbox": 0.03193, "loss": 0.43887, "time": 1.0859}
{"mode": "train", "epoch": 46, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01656, "loss_rpn_cls": 0.00748, "loss_rpn_bbox": 0.01411, "s0.loss_cls": 0.09414, "s0.acc": 96.6709, "s0.loss_bbox": 0.17085, "s1.loss_cls": 0.03605, "s1.acc": 97.47076, "s1.loss_bbox": 0.07281, "s2.loss_cls": 0.01685, "s2.acc": 97.66457, "s2.loss_bbox": 0.03244, "loss": 0.44474, "time": 1.10726}
{"mode": "train", "epoch": 46, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01703, "loss_rpn_cls": 0.0083, "loss_rpn_bbox": 0.01553, "s0.loss_cls": 0.09423, "s0.acc": 96.70898, "s0.loss_bbox": 0.17691, "s1.loss_cls": 0.03707, "s1.acc": 97.46172, "s1.loss_bbox": 0.07537, "s2.loss_cls": 0.01757, "s2.acc": 97.59198, "s2.loss_bbox": 0.03281, "loss": 0.45778, "time": 1.11036}
{"mode": "train", "epoch": 46, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01753, "loss_rpn_cls": 0.0073, "loss_rpn_bbox": 0.01292, "s0.loss_cls": 0.0902, "s0.acc": 96.81152, "s0.loss_bbox": 0.16221, "s1.loss_cls": 0.03527, "s1.acc": 97.54352, "s1.loss_bbox": 0.07134, "s2.loss_cls": 0.01628, "s2.acc": 97.76304, "s2.loss_bbox": 0.03151, "loss": 0.42703, "time": 1.10893}
{"mode": "val", "epoch": 46, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.342, "bbox_mAP_50": 0.468, "bbox_mAP_75": 0.36, "bbox_mAP_s": 0.021, "bbox_mAP_m": 0.056, "bbox_mAP_l": 0.408, "bbox_mAP_copypaste": "0.342 0.468 0.360 0.021 0.056 0.408"}
{"mode": "train", "epoch": 47, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06649, "loss_rpn_cls": 0.00691, "loss_rpn_bbox": 0.01517, "s0.loss_cls": 0.09523, "s0.acc": 96.59814, "s0.loss_bbox": 0.18169, "s1.loss_cls": 0.03696, "s1.acc": 97.4179, "s1.loss_bbox": 0.07867, "s2.loss_cls": 0.01702, "s2.acc": 97.63427, "s2.loss_bbox": 0.03377, "loss": 0.46541, "time": 1.1624}
{"mode": "train", "epoch": 47, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.0177, "loss_rpn_cls": 0.00818, "loss_rpn_bbox": 0.01443, "s0.loss_cls": 0.09268, "s0.acc": 96.7959, "s0.loss_bbox": 0.16876, "s1.loss_cls": 0.03767, "s1.acc": 97.41311, "s1.loss_bbox": 0.0734, "s2.loss_cls": 0.01819, "s2.acc": 97.41064, "s2.loss_bbox": 0.03192, "loss": 0.44524, "time": 1.11037}
{"mode": "train", "epoch": 47, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01715, "loss_rpn_cls": 0.00795, "loss_rpn_bbox": 0.01469, "s0.loss_cls": 0.09912, "s0.acc": 96.55273, "s0.loss_bbox": 0.17588, "s1.loss_cls": 0.03952, "s1.acc": 97.30591, "s1.loss_bbox": 0.07686, "s2.loss_cls": 0.01852, "s2.acc": 97.46548, "s2.loss_bbox": 0.03325, "loss": 0.46578, "time": 1.11698}
{"mode": "train", "epoch": 47, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01734, "loss_rpn_cls": 0.00758, "loss_rpn_bbox": 0.01202, "s0.loss_cls": 0.08345, "s0.acc": 97.06494, "s0.loss_bbox": 0.1552, "s1.loss_cls": 0.03278, "s1.acc": 97.74359, "s1.loss_bbox": 0.06849, "s2.loss_cls": 0.01516, "s2.acc": 97.90626, "s2.loss_bbox": 0.03038, "loss": 0.40507, "time": 1.11176}
{"mode": "train", "epoch": 47, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01697, "loss_rpn_cls": 0.00654, "loss_rpn_bbox": 0.01269, "s0.loss_cls": 0.08583, "s0.acc": 96.91504, "s0.loss_bbox": 0.1626, "s1.loss_cls": 0.03306, "s1.acc": 97.62746, "s1.loss_bbox": 0.07071, "s2.loss_cls": 0.01543, "s2.acc": 97.7625, "s2.loss_bbox": 0.03106, "loss": 0.41794, "time": 1.11474}
{"mode": "train", "epoch": 47, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.0165, "loss_rpn_cls": 0.00791, "loss_rpn_bbox": 0.01484, "s0.loss_cls": 0.09481, "s0.acc": 96.64111, "s0.loss_bbox": 0.16992, "s1.loss_cls": 0.03729, "s1.acc": 97.40561, "s1.loss_bbox": 0.07412, "s2.loss_cls": 0.01744, "s2.acc": 97.62397, "s2.loss_bbox": 0.03272, "loss": 0.44906, "time": 1.09949}
{"mode": "train", "epoch": 47, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01659, "loss_rpn_cls": 0.00868, "loss_rpn_bbox": 0.01569, "s0.loss_cls": 0.09953, "s0.acc": 96.51758, "s0.loss_bbox": 0.18271, "s1.loss_cls": 0.03888, "s1.acc": 97.26792, "s1.loss_bbox": 0.0791, "s2.loss_cls": 0.01833, "s2.acc": 97.42341, "s2.loss_bbox": 0.03446, "loss": 0.47738, "time": 1.09433}
{"mode": "train", "epoch": 47, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01704, "loss_rpn_cls": 0.00686, "loss_rpn_bbox": 0.01508, "s0.loss_cls": 0.09088, "s0.acc": 96.77783, "s0.loss_bbox": 0.16513, "s1.loss_cls": 0.03603, "s1.acc": 97.44665, "s1.loss_bbox": 0.07216, "s2.loss_cls": 0.01676, "s2.acc": 97.61825, "s2.loss_bbox": 0.03173, "loss": 0.43463, "time": 1.10305}
{"mode": "train", "epoch": 47, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01675, "loss_rpn_cls": 0.00744, "loss_rpn_bbox": 0.01396, "s0.loss_cls": 0.09123, "s0.acc": 96.71045, "s0.loss_bbox": 0.17182, "s1.loss_cls": 0.03475, "s1.acc": 97.51694, "s1.loss_bbox": 0.07375, "s2.loss_cls": 0.01614, "s2.acc": 97.6962, "s2.loss_bbox": 0.0318, "loss": 0.44088, "time": 1.10063}
{"mode": "val", "epoch": 47, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.343, "bbox_mAP_50": 0.469, "bbox_mAP_75": 0.364, "bbox_mAP_s": 0.025, "bbox_mAP_m": 0.059, "bbox_mAP_l": 0.409, "bbox_mAP_copypaste": "0.343 0.469 0.364 0.025 0.059 0.409"}
{"mode": "train", "epoch": 48, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06544, "loss_rpn_cls": 0.00784, "loss_rpn_bbox": 0.01275, "s0.loss_cls": 0.08634, "s0.acc": 96.9043, "s0.loss_bbox": 0.16496, "s1.loss_cls": 0.03401, "s1.acc": 97.64493, "s1.loss_bbox": 0.07286, "s2.loss_cls": 0.01603, "s2.acc": 97.74505, "s2.loss_bbox": 0.03167, "loss": 0.42646, "time": 1.15831}
{"mode": "train", "epoch": 48, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01739, "loss_rpn_cls": 0.00702, "loss_rpn_bbox": 0.01417, "s0.loss_cls": 0.09579, "s0.acc": 96.68018, "s0.loss_bbox": 0.17885, "s1.loss_cls": 0.03675, "s1.acc": 97.4205, "s1.loss_bbox": 0.07675, "s2.loss_cls": 0.01723, "s2.acc": 97.55839, "s2.loss_bbox": 0.03283, "loss": 0.45937, "time": 1.13289}
{"mode": "train", "epoch": 48, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01695, "loss_rpn_cls": 0.00667, "loss_rpn_bbox": 0.01408, "s0.loss_cls": 0.09106, "s0.acc": 96.77002, "s0.loss_bbox": 0.16931, "s1.loss_cls": 0.03515, "s1.acc": 97.5484, "s1.loss_bbox": 0.07422, "s2.loss_cls": 0.01672, "s2.acc": 97.56579, "s2.loss_bbox": 0.03259, "loss": 0.4398, "time": 1.10815}
{"mode": "train", "epoch": 48, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01654, "loss_rpn_cls": 0.00694, "loss_rpn_bbox": 0.01323, "s0.loss_cls": 0.09196, "s0.acc": 96.73828, "s0.loss_bbox": 0.17033, "s1.loss_cls": 0.0353, "s1.acc": 97.53405, "s1.loss_bbox": 0.07406, "s2.loss_cls": 0.01643, "s2.acc": 97.68158, "s2.loss_bbox": 0.03227, "loss": 0.44052, "time": 1.12398}
{"mode": "train", "epoch": 48, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01639, "loss_rpn_cls": 0.00778, "loss_rpn_bbox": 0.01486, "s0.loss_cls": 0.0918, "s0.acc": 96.75684, "s0.loss_bbox": 0.16814, "s1.loss_cls": 0.036, "s1.acc": 97.49039, "s1.loss_bbox": 0.07267, "s2.loss_cls": 0.01669, "s2.acc": 97.66562, "s2.loss_bbox": 0.03128, "loss": 0.43922, "time": 1.10473}
{"mode": "train", "epoch": 48, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01713, "loss_rpn_cls": 0.0075, "loss_rpn_bbox": 0.01444, "s0.loss_cls": 0.09634, "s0.acc": 96.56641, "s0.loss_bbox": 0.17882, "s1.loss_cls": 0.03675, "s1.acc": 97.48884, "s1.loss_bbox": 0.07647, "s2.loss_cls": 0.01739, "s2.acc": 97.59895, "s2.loss_bbox": 0.03385, "loss": 0.46156, "time": 1.11087}
{"mode": "train", "epoch": 48, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.0168, "loss_rpn_cls": 0.00849, "loss_rpn_bbox": 0.01587, "s0.loss_cls": 0.10125, "s0.acc": 96.45312, "s0.loss_bbox": 0.18797, "s1.loss_cls": 0.03924, "s1.acc": 97.26232, "s1.loss_bbox": 0.08133, "s2.loss_cls": 0.01867, "s2.acc": 97.40751, "s2.loss_bbox": 0.03528, "loss": 0.4881, "time": 1.10409}
{"mode": "train", "epoch": 48, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01661, "loss_rpn_cls": 0.00757, "loss_rpn_bbox": 0.01404, "s0.loss_cls": 0.09638, "s0.acc": 96.625, "s0.loss_bbox": 0.16932, "s1.loss_cls": 0.03738, "s1.acc": 97.38178, "s1.loss_bbox": 0.07496, "s2.loss_cls": 0.01788, "s2.acc": 97.52001, "s2.loss_bbox": 0.0326, "loss": 0.45013, "time": 1.09166}
{"mode": "train", "epoch": 48, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01683, "loss_rpn_cls": 0.00881, "loss_rpn_bbox": 0.01375, "s0.loss_cls": 0.08657, "s0.acc": 96.94141, "s0.loss_bbox": 0.16111, "s1.loss_cls": 0.03368, "s1.acc": 97.71129, "s1.loss_bbox": 0.07075, "s2.loss_cls": 0.01607, "s2.acc": 97.77449, "s2.loss_bbox": 0.03196, "loss": 0.42269, "time": 1.09774}
{"mode": "val", "epoch": 48, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.342, "bbox_mAP_50": 0.47, "bbox_mAP_75": 0.363, "bbox_mAP_s": 0.027, "bbox_mAP_m": 0.055, "bbox_mAP_l": 0.409, "bbox_mAP_copypaste": "0.342 0.470 0.363 0.027 0.055 0.409"}
{"mode": "train", "epoch": 49, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06527, "loss_rpn_cls": 0.00726, "loss_rpn_bbox": 0.01525, "s0.loss_cls": 0.09326, "s0.acc": 96.6958, "s0.loss_bbox": 0.17493, "s1.loss_cls": 0.03602, "s1.acc": 97.49013, "s1.loss_bbox": 0.07679, "s2.loss_cls": 0.01689, "s2.acc": 97.65105, "s2.loss_bbox": 0.0337, "loss": 0.4541, "time": 1.15638}
{"mode": "train", "epoch": 49, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01701, "loss_rpn_cls": 0.00755, "loss_rpn_bbox": 0.01513, "s0.loss_cls": 0.0943, "s0.acc": 96.69873, "s0.loss_bbox": 0.17441, "s1.loss_cls": 0.03693, "s1.acc": 97.49823, "s1.loss_bbox": 0.07624, "s2.loss_cls": 0.01732, "s2.acc": 97.57282, "s2.loss_bbox": 0.03341, "loss": 0.45529, "time": 1.1066}
{"mode": "train", "epoch": 49, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01658, "loss_rpn_cls": 0.00821, "loss_rpn_bbox": 0.01549, "s0.loss_cls": 0.09381, "s0.acc": 96.64697, "s0.loss_bbox": 0.17451, "s1.loss_cls": 0.03659, "s1.acc": 97.45339, "s1.loss_bbox": 0.07602, "s2.loss_cls": 0.01705, "s2.acc": 97.6189, "s2.loss_bbox": 0.03369, "loss": 0.45537, "time": 1.09377}
{"mode": "train", "epoch": 49, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01717, "loss_rpn_cls": 0.00794, "loss_rpn_bbox": 0.01385, "s0.loss_cls": 0.0905, "s0.acc": 96.76025, "s0.loss_bbox": 0.16998, "s1.loss_cls": 0.03441, "s1.acc": 97.58922, "s1.loss_bbox": 0.07432, "s2.loss_cls": 0.01605, "s2.acc": 97.74522, "s2.loss_bbox": 0.03237, "loss": 0.43941, "time": 1.10643}
{"mode": "train", "epoch": 49, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01699, "loss_rpn_cls": 0.00823, "loss_rpn_bbox": 0.01569, "s0.loss_cls": 0.10068, "s0.acc": 96.44141, "s0.loss_bbox": 0.18234, "s1.loss_cls": 0.03954, "s1.acc": 97.23299, "s1.loss_bbox": 0.078, "s2.loss_cls": 0.01882, "s2.acc": 97.37525, "s2.loss_bbox": 0.03351, "loss": 0.4768, "time": 1.11383}
{"mode": "train", "epoch": 49, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01717, "loss_rpn_cls": 0.00721, "loss_rpn_bbox": 0.01371, "s0.loss_cls": 0.09808, "s0.acc": 96.55859, "s0.loss_bbox": 0.17529, "s1.loss_cls": 0.03876, "s1.acc": 97.32324, "s1.loss_bbox": 0.07564, "s2.loss_cls": 0.01827, "s2.acc": 97.44197, "s2.loss_bbox": 0.03228, "loss": 0.45924, "time": 1.11627}
{"mode": "train", "epoch": 49, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01694, "loss_rpn_cls": 0.00783, "loss_rpn_bbox": 0.01236, "s0.loss_cls": 0.09112, "s0.acc": 96.74658, "s0.loss_bbox": 0.1704, "s1.loss_cls": 0.03531, "s1.acc": 97.57663, "s1.loss_bbox": 0.07533, "s2.loss_cls": 0.01724, "s2.acc": 97.62972, "s2.loss_bbox": 0.03305, "loss": 0.44264, "time": 1.1045}
{"mode": "train", "epoch": 49, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01768, "loss_rpn_cls": 0.00663, "loss_rpn_bbox": 0.01278, "s0.loss_cls": 0.08305, "s0.acc": 97.0, "s0.loss_bbox": 0.16008, "s1.loss_cls": 0.03226, "s1.acc": 97.7758, "s1.loss_bbox": 0.06895, "s2.loss_cls": 0.01485, "s2.acc": 97.91365, "s2.loss_bbox": 0.03015, "loss": 0.40875, "time": 1.11808}
{"mode": "train", "epoch": 49, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01697, "loss_rpn_cls": 0.00662, "loss_rpn_bbox": 0.01362, "s0.loss_cls": 0.08432, "s0.acc": 97.01416, "s0.loss_bbox": 0.15819, "s1.loss_cls": 0.03327, "s1.acc": 97.71314, "s1.loss_bbox": 0.06964, "s2.loss_cls": 0.01529, "s2.acc": 97.82036, "s2.loss_bbox": 0.0303, "loss": 0.41126, "time": 1.10487}
{"mode": "val", "epoch": 49, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.341, "bbox_mAP_50": 0.469, "bbox_mAP_75": 0.362, "bbox_mAP_s": 0.027, "bbox_mAP_m": 0.055, "bbox_mAP_l": 0.408, "bbox_mAP_copypaste": "0.341 0.469 0.362 0.027 0.055 0.408"}
{"mode": "train", "epoch": 50, "iter": 50, "lr": 1e-05, "memory": 19005, "data_time": 0.06628, "loss_rpn_cls": 0.00792, "loss_rpn_bbox": 0.01442, "s0.loss_cls": 0.08816, "s0.acc": 96.89209, "s0.loss_bbox": 0.16503, "s1.loss_cls": 0.03472, "s1.acc": 97.67864, "s1.loss_bbox": 0.0714, "s2.loss_cls": 0.01588, "s2.acc": 97.77205, "s2.loss_bbox": 0.03126, "loss": 0.42879, "time": 1.16315}
{"mode": "train", "epoch": 50, "iter": 100, "lr": 1e-05, "memory": 19005, "data_time": 0.01711, "loss_rpn_cls": 0.00737, "loss_rpn_bbox": 0.0147, "s0.loss_cls": 0.09608, "s0.acc": 96.64648, "s0.loss_bbox": 0.17738, "s1.loss_cls": 0.03723, "s1.acc": 97.4335, "s1.loss_bbox": 0.07722, "s2.loss_cls": 0.0175, "s2.acc": 97.57921, "s2.loss_bbox": 0.03357, "loss": 0.46105, "time": 1.10307}
{"mode": "train", "epoch": 50, "iter": 150, "lr": 1e-05, "memory": 19005, "data_time": 0.01703, "loss_rpn_cls": 0.0067, "loss_rpn_bbox": 0.01418, "s0.loss_cls": 0.09021, "s0.acc": 96.81152, "s0.loss_bbox": 0.1732, "s1.loss_cls": 0.03466, "s1.acc": 97.59296, "s1.loss_bbox": 0.07628, "s2.loss_cls": 0.01664, "s2.acc": 97.67866, "s2.loss_bbox": 0.03304, "loss": 0.44491, "time": 1.12264}
{"mode": "train", "epoch": 50, "iter": 200, "lr": 1e-05, "memory": 19005, "data_time": 0.01654, "loss_rpn_cls": 0.0071, "loss_rpn_bbox": 0.01421, "s0.loss_cls": 0.09941, "s0.acc": 96.47559, "s0.loss_bbox": 0.17585, "s1.loss_cls": 0.03938, "s1.acc": 97.31984, "s1.loss_bbox": 0.07615, "s2.loss_cls": 0.01838, "s2.acc": 97.45823, "s2.loss_bbox": 0.03349, "loss": 0.46396, "time": 1.09303}
{"mode": "train", "epoch": 50, "iter": 250, "lr": 1e-05, "memory": 19005, "data_time": 0.01645, "loss_rpn_cls": 0.00891, "loss_rpn_bbox": 0.01411, "s0.loss_cls": 0.08888, "s0.acc": 96.91846, "s0.loss_bbox": 0.16671, "s1.loss_cls": 0.0344, "s1.acc": 97.61408, "s1.loss_bbox": 0.07133, "s2.loss_cls": 0.01594, "s2.acc": 97.84897, "s2.loss_bbox": 0.0307, "loss": 0.43098, "time": 1.10636}
{"mode": "train", "epoch": 50, "iter": 300, "lr": 1e-05, "memory": 19005, "data_time": 0.01723, "loss_rpn_cls": 0.00699, "loss_rpn_bbox": 0.01154, "s0.loss_cls": 0.08536, "s0.acc": 96.99756, "s0.loss_bbox": 0.1597, "s1.loss_cls": 0.0319, "s1.acc": 97.8015, "s1.loss_bbox": 0.06881, "s2.loss_cls": 0.01476, "s2.acc": 97.97422, "s2.loss_bbox": 0.03032, "loss": 0.40938, "time": 1.10722}
{"mode": "train", "epoch": 50, "iter": 350, "lr": 1e-05, "memory": 19005, "data_time": 0.01692, "loss_rpn_cls": 0.00785, "loss_rpn_bbox": 0.01494, "s0.loss_cls": 0.09711, "s0.acc": 96.63281, "s0.loss_bbox": 0.17676, "s1.loss_cls": 0.03735, "s1.acc": 97.44011, "s1.loss_bbox": 0.07579, "s2.loss_cls": 0.0172, "s2.acc": 97.62992, "s2.loss_bbox": 0.03291, "loss": 0.45991, "time": 1.11067}
{"mode": "train", "epoch": 50, "iter": 400, "lr": 1e-05, "memory": 19005, "data_time": 0.01696, "loss_rpn_cls": 0.00722, "loss_rpn_bbox": 0.01485, "s0.loss_cls": 0.08763, "s0.acc": 96.93896, "s0.loss_bbox": 0.16689, "s1.loss_cls": 0.03404, "s1.acc": 97.65999, "s1.loss_bbox": 0.07141, "s2.loss_cls": 0.01599, "s2.acc": 97.73194, "s2.loss_bbox": 0.03135, "loss": 0.42939, "time": 1.10977}
{"mode": "train", "epoch": 50, "iter": 450, "lr": 1e-05, "memory": 19005, "data_time": 0.01653, "loss_rpn_cls": 0.00684, "loss_rpn_bbox": 0.01355, "s0.loss_cls": 0.08928, "s0.acc": 96.85205, "s0.loss_bbox": 0.16459, "s1.loss_cls": 0.03463, "s1.acc": 97.63868, "s1.loss_bbox": 0.07142, "s2.loss_cls": 0.01658, "s2.acc": 97.68898, "s2.loss_bbox": 0.03099, "loss": 0.42787, "time": 1.10057}
{"mode": "val", "epoch": 50, "iter": 977, "lr": 1e-05, "bbox_mAP": 0.342, "bbox_mAP_50": 0.467, "bbox_mAP_75": 0.364, "bbox_mAP_s": 0.026, "bbox_mAP_m": 0.055, "bbox_mAP_l": 0.408, "bbox_mAP_copypaste": "0.342 0.467 0.364 0.026 0.055 0.408"}
{"config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                reg_decoded_bbox=True,\n                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(256, 256), (384, 384), (512, 512), (640, 640),\n                          (768, 768), (896, 896), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }],\n                  [{\n                      'type':\n                      'Resize',\n                      'img_scale': [(256, 256), (512, 512), (768, 768),\n                                    (1024, 1024)],\n                      'multiscale_mode':\n                      'value',\n                      'keep_ratio':\n                      True\n                  }, {\n                      'type': 'RandomCrop',\n                      'crop_type': 'absolute_range',\n                      'crop_size': (384, 600),\n                      'allow_negative_crop': True\n                  }, {\n                      'type':\n                      'Resize',\n                      'img_scale': [(256, 256), (384, 384), (512, 512),\n                                    (640, 640), (768, 768), (896, 896),\n                                    (1024, 1024)],\n                      'multiscale_mode':\n                      'value',\n                      'override':\n                      True,\n                      'keep_ratio':\n                      True\n                  }, {\n                      'type': 'PhotoMetricDistortion',\n                      'brightness_delta': 32,\n                      'contrast_range': (0.5, 1.5),\n                      'saturation_range': (0.5, 1.5),\n                      'hue_delta': 18\n                  }, {\n                      'type': 'MinIoURandomCrop',\n                      'min_ious': (0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n                      'min_crop_size': 0.3\n                  }, {\n                      'type':\n                      'CutOut',\n                      'n_holes': (5, 10),\n                      'cutout_shape': [(4, 4), (4, 8), (8, 4), (8, 8),\n                                       (16, 32), (32, 16), (32, 32), (32, 48),\n                                       (48, 32), (48, 48)]\n                  }]]),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/train_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../dataset//fold_dataset/validation_fold_1_of_5.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../dataset/test.json',\n        img_prefix='../../dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(interval=1, metric='bbox', save_best='auto')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0005,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ncheckpoint_config = dict(max_keep_ckpts=3, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nseed = 42\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_r50_fpn_1x_coco-custom_trash'\nfp16 = dict(loss_scale=dict(init_scale=512.0))\ndevice = 'cuda'\n", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 7e-05, "memory": 18994, "data_time": 0.06311, "loss_rpn_cls": 0.22766, "loss_rpn_bbox": 0.042, "s0.loss_cls": 0.4377, "s0.acc": 91.80615, "s0.loss_bbox": 0.23625, "s1.loss_cls": 0.13753, "s1.acc": 95.35205, "s1.loss_bbox": 0.03026, "s2.loss_cls": 0.05102, "s2.acc": 96.73438, "s2.loss_bbox": 0.00297, "loss": 1.16539, "time": 1.1929}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 9e-05, "memory": 18994, "data_time": 0.01461, "loss_rpn_cls": 0.09583, "loss_rpn_bbox": 0.03761, "s0.loss_cls": 0.33942, "s0.acc": 92.21143, "s0.loss_bbox": 0.30957, "s1.loss_cls": 0.09043, "s1.acc": 96.59424, "s1.loss_bbox": 0.04172, "s2.loss_cls": 0.02577, "s2.acc": 98.37012, "s2.loss_bbox": 0.00396, "loss": 0.94432, "time": 1.12657}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00012, "memory": 18994, "data_time": 0.01489, "loss_rpn_cls": 0.07028, "loss_rpn_bbox": 0.03358, "s0.loss_cls": 0.31186, "s0.acc": 92.33691, "s0.loss_bbox": 0.30734, "s1.loss_cls": 0.08884, "s1.acc": 96.2002, "s1.loss_bbox": 0.04999, "s2.loss_cls": 0.024, "s2.acc": 98.30176, "s2.loss_bbox": 0.00509, "loss": 0.89097, "time": 1.13224}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00014, "memory": 18994, "data_time": 0.01521, "loss_rpn_cls": 0.0614, "loss_rpn_bbox": 0.03378, "s0.loss_cls": 0.29534, "s0.acc": 92.2876, "s0.loss_bbox": 0.29697, "s1.loss_cls": 0.10962, "s1.acc": 94.45605, "s1.loss_bbox": 0.07843, "s2.loss_cls": 0.03338, "s2.acc": 96.9502, "s2.loss_bbox": 0.01292, "loss": 0.92184, "time": 1.12985}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00016, "memory": 18994, "data_time": 0.01516, "loss_rpn_cls": 0.07059, "loss_rpn_bbox": 0.03525, "s0.loss_cls": 0.31035, "s0.acc": 91.83545, "s0.loss_bbox": 0.30817, "s1.loss_cls": 0.13685, "s1.acc": 92.74902, "s1.loss_bbox": 0.1032, "s2.loss_cls": 0.04795, "s2.acc": 95.12158, "s2.loss_bbox": 0.02335, "loss": 1.03572, "time": 1.15149}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00018, "memory": 18994, "data_time": 0.01503, "loss_rpn_cls": 0.05925, "loss_rpn_bbox": 0.03417, "s0.loss_cls": 0.28955, "s0.acc": 91.98242, "s0.loss_bbox": 0.29377, "s1.loss_cls": 0.13203, "s1.acc": 92.62939, "s1.loss_bbox": 0.09986, "s2.loss_cls": 0.05323, "s2.acc": 94.0957, "s2.loss_bbox": 0.02804, "loss": 0.98989, "time": 1.12388}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00021, "memory": 18994, "data_time": 0.01502, "loss_rpn_cls": 0.06252, "loss_rpn_bbox": 0.03305, "s0.loss_cls": 0.29218, "s0.acc": 92.42773, "s0.loss_bbox": 0.27827, "s1.loss_cls": 0.13025, "s1.acc": 93.04694, "s1.loss_bbox": 0.09565, "s2.loss_cls": 0.05203, "s2.acc": 94.47912, "s2.loss_bbox": 0.02713, "loss": 0.97107, "time": 1.13479}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00023, "memory": 18994, "data_time": 0.01536, "loss_rpn_cls": 0.05945, "loss_rpn_bbox": 0.03449, "s0.loss_cls": 0.30703, "s0.acc": 92.08496, "s0.loss_bbox": 0.27909, "s1.loss_cls": 0.14075, "s1.acc": 92.53174, "s1.loss_bbox": 0.10259, "s2.loss_cls": 0.05601, "s2.acc": 94.08057, "s2.loss_bbox": 0.02962, "loss": 1.00903, "time": 1.1351}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00025, "memory": 18994, "data_time": 0.0156, "loss_rpn_cls": 0.05384, "loss_rpn_bbox": 0.02875, "s0.loss_cls": 0.28204, "s0.acc": 92.11719, "s0.loss_bbox": 0.27912, "s1.loss_cls": 0.1358, "s1.acc": 92.27069, "s1.loss_bbox": 0.10718, "s2.loss_cls": 0.05704, "s2.acc": 93.54491, "s2.loss_bbox": 0.03434, "loss": 0.97813, "time": 1.12569}
{"mode": "val", "epoch": 1, "iter": 977, "lr": 0.00027, "bbox_mAP": 0.134, "bbox_mAP_50": 0.256, "bbox_mAP_75": 0.126, "bbox_mAP_s": 0.005, "bbox_mAP_m": 0.019, "bbox_mAP_l": 0.163, "bbox_mAP_copypaste": "0.134 0.256 0.126 0.005 0.019 0.163"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00029, "memory": 18994, "data_time": 0.06574, "loss_rpn_cls": 0.04299, "loss_rpn_bbox": 0.02848, "s0.loss_cls": 0.28917, "s0.acc": 92.18262, "s0.loss_bbox": 0.27566, "s1.loss_cls": 0.13777, "s1.acc": 92.3552, "s1.loss_bbox": 0.10628, "s2.loss_cls": 0.06008, "s2.acc": 93.21326, "s2.loss_bbox": 0.03461, "loss": 0.97502, "time": 1.2053}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00031, "memory": 18994, "data_time": 0.01653, "loss_rpn_cls": 0.05947, "loss_rpn_bbox": 0.03482, "s0.loss_cls": 0.3224, "s0.acc": 90.93604, "s0.loss_bbox": 0.31282, "s1.loss_cls": 0.15618, "s1.acc": 91.13292, "s1.loss_bbox": 0.1188, "s2.loss_cls": 0.06617, "s2.acc": 92.64576, "s2.loss_bbox": 0.03827, "loss": 1.10894, "time": 1.13663}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00033, "memory": 18994, "data_time": 0.01683, "loss_rpn_cls": 0.04702, "loss_rpn_bbox": 0.03037, "s0.loss_cls": 0.28283, "s0.acc": 92.24463, "s0.loss_bbox": 0.26037, "s1.loss_cls": 0.14163, "s1.acc": 91.87772, "s1.loss_bbox": 0.1057, "s2.loss_cls": 0.06218, "s2.acc": 92.83767, "s2.loss_bbox": 0.03562, "loss": 0.96571, "time": 1.13302}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00036, "memory": 18994, "data_time": 0.0168, "loss_rpn_cls": 0.04731, "loss_rpn_bbox": 0.03115, "s0.loss_cls": 0.28176, "s0.acc": 92.19922, "s0.loss_bbox": 0.26508, "s1.loss_cls": 0.13645, "s1.acc": 92.26515, "s1.loss_bbox": 0.10671, "s2.loss_cls": 0.05915, "s2.acc": 93.26277, "s2.loss_bbox": 0.03665, "loss": 0.96426, "time": 1.13728}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00038, "memory": 18994, "data_time": 0.01659, "loss_rpn_cls": 0.06069, "loss_rpn_bbox": 0.03293, "s0.loss_cls": 0.31424, "s0.acc": 91.60205, "s0.loss_bbox": 0.27786, "s1.loss_cls": 0.15034, "s1.acc": 91.7835, "s1.loss_bbox": 0.10761, "s2.loss_cls": 0.06464, "s2.acc": 92.87919, "s2.loss_bbox": 0.03573, "loss": 1.04404, "time": 1.13056}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.0004, "memory": 18994, "data_time": 0.01675, "loss_rpn_cls": 0.05201, "loss_rpn_bbox": 0.02859, "s0.loss_cls": 0.31502, "s0.acc": 91.67139, "s0.loss_bbox": 0.27674, "s1.loss_cls": 0.15041, "s1.acc": 91.68782, "s1.loss_bbox": 0.1073, "s2.loss_cls": 0.06529, "s2.acc": 92.79415, "s2.loss_bbox": 0.03618, "loss": 1.03154, "time": 1.13589}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00042, "memory": 18994, "data_time": 0.01718, "loss_rpn_cls": 0.05547, "loss_rpn_bbox": 0.03092, "s0.loss_cls": 0.30007, "s0.acc": 92.17871, "s0.loss_bbox": 0.26423, "s1.loss_cls": 0.14095, "s1.acc": 92.24399, "s1.loss_bbox": 0.10107, "s2.loss_cls": 0.06077, "s2.acc": 93.18448, "s2.loss_bbox": 0.03419, "loss": 0.98765, "time": 1.12861}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.00044, "memory": 18994, "data_time": 0.01874, "loss_rpn_cls": 0.06532, "loss_rpn_bbox": 0.03785, "s0.loss_cls": 0.3369, "s0.acc": 91.26758, "s0.loss_bbox": 0.29782, "s1.loss_cls": 0.15771, "s1.acc": 91.45116, "s1.loss_bbox": 0.11263, "s2.loss_cls": 0.06588, "s2.acc": 92.75047, "s2.loss_bbox": 0.03527, "loss": 1.10937, "time": 1.15332}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.00046, "memory": 18994, "data_time": 0.01755, "loss_rpn_cls": 0.05454, "loss_rpn_bbox": 0.02888, "s0.loss_cls": 0.29277, "s0.acc": 92.24023, "s0.loss_bbox": 0.26305, "s1.loss_cls": 0.13999, "s1.acc": 92.38907, "s1.loss_bbox": 0.09988, "s2.loss_cls": 0.06099, "s2.acc": 93.18792, "s2.loss_bbox": 0.03419, "loss": 0.97429, "time": 1.13998}
{"mode": "val", "epoch": 2, "iter": 977, "lr": 0.00048, "bbox_mAP": 0.107, "bbox_mAP_50": 0.191, "bbox_mAP_75": 0.107, "bbox_mAP_s": 0.001, "bbox_mAP_m": 0.013, "bbox_mAP_l": 0.131, "bbox_mAP_copypaste": "0.107 0.191 0.107 0.001 0.013 0.131"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00049, "memory": 18994, "data_time": 0.06532, "loss_rpn_cls": 0.05842, "loss_rpn_bbox": 0.03237, "s0.loss_cls": 0.30437, "s0.acc": 91.63916, "s0.loss_bbox": 0.27593, "s1.loss_cls": 0.14595, "s1.acc": 91.77056, "s1.loss_bbox": 0.10555, "s2.loss_cls": 0.06376, "s2.acc": 92.77355, "s2.loss_bbox": 0.03591, "loss": 1.02227, "time": 1.18651}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00049, "memory": 18994, "data_time": 0.01669, "loss_rpn_cls": 0.05792, "loss_rpn_bbox": 0.03586, "s0.loss_cls": 0.29515, "s0.acc": 92.1123, "s0.loss_bbox": 0.25683, "s1.loss_cls": 0.14566, "s1.acc": 91.93174, "s1.loss_bbox": 0.10078, "s2.loss_cls": 0.06501, "s2.acc": 92.84188, "s2.loss_bbox": 0.03425, "loss": 0.99147, "time": 1.13962}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.00049, "memory": 18994, "data_time": 0.01688, "loss_rpn_cls": 0.05609, "loss_rpn_bbox": 0.03376, "s0.loss_cls": 0.3223, "s0.acc": 91.57764, "s0.loss_bbox": 0.2868, "s1.loss_cls": 0.15327, "s1.acc": 91.71946, "s1.loss_bbox": 0.10726, "s2.loss_cls": 0.0657, "s2.acc": 92.73099, "s2.loss_bbox": 0.03573, "loss": 1.06091, "time": 1.13235}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.00049, "memory": 18994, "data_time": 0.01709, "loss_rpn_cls": 0.04673, "loss_rpn_bbox": 0.02682, "s0.loss_cls": 0.2874, "s0.acc": 92.12891, "s0.loss_bbox": 0.26843, "s1.loss_cls": 0.13967, "s1.acc": 92.05091, "s1.loss_bbox": 0.10601, "s2.loss_cls": 0.06131, "s2.acc": 92.88941, "s2.loss_bbox": 0.03659, "loss": 0.97295, "time": 1.14761}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.00049, "memory": 18994, "data_time": 0.01674, "loss_rpn_cls": 0.0428, "loss_rpn_bbox": 0.02376, "s0.loss_cls": 0.27876, "s0.acc": 92.23242, "s0.loss_bbox": 0.2607, "s1.loss_cls": 0.13825, "s1.acc": 92.08179, "s1.loss_bbox": 0.10369, "s2.loss_cls": 0.06304, "s2.acc": 92.69238, "s2.loss_bbox": 0.03757, "loss": 0.94858, "time": 1.12298}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.00049, "memory": 18994, "data_time": 0.01671, "loss_rpn_cls": 0.05112, "loss_rpn_bbox": 0.0278, "s0.loss_cls": 0.29636, "s0.acc": 92.16553, "s0.loss_bbox": 0.25743, "s1.loss_cls": 0.14464, "s1.acc": 92.0558, "s1.loss_bbox": 0.10293, "s2.loss_cls": 0.06449, "s2.acc": 92.72638, "s2.loss_bbox": 0.03728, "loss": 0.98204, "time": 1.11823}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.00048, "memory": 18994, "data_time": 0.01749, "loss_rpn_cls": 0.04337, "loss_rpn_bbox": 0.02667, "s0.loss_cls": 0.28103, "s0.acc": 92.20654, "s0.loss_bbox": 0.25461, "s1.loss_cls": 0.13575, "s1.acc": 92.23355, "s1.loss_bbox": 0.1006, "s2.loss_cls": 0.06049, "s2.acc": 92.94504, "s2.loss_bbox": 0.03466, "loss": 0.93718, "time": 1.12812}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.00048, "memory": 18994, "data_time": 0.01736, "loss_rpn_cls": 0.0496, "loss_rpn_bbox": 0.03019, "s0.loss_cls": 0.29538, "s0.acc": 91.84375, "s0.loss_bbox": 0.2729, "s1.loss_cls": 0.14781, "s1.acc": 91.5911, "s1.loss_bbox": 0.10977, "s2.loss_cls": 0.06695, "s2.acc": 92.55336, "s2.loss_bbox": 0.03843, "loss": 1.01103, "time": 1.14388}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00048, "memory": 18994, "data_time": 0.01725, "loss_rpn_cls": 0.05378, "loss_rpn_bbox": 0.03297, "s0.loss_cls": 0.31063, "s0.acc": 91.32129, "s0.loss_bbox": 0.28363, "s1.loss_cls": 0.15388, "s1.acc": 91.17714, "s1.loss_bbox": 0.10848, "s2.loss_cls": 0.0695, "s2.acc": 91.88628, "s2.loss_bbox": 0.03708, "loss": 1.04995, "time": 1.13731}
{"mode": "val", "epoch": 3, "iter": 977, "lr": 0.00048, "bbox_mAP": 0.19, "bbox_mAP_50": 0.312, "bbox_mAP_75": 0.201, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.021, "bbox_mAP_l": 0.232, "bbox_mAP_copypaste": "0.190 0.312 0.201 0.003 0.021 0.232"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00048, "memory": 18994, "data_time": 0.0657, "loss_rpn_cls": 0.03571, "loss_rpn_bbox": 0.02501, "s0.loss_cls": 0.28928, "s0.acc": 91.89404, "s0.loss_bbox": 0.26824, "s1.loss_cls": 0.14428, "s1.acc": 91.70263, "s1.loss_bbox": 0.10986, "s2.loss_cls": 0.06696, "s2.acc": 92.09429, "s2.loss_bbox": 0.03996, "loss": 0.9793, "time": 1.17577}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.00048, "memory": 18994, "data_time": 0.0169, "loss_rpn_cls": 0.04228, "loss_rpn_bbox": 0.02788, "s0.loss_cls": 0.27362, "s0.acc": 92.30029, "s0.loss_bbox": 0.25217, "s1.loss_cls": 0.13899, "s1.acc": 91.98477, "s1.loss_bbox": 0.10253, "s2.loss_cls": 0.06396, "s2.acc": 92.44236, "s2.loss_bbox": 0.03728, "loss": 0.93871, "time": 1.1324}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.00048, "memory": 18994, "data_time": 0.01653, "loss_rpn_cls": 0.04953, "loss_rpn_bbox": 0.02679, "s0.loss_cls": 0.29874, "s0.acc": 91.78174, "s0.loss_bbox": 0.26551, "s1.loss_cls": 0.14833, "s1.acc": 91.4805, "s1.loss_bbox": 0.10822, "s2.loss_cls": 0.06781, "s2.acc": 92.01221, "s2.loss_bbox": 0.03851, "loss": 1.00343, "time": 1.13738}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.00048, "memory": 18994, "data_time": 0.01722, "loss_rpn_cls": 0.04516, "loss_rpn_bbox": 0.02687, "s0.loss_cls": 0.27857, "s0.acc": 92.10596, "s0.loss_bbox": 0.26222, "s1.loss_cls": 0.13733, "s1.acc": 91.95711, "s1.loss_bbox": 0.10671, "s2.loss_cls": 0.06287, "s2.acc": 92.57954, "s2.loss_bbox": 0.03792, "loss": 0.95766, "time": 1.13919}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.00047, "memory": 18994, "data_time": 0.01695, "loss_rpn_cls": 0.0427, "loss_rpn_bbox": 0.02944, "s0.loss_cls": 0.28671, "s0.acc": 91.98828, "s0.loss_bbox": 0.26023, "s1.loss_cls": 0.14372, "s1.acc": 91.74794, "s1.loss_bbox": 0.10546, "s2.loss_cls": 0.06661, "s2.acc": 92.22029, "s2.loss_bbox": 0.03736, "loss": 0.97223, "time": 1.1457}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.00047, "memory": 18994, "data_time": 0.01677, "loss_rpn_cls": 0.04088, "loss_rpn_bbox": 0.02779, "s0.loss_cls": 0.2884, "s0.acc": 91.89355, "s0.loss_bbox": 0.26543, "s1.loss_cls": 0.14542, "s1.acc": 91.60256, "s1.loss_bbox": 0.1077, "s2.loss_cls": 0.0669, "s2.acc": 92.08979, "s2.loss_bbox": 0.03879, "loss": 0.9813, "time": 1.14778}
{"mode": "train", "epoch": 4, "iter": 350, "lr": 0.00047, "memory": 18994, "data_time": 0.01631, "loss_rpn_cls": 0.04676, "loss_rpn_bbox": 0.02931, "s0.loss_cls": 0.28362, "s0.acc": 92.10303, "s0.loss_bbox": 0.25239, "s1.loss_cls": 0.14259, "s1.acc": 91.75688, "s1.loss_bbox": 0.10294, "s2.loss_cls": 0.06491, "s2.acc": 92.5039, "s2.loss_bbox": 0.03704, "loss": 0.95957, "time": 1.15167}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.00047, "memory": 18994, "data_time": 0.01639, "loss_rpn_cls": 0.0416, "loss_rpn_bbox": 0.02783, "s0.loss_cls": 0.28279, "s0.acc": 92.05273, "s0.loss_bbox": 0.25455, "s1.loss_cls": 0.144, "s1.acc": 91.61997, "s1.loss_bbox": 0.10494, "s2.loss_cls": 0.06718, "s2.acc": 91.96874, "s2.loss_bbox": 0.03825, "loss": 0.96114, "time": 1.13946}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 0.00047, "memory": 18994, "data_time": 0.018, "loss_rpn_cls": 0.04819, "loss_rpn_bbox": 0.02995, "s0.loss_cls": 0.28529, "s0.acc": 91.95068, "s0.loss_bbox": 0.25753, "s1.loss_cls": 0.14358, "s1.acc": 91.5076, "s1.loss_bbox": 0.1034, "s2.loss_cls": 0.06811, "s2.acc": 91.92487, "s2.loss_bbox": 0.03719, "loss": 0.97324, "time": 1.13978}
{"mode": "val", "epoch": 4, "iter": 977, "lr": 0.00047, "bbox_mAP": 0.195, "bbox_mAP_50": 0.305, "bbox_mAP_75": 0.217, "bbox_mAP_s": 0.005, "bbox_mAP_m": 0.028, "bbox_mAP_l": 0.236, "bbox_mAP_copypaste": "0.195 0.305 0.217 0.005 0.028 0.236"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00046, "memory": 18994, "data_time": 0.06606, "loss_rpn_cls": 0.0358, "loss_rpn_bbox": 0.02629, "s0.loss_cls": 0.27543, "s0.acc": 91.97607, "s0.loss_bbox": 0.26368, "s1.loss_cls": 0.13697, "s1.acc": 91.91365, "s1.loss_bbox": 0.10958, "s2.loss_cls": 0.06195, "s2.acc": 92.46615, "s2.loss_bbox": 0.04039, "loss": 0.95009, "time": 1.1866}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.00046, "memory": 18994, "data_time": 0.01681, "loss_rpn_cls": 0.03856, "loss_rpn_bbox": 0.02863, "s0.loss_cls": 0.25973, "s0.acc": 92.27002, "s0.loss_bbox": 0.26235, "s1.loss_cls": 0.12946, "s1.acc": 92.19022, "s1.loss_bbox": 0.1069, "s2.loss_cls": 0.05996, "s2.acc": 92.69694, "s2.loss_bbox": 0.03882, "loss": 0.92441, "time": 1.14068}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.00046, "memory": 18994, "data_time": 0.01655, "loss_rpn_cls": 0.04117, "loss_rpn_bbox": 0.02982, "s0.loss_cls": 0.29012, "s0.acc": 91.76074, "s0.loss_bbox": 0.26123, "s1.loss_cls": 0.14443, "s1.acc": 91.66143, "s1.loss_bbox": 0.1063, "s2.loss_cls": 0.0666, "s2.acc": 92.26216, "s2.loss_bbox": 0.03792, "loss": 0.97759, "time": 1.13686}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.00046, "memory": 18994, "data_time": 0.01688, "loss_rpn_cls": 0.03464, "loss_rpn_bbox": 0.02538, "s0.loss_cls": 0.25919, "s0.acc": 92.15869, "s0.loss_bbox": 0.26694, "s1.loss_cls": 0.12993, "s1.acc": 91.98474, "s1.loss_bbox": 0.11111, "s2.loss_cls": 0.06041, "s2.acc": 92.4774, "s2.loss_bbox": 0.04077, "loss": 0.92837, "time": 1.14873}
{"mode": "train", "epoch": 5, "iter": 250, "lr": 0.00046, "memory": 18994, "data_time": 0.01738, "loss_rpn_cls": 0.03655, "loss_rpn_bbox": 0.02396, "s0.loss_cls": 0.27633, "s0.acc": 91.95557, "s0.loss_bbox": 0.25743, "s1.loss_cls": 0.13842, "s1.acc": 91.73524, "s1.loss_bbox": 0.1069, "s2.loss_cls": 0.06384, "s2.acc": 92.32052, "s2.loss_bbox": 0.03922, "loss": 0.94267, "time": 1.14448}
{"mode": "train", "epoch": 5, "iter": 300, "lr": 0.00046, "memory": 18994, "data_time": 0.01755, "loss_rpn_cls": 0.03355, "loss_rpn_bbox": 0.02643, "s0.loss_cls": 0.26591, "s0.acc": 92.3418, "s0.loss_bbox": 0.24628, "s1.loss_cls": 0.13718, "s1.acc": 91.86608, "s1.loss_bbox": 0.1043, "s2.loss_cls": 0.06427, "s2.acc": 92.31845, "s2.loss_bbox": 0.03875, "loss": 0.91666, "time": 1.13829}
{"mode": "train", "epoch": 5, "iter": 350, "lr": 0.00045, "memory": 18994, "data_time": 0.01751, "loss_rpn_cls": 0.03388, "loss_rpn_bbox": 0.02451, "s0.loss_cls": 0.25302, "s0.acc": 92.49805, "s0.loss_bbox": 0.24529, "s1.loss_cls": 0.13034, "s1.acc": 92.04098, "s1.loss_bbox": 0.1019, "s2.loss_cls": 0.06168, "s2.acc": 92.50289, "s2.loss_bbox": 0.03716, "loss": 0.88778, "time": 1.15137}
{"mode": "train", "epoch": 5, "iter": 400, "lr": 0.00045, "memory": 18994, "data_time": 0.01727, "loss_rpn_cls": 0.04097, "loss_rpn_bbox": 0.02551, "s0.loss_cls": 0.27573, "s0.acc": 92.05859, "s0.loss_bbox": 0.25873, "s1.loss_cls": 0.13937, "s1.acc": 91.79999, "s1.loss_bbox": 0.10431, "s2.loss_cls": 0.06426, "s2.acc": 92.17208, "s2.loss_bbox": 0.03796, "loss": 0.94683, "time": 1.12923}
